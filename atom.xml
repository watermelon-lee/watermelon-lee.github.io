<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Watermelon</title>
  
  <subtitle>远远和元老大的小窝</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://watermelon-lee.github.io/"/>
  <updated>2018-06-08T11:53:40.190Z</updated>
  <id>https://watermelon-lee.github.io/</id>
  
  <author>
    <name>watermelon-lee</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Mybatis学习总结2</title>
    <link href="https://watermelon-lee.github.io/2018/06/07/Mybatis2/"/>
    <id>https://watermelon-lee.github.io/2018/06/07/Mybatis2/</id>
    <published>2018-06-07T13:59:58.000Z</published>
    <updated>2018-06-08T11:53:40.190Z</updated>
    
    <content type="html"><![CDATA[<h1 id="动态SQL"><a href="#动态SQL" class="headerlink" title="动态SQL"></a>动态SQL</h1><p>创建一个数据表<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">#employee</span><br><span class="line">CREATE TABLE employee(</span><br><span class="line">  id INT(11) PRIMARY KEY AUTO_INCREMENT,</span><br><span class="line">  loginName VARCHAR(18),</span><br><span class="line">  password VARCHAR(18),</span><br><span class="line">  name VARCHAR(18) DEFAULT NULL,</span><br><span class="line">  sex VARCHAR(4) DEFAULT&apos;男&apos;,</span><br><span class="line">  age INT(11) DEFAULT NULL ,</span><br><span class="line">  phone VARCHAR(19),</span><br><span class="line">  sal DOUBLE,</span><br><span class="line">  state VARCHAR(12)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">INSERT INTO employee(loginName, password, name, sex, age, phone, sal, state) VALUES (&apos;jack&apos;,&apos;123&apos;,&apos;杰克&apos;,&apos;nv&apos;,12,&apos;123456789&apos;,9041.22,&apos;active&apos;);</span><br><span class="line">INSERT INTO employee(loginName, password, name, sex, age, phone, sal, state) VALUES (&apos;wade&apos;,&apos;123&apos;,&apos;韦德&apos;,&apos;男&apos;,32,&apos;786868686&apos;,123.22,&apos;active&apos;);</span><br><span class="line">INSERT INTO employee(loginName, password, name, sex, age, phone, sal, state) VALUES (&apos;kobe&apos;,&apos;123&apos;,&apos;科比&apos;,&apos;男&apos;,124,&apos;123411223&apos;,234.22,&apos;active&apos;);</span><br><span class="line">INSERT INTO employee(loginName, password, name, sex, age, phone, sal, state) VALUES (&apos;james&apos;,&apos;123&apos;,&apos;詹姆斯&apos;,&apos;男&apos;,54,&apos;123444312&apos;,9041.22,&apos;Inactive&apos;);</span><br></pre></td></tr></table></figure></p><p>创建对应的实体类:Employee<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">package com.domain;</span><br><span class="line"></span><br><span class="line">public class Employee &#123;</span><br><span class="line">    private int id;</span><br><span class="line">    private String loginName;</span><br><span class="line">    private String password;</span><br><span class="line">    private String name;</span><br><span class="line">    private String sex;</span><br><span class="line">    private int age;</span><br><span class="line">    private String phone;</span><br><span class="line">    private double sal;</span><br><span class="line">    private String state;</span><br><span class="line">    //省略setter与getter</span><br></pre></td></tr></table></figure></p><h2 id="if"><a href="#if" class="headerlink" title="if"></a>if</h2><p>使用if可动态的包含where子句的条件的一部分,如:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;select id=&quot;selectWithIf1&quot; resultType=&quot;employee&quot;&gt;</span><br><span class="line">        SELECT * FROM employee WHERE state=&apos;active&apos;</span><br><span class="line">        &lt;!--加上选择条件,如果传来的参数有id,则加上id条件查询--&gt;</span><br><span class="line">        &lt;if test=&quot;id!=null&quot;&gt;AND id=#&#123;id&#125;&lt;/if&gt;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure></p><p>如果有多个搜索条件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;select id=&quot;selectWithIf2&quot; resultType=&quot;employee&quot;&gt;</span><br><span class="line">        SELECT * FROM employee WHERE state=&apos;active&apos;</span><br><span class="line">        &lt;if test=&quot;loginName!=null and password !=null&quot;&gt;</span><br><span class="line">            AND loginName=#&#123;loginName&#125; AND password=#&#123;password&#125;</span><br><span class="line">        &lt;/if&gt;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure></p><h2 id="choose-when-otherwise"><a href="#choose-when-otherwise" class="headerlink" title="choose(when,otherwise)"></a>choose(when,otherwise)</h2><p>从我们想用的条件中选择其中一个,注意只会选择一个,先满足的先选择<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--Choose,when,otherwise 只会选择一个,先符合的先选择--&gt;</span><br><span class="line">    &lt;select id=&quot;selectWithChoose&quot; resultType=&quot;employee&quot;&gt;</span><br><span class="line">        SELECT * FROM employee WHERE state=&apos;active&apos;</span><br><span class="line">        &lt;choose&gt;</span><br><span class="line">            &lt;when test=&quot;id!=null&quot;&gt;</span><br><span class="line">                AND id=#&#123;id&#125;</span><br><span class="line">            &lt;/when&gt;</span><br><span class="line">            &lt;when test=&quot;loginName!=null and password!=null&quot;&gt;</span><br><span class="line">                and loginName=#&#123;loginName&#125; AND password=#&#123;password&#125;</span><br><span class="line">            &lt;/when&gt;</span><br><span class="line">            &lt;otherwise&gt;</span><br><span class="line">                AND sex=&apos;男&apos;</span><br><span class="line">            &lt;/otherwise&gt;</span><br><span class="line">        &lt;/choose&gt;</span><br><span class="line">    &lt;/select&gt;</span><br></pre></td></tr></table></figure></p><h2 id="where"><a href="#where" class="headerlink" title="where"></a>where</h2><p>当where的条件不一定会有一个满足时,则可能会执行sql语句如:select * from employee where,这样显然是错误的句子.我么需要使用where元素解决.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--where 在不确定是否一定有条件传入,使用where,若有,则加上条件,如没有,则不加入--&gt;</span><br><span class="line">   &lt;select id=&quot;selectWithWhere&quot; resultType=&quot;employee&quot;&gt;</span><br><span class="line">       SELECT * FROM employee</span><br><span class="line">       &lt;where&gt;</span><br><span class="line">           &lt;if test=&quot;state!=null&quot;&gt;</span><br><span class="line">               SELECT state=#&#123;state&#125;</span><br><span class="line">           &lt;/if&gt;</span><br><span class="line">           &lt;if test=&quot;sex!=null&quot;&gt;</span><br><span class="line">               SELECT sex=#&#123;sex&#125;</span><br><span class="line">           &lt;/if&gt;</span><br><span class="line">       &lt;/where&gt;</span><br><span class="line">   &lt;/select&gt;</span><br></pre></td></tr></table></figure></p><p>这样,只有当有一个即以上的if条件成立时,才会插入where子句,否则执行select * from employee.</p><h2 id="set"><a href="#set" class="headerlink" title="set"></a>set</h2><p>使用set关键字动态包含需要跟新的列.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--使用set动态更新语句--&gt;</span><br><span class="line">    &lt;update id=&quot;updateWithSet&quot; parameterType=&quot;employee&quot;&gt;</span><br><span class="line">        UPDATE employee</span><br><span class="line">        &lt;set&gt;</span><br><span class="line">            &lt;if test=&quot;loginName!=null&quot;&gt;loginName=#&#123;loginName&#125;,&lt;/if&gt;</span><br><span class="line">            &lt;if test=&quot;password!=null&quot;&gt;password=#&#123;password&#125;,&lt;/if&gt;</span><br><span class="line">            &lt;if test=&quot;name!=null&quot;&gt;name=#&#123;name&#125;,&lt;/if&gt;</span><br><span class="line">            &lt;if test=&quot;sex!=null&quot;&gt;sex=#&#123;sex&#125;,&lt;/if&gt;</span><br><span class="line">            &lt;if test=&quot;age!=null&quot;&gt;age=#&#123;age&#125;,&lt;/if&gt;</span><br><span class="line">            &lt;if test=&quot;sal!=null&quot;&gt;sal=#&#123;sal&#125;,&lt;/if&gt;</span><br><span class="line">            &lt;if test=&quot;phone!=null&quot;&gt;phone=#&#123;phone&#125;,&lt;/if&gt;</span><br><span class="line">            &lt;if test=&quot;state!=null&quot;&gt;state=#&#123;state&#125;&lt;/if&gt;</span><br><span class="line">        &lt;/set&gt;</span><br><span class="line"></span><br><span class="line">        WHERE id=#&#123;id&#125;</span><br><span class="line">    &lt;/update&gt;</span><br></pre></td></tr></table></figure></p><p>set元素会自动前置SET关键字,并且去除无关的逗号.</p><h2 id="foreach"><a href="#foreach" class="headerlink" title="foreach"></a>foreach</h2><p>在SQL查询时,通常需要惊进行集合便利,通常发生在构建IN条件语句的时候.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--foreach遍历集合--&gt;</span><br><span class="line">   &lt;!--sql语句为SELECT * FROM employee WHERE id IN ( ? , ? , ? )--&gt;</span><br><span class="line">   &lt;select id=&quot;selectWithForeach&quot; resultType=&quot;employee&quot;&gt;</span><br><span class="line">       SELECT * FROM employee WHERE id IN</span><br><span class="line">       &lt;foreach collection=&quot;list&quot; index=&quot;index&quot; item=&quot;item&quot; open=&quot;(&quot; separator=&quot;,&quot; close=&quot;)&quot;&gt;</span><br><span class="line">           #&#123;item&#125;</span><br><span class="line">       &lt;/foreach&gt;</span><br><span class="line">   &lt;/select&gt;</span><br></pre></td></tr></table></figure></p><p>注意定义open,separator,close属性,否则生成sql语句为<code>SELECT * FROM employee WHERE id IN ? ? ?</code>,而我们需要的是<code>SELECT * FROM employee WHERE id IN ( ? , ? , ? )</code>.</p><h2 id="bind"><a href="#bind" class="headerlink" title="bind"></a>bind</h2><p>bind元素可以创建一个变量,并绑定到上下文中.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;select id=&quot;selectWithBind&quot; resultType=&quot;employee&quot;&gt;</span><br><span class="line">       &lt;bind name=&quot;var&quot; value=&quot;&apos;%&apos;+_parameter.getName()+&apos;%&apos;&quot;/&gt;</span><br><span class="line">       SELECT * FROM employee WHERE loginName LIKE  #&#123;var&#125;</span><br><span class="line">   &lt;/select&gt;</span><br></pre></td></tr></table></figure></p><p>使用_parameter可以获取你传入的javabean对象.然后调用getName()获取名字.生成sql语句<code>SELECT * FROM employee WHERE loginName LIKE ?</code> 查询参数为`Parameters: %a%(String)’,则可进行模糊查询.<br>自己也尝试了一下之间传参来进行模糊查询<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;select id=&quot;selectWithBind2&quot; resultType=&quot;employee&quot;&gt;</span><br><span class="line">        SELECT * FROM employee WHERE loginName like #&#123;name&#125;</span><br><span class="line">    &lt;/select&gt;</span><br></pre></td></tr></table></figure></p><p>这样在调用方法传参之前需要自己对模糊查询处理一下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String name=&quot;o&quot;;</span><br><span class="line">List&lt;Employee&gt;employeeList1=employeeDao.selectWithBind2(&apos;%&apos;+name+&apos;%&apos;);</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;动态SQL&quot;&gt;&lt;a href=&quot;#动态SQL&quot; class=&quot;headerlink&quot; title=&quot;动态SQL&quot;&gt;&lt;/a&gt;动态SQL&lt;/h1&gt;&lt;p&gt;创建一个数据表&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td 
      
    
    </summary>
    
      <category term="study" scheme="https://watermelon-lee.github.io/categories/study/"/>
    
    
      <category term="Mybatis" scheme="https://watermelon-lee.github.io/tags/Mybatis/"/>
    
  </entry>
  
  <entry>
    <title>Mybatis学习总结1</title>
    <link href="https://watermelon-lee.github.io/2018/06/05/Mybatis/"/>
    <id>https://watermelon-lee.github.io/2018/06/05/Mybatis/</id>
    <published>2018-06-05T12:32:11.000Z</published>
    <updated>2018-06-07T13:15:00.931Z</updated>
    
    <content type="html"><![CDATA[<p>最近在细学Mybatis,写一下总结,一边日后回顾.<br><a id="more"></a></p><h1 id="Mybatis关系映射"><a href="#Mybatis关系映射" class="headerlink" title="Mybatis关系映射"></a>Mybatis关系映射</h1><h2 id="一对一"><a href="#一对一" class="headerlink" title="一对一"></a>一对一</h2><p>一对一映射比如每个学生对应与一个学生卡,使用外键来关联.以学生与班级来示例.<br>创建两个表:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">CREATE TABLE card(</span><br><span class="line">  id INT PRIMARY KEY AUTO_INCREMENT,</span><br><span class="line">  code VARCHAR(19),</span><br><span class="line">  name VARCHAR(19)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">CREATE table student(</span><br><span class="line">  id INT PRIMARY KEY AUTO_INCREMENT,</span><br><span class="line">  name VARCHAR(10),</span><br><span class="line">  age int,</span><br><span class="line">  class_id int,</span><br><span class="line">  FOREIGN KEY (class_id) REFERENCES class(id)</span><br><span class="line">);</span><br></pre></td></tr></table></figure></p><p>然后创建两个实体类:<br>Card:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">package com.domain;</span><br><span class="line"></span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">public class Card &#123;</span><br><span class="line">    private int id;</span><br><span class="line">    private String code;</span><br><span class="line">    private String name;</span><br><span class="line"></span><br><span class="line">   </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        return &quot;Card&#123;&quot; +</span><br><span class="line">                &quot;id=&quot; + id +</span><br><span class="line">                &quot;, code=&apos;&quot; + code + &apos;\&apos;&apos; +</span><br><span class="line">                &quot;, name=&apos;&quot; + name + &apos;\&apos;&apos; +</span><br><span class="line">                &apos;&#125;&apos;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Card() &#123;</span><br><span class="line">        super();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Card(String code, String name) &#123;</span><br><span class="line">        this.code = code;</span><br><span class="line">        this.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int getId() &#123;</span><br><span class="line">        return id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setId(int id) &#123;</span><br><span class="line">        this.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getCode() &#123;</span><br><span class="line">        return code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setCode(String code) &#123;</span><br><span class="line">        this.code = code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getName() &#123;</span><br><span class="line">        return name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setName(String name) &#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Student:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">package com.domain;</span><br><span class="line"></span><br><span class="line">public class Student &#123;</span><br><span class="line">    private int id;</span><br><span class="line">    private String name;</span><br><span class="line">    private int age;</span><br><span class="line">    //测试一对一</span><br><span class="line">    private Card card;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        return &quot;Student&#123;&quot; +</span><br><span class="line">                &quot;id=&quot; + id +</span><br><span class="line">                &quot;, name=&apos;&quot; + name + &apos;\&apos;&apos; +</span><br><span class="line">                &quot;, age=&quot; + age +</span><br><span class="line">                &quot;, card=&quot; + card +</span><br><span class="line">                &apos;&#125;&apos;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Student() &#123;</span><br><span class="line">        super();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Student(String name, int age, Card card) &#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">        this.age = age;</span><br><span class="line">        this.card = card;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int getId() &#123;</span><br><span class="line">        return id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setId(int id) &#123;</span><br><span class="line">        this.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getName() &#123;</span><br><span class="line">        return name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setName(String name) &#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int getAge() &#123;</span><br><span class="line">        return age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setAge(int age) &#123;</span><br><span class="line">        this.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public card getCard() &#123;</span><br><span class="line">        return card;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setCard(Card card) &#123;</span><br><span class="line">        this.card = card;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在Student中定义了一个Card类,用来表示该学生的班级.<br>然后创建Mybatis配置文件:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE configuration</span><br><span class="line">        PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span><br><span class="line">        &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;</span><br><span class="line">&lt;!--通过这个配置文件，完成mybatis与数据库的连接  --&gt;</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">    &lt;!-- 注意此配置文件内的元素的  --&gt;</span><br><span class="line">    &lt;!-- 引入database.properties文件 --&gt;</span><br><span class="line">    &lt;properties resource=&quot;jdbc.properties&quot;/&gt;</span><br><span class="line">    &lt;!-- 从target中的classes文件夹中读取文件,不用classpath--&gt;</span><br><span class="line">    &lt;!--配置mybatis的log实现为LOG4J  --&gt;</span><br><span class="line">    &lt;!-- 配置后，后台就会有sql语句的输出 --&gt;</span><br><span class="line">    &lt;settings&gt;</span><br><span class="line">        &lt;setting name=&quot;logImpl&quot; value=&quot;LOG4J&quot;/&gt;</span><br><span class="line">    &lt;/settings&gt;</span><br><span class="line">    &lt;!-- 设置类的别名 --&gt;</span><br><span class="line">    &lt;typeAliases&gt;</span><br><span class="line">        &lt;!-- &lt;typeAlias alias=&quot;User&quot; type=&quot;com.wu.pojo.User&quot;/&gt; --&gt;</span><br><span class="line">        &lt;!-- 根据包取别名，把包下面的所有类都按类名来取别名 --&gt;</span><br><span class="line">        &lt;!-- 这用可以简化代码量 但是使用的是类名的小写 --&gt;</span><br><span class="line">        &lt;package name=&quot;com.domain&quot;/&gt;</span><br><span class="line">    &lt;/typeAliases&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;environments default=&quot;development&quot;&gt;</span><br><span class="line">        &lt;environment id=&quot;development&quot;&gt;</span><br><span class="line">            &lt;!-- 配置事务管理 ，采用JDBC管理事务--&gt;</span><br><span class="line">            &lt;transactionManager type=&quot;JDBC&quot;/&gt;</span><br><span class="line">            &lt;!-- POOLED是mybatis的 数据源 --&gt;</span><br><span class="line">            &lt;!-- JNDI是基于tomcat的数据源 --&gt;</span><br><span class="line">            &lt;dataSource type=&quot;POOLED&quot;&gt;</span><br><span class="line">                &lt;property name=&quot;driver&quot; value=&quot;$&#123;jdbc.driverClassName&#125;&quot;/&gt;</span><br><span class="line">                &lt;property name=&quot;url&quot; value=&quot;$&#123;jdbc.url&#125;&quot;/&gt;</span><br><span class="line">                &lt;property name=&quot;username&quot; value=&quot;$&#123;jdbc.username&#125;&quot;/&gt;</span><br><span class="line">                &lt;property name=&quot;password&quot; value=&quot;$&#123;jdbc.password&#125;&quot;/&gt;</span><br><span class="line">            &lt;/dataSource&gt;</span><br><span class="line">        &lt;/environment&gt;</span><br><span class="line">    &lt;/environments&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;!-- pojo的映射文件UserMapper引入到配入到配置文件中 --&gt;</span><br><span class="line">    &lt;mappers&gt;</span><br><span class="line">        &lt;!-- resource要写成路径 --&gt;</span><br><span class="line">        &lt;mapper resource=&quot;mapper/UserMapper.xml&quot;/&gt;</span><br><span class="line">        &lt;mapper resource=&quot;mapper/StudentMapper.xml&quot;/&gt;</span><br><span class="line">        &lt;mapper resource=&quot;mapper/CardMapper.xml&quot;/&gt;</span><br><span class="line">        &lt;!--&lt;package name=&quot;mapper&quot;/&gt;&amp;lt;!&amp;ndash; ???用处？？？ &amp;ndash;&amp;gt;--&gt;</span><br><span class="line">    &lt;/mappers&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure></p><p>在创建两个实体类对应的映射文件:<br>CardMapper:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span><br><span class="line">        &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;</span><br><span class="line">&lt;mapper namespace=&quot;com.mapper.CardDao&quot;&gt;</span><br><span class="line">    &lt;select id=&quot;select&quot; parameterType=&quot;int&quot; resultType=&quot;Card&quot;&gt;</span><br><span class="line">        SELECT * FROM card WHERE id = #&#123;id&#125;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure></p><p>StudentMapper:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span><br><span class="line">        &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;</span><br><span class="line">&lt;mapper namespace=&quot;com.mapper.StudentDao&quot;&gt;</span><br><span class="line">    &lt;!--定义用于映射的student的resultMap--&gt;</span><br><span class="line">   &lt;resultMap id=&quot;studentMap&quot; type=&quot;student&quot;&gt;</span><br><span class="line">       &lt;id property=&quot;id&quot; column=&quot;id&quot;/&gt;</span><br><span class="line">       &lt;result property=&quot;name&quot; column=&quot;name&quot;/&gt;</span><br><span class="line">       &lt;result property=&quot;age&quot; column=&quot;age&quot;/&gt;</span><br><span class="line">       &lt;!--定义一对一的映射关系--&gt;</span><br><span class="line">       &lt;association property=&quot;card&quot; column=&quot;card_id&quot;</span><br><span class="line">                    javaType=&quot;com.domain.Card&quot; select=&quot;com.mapper.CardDao.select&quot;/&gt;</span><br><span class="line">   &lt;/resultMap&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--&lt;select id=&quot;selectCard&quot; parameterType=&quot;int&quot; resultType=&quot;card&quot;&gt;--&gt;</span><br><span class="line">        &lt;!--SELECT * FROM card WHERE id = #&#123;id&#125;--&gt;</span><br><span class="line">    &lt;!--&lt;/select&gt;--&gt;</span><br><span class="line"></span><br><span class="line">    &lt;select id=&quot;select&quot; resultMap=&quot;studentMap&quot; parameterType=&quot;int&quot;&gt;</span><br><span class="line">        SELECT * FROM student WHERE id=#&#123;id&#125;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure></p><p>应为Student中包含了Card对象,所以执行select时候返回的不只是Student对象,所以需要自己定义一个resultMap来映射返回类型.<br>关联映射使用<association>标签,其中的属性如下:</association></p><ul><li>property:返回类型Student中的Card属性名,对应于实体类Student中的Card</li><li>column:对应数据库中的列名,映射到id上.</li><li>JavaType:属性的类型名称,即Student实体类中card对应的类,即com.domain.Card</li><li>select:执行的查询语句,将使用column对应的id作为参数来进行查询,将数据封装到property所代表的类型对象中.<br>使用Dao接口代理对象访问Mybatis,该对象关联了SqlSession对象,可以直接通过该对象操作数据库.对应映射文件中的namespace.Dao接口的类名需要与mapper映射文件中namespace中定义的名字一致,此外Dao接口中的方法名与参数也要与mapper映射文件中定义的SQL操作语句的id名与parameterTpe一致.<br>StudentDao:<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">package com.mapper;</span><br><span class="line"></span><br><span class="line">import com.domain.Student;</span><br><span class="line"></span><br><span class="line">public interface StudentDao &#123;</span><br><span class="line">    Student select(Integer id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>这样便完成了Student到Card的一对一映射.<br>测试:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">    </span><br><span class="line">    @Test</span><br><span class="line">    public void OneToOne() &#123;</span><br><span class="line">    private SqlSession sqlSession;</span><br><span class="line">        InputStream inputStream=this.getClass().getResourceAsStream(&quot;mybatis/Mybatis-config.xml&quot;);//从target中的classes文件夹中读取文件</span><br><span class="line"></span><br><span class="line">        //初始化mybatis,创建SqlsessionFactory实例</span><br><span class="line">        private SqlSessionFactory sqlSessionFactory=new SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line">        //创建Session实例</span><br><span class="line">        sqlSession = sqlSessionFactory.openSession();</span><br><span class="line">        //获得mapper接口的代理</span><br><span class="line">        StudentDao studentDao = sqlSession.getMapper(StudentDao.class);</span><br><span class="line">        CardDao cardDao=sqlSession.getMapper(CardDao.class);</span><br><span class="line">        Card card=cardDao.select(1);</span><br><span class="line">        System.out.println(card);</span><br><span class="line">        //直接调用接口查询</span><br><span class="line">        Student student=studentDao.select(1);</span><br><span class="line">        System.out.println(student);</span><br><span class="line">        sqlSession.commit();</span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="一对多"><a href="#一对多" class="headerlink" title="一对多"></a>一对多</h2><p>一个班级可以有许多学生,一个学生也只属于一个班级,则班级与学生就是一对多的关系.我们在数据库中使用主外键关联,外键应该在多的一方,也就是学生中,即多方维护关系.<br>创建学生student与班级clazz数据表,然后创建对应的实体类:<br>Clazz:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">package com.domain;</span><br><span class="line"></span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">public class Clazz &#123;</span><br><span class="line">    private int id;</span><br><span class="line">    private String code;</span><br><span class="line">    private String name;</span><br><span class="line"></span><br><span class="line">    //测试一对多</span><br><span class="line">    private List&lt;Student&gt; studentList;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public List&lt;Student&gt; getStudentList() &#123;</span><br><span class="line">        return studentList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setStudentList(List&lt;Student&gt; studentList) &#123;</span><br><span class="line">        this.studentList = studentList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        return &quot;Clazz&#123;&quot; +</span><br><span class="line">                &quot;id=&quot; + id +</span><br><span class="line">                &quot;, code=&apos;&quot; + code + &apos;\&apos;&apos; +</span><br><span class="line">                &quot;, name=&apos;&quot; + name + &apos;\&apos;&apos; +</span><br><span class="line">                &quot;, studentList=&quot; + studentList +</span><br><span class="line">                &apos;&#125;&apos;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public Clazz() &#123;</span><br><span class="line">        super();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Clazz(String code, String name) &#123;</span><br><span class="line">        this.code = code;</span><br><span class="line">        this.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int getId() &#123;</span><br><span class="line">        return id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setId(int id) &#123;</span><br><span class="line">        this.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getCode() &#123;</span><br><span class="line">        return code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setCode(String code) &#123;</span><br><span class="line">        this.code = code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getName() &#123;</span><br><span class="line">        return name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setName(String name) &#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Student:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">package com.domain;</span><br><span class="line"></span><br><span class="line">public class Student &#123;</span><br><span class="line">    private int id;</span><br><span class="line">    private String name;</span><br><span class="line">    private int age;</span><br><span class="line">    //测试一对一</span><br><span class="line">    private Clazz clazz;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        return &quot;Student&#123;&quot; +</span><br><span class="line">                &quot;id=&quot; + id +</span><br><span class="line">                &quot;, name=&apos;&quot; + name + &apos;\&apos;&apos; +</span><br><span class="line">                &quot;, age=&quot; + age +</span><br><span class="line">                &quot;, clazz=&quot; + clazz +</span><br><span class="line">                &apos;&#125;&apos;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Student() &#123;</span><br><span class="line">        super();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Student(String name, int age, Clazz clazz) &#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">        this.age = age;</span><br><span class="line">        this.clazz = clazz;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int getId() &#123;</span><br><span class="line">        return id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setId(int id) &#123;</span><br><span class="line">        this.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getName() &#123;</span><br><span class="line">        return name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setName(String name) &#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int getAge() &#123;</span><br><span class="line">        return age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setAge(int age) &#123;</span><br><span class="line">        this.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Clazz getClazz() &#123;</span><br><span class="line">        return clazz;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setClazz(Clazz clazz) &#123;</span><br><span class="line">        this.clazz = clazz;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>然后创建对应的映射文件,ClazzMapper:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span><br><span class="line">        &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;</span><br><span class="line">&lt;mapper namespace=&quot;com.mapper.ClazzDao&quot;&gt;</span><br><span class="line">    &lt;select id=&quot;select&quot; parameterType=&quot;int&quot; resultType=&quot;clazz&quot;&gt;</span><br><span class="line">        SELECT * FROM clazz WHERE id = #&#123;id&#125;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line"></span><br><span class="line">    &lt;resultMap id=&quot;clazzMap&quot; type=&quot;clazz&quot;&gt;</span><br><span class="line">        &lt;id property=&quot;id&quot; column=&quot;id&quot;/&gt;</span><br><span class="line">        &lt;result property=&quot;name&quot; column=&quot;name&quot;/&gt;</span><br><span class="line">        &lt;result property=&quot;code&quot; column=&quot;code&quot;/&gt;</span><br><span class="line">        &lt;!--映射多对一 使用懒加载--&gt;</span><br><span class="line">        &lt;collection property=&quot;studentList&quot; column=&quot;id&quot;</span><br><span class="line">                    javaType=&quot;ArrayList&quot; ofType=&quot;student&quot;</span><br><span class="line">                    select=&quot;selectStudentWithClazzId&quot; fetchType=&quot;lazy&quot;&gt;</span><br><span class="line">            &lt;id property=&quot;id&quot; column=&quot;id&quot;/&gt;</span><br><span class="line">            &lt;result property=&quot;name&quot; column=&quot;name&quot;/&gt;</span><br><span class="line">            &lt;result property=&quot;age&quot; column=&quot;age&quot;/&gt;</span><br><span class="line">        &lt;/collection&gt;</span><br><span class="line">    &lt;/resultMap&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--根据班级Id查询学生--&gt;</span><br><span class="line"></span><br><span class="line">    &lt;select id=&quot;selectStudentWithClazzId&quot; parameterType=&quot;int&quot; resultType=&quot;student&quot;&gt;</span><br><span class="line">        SELECT * FROM student WHERE clazz_id=#&#123;id&#125;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--查询所有班级信息--&gt;</span><br><span class="line">    &lt;select id=&quot;selectAll&quot; resultMap=&quot;clazzMap&quot;&gt;</span><br><span class="line">        SELECT * FROM clazz</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line"></span><br><span class="line">    &lt;select id=&quot;selectClazzById&quot; parameterType=&quot;int&quot; resultMap=&quot;clazzMap&quot;&gt;</span><br><span class="line">        SELECT * FROM clazz WHERE id=#&#123;id&#125;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure></p><p>使用<collection>元素映射一对多的关联关系,其中select表示使用Column属性的id作为查询参数进行selectStudentWithClazzId查询.查询对象将封装到property对应的studentList对象中.<br>fetchType表示加载策略,有eager与lazy(急加载与懒加载).使用懒加载是,查询班级时候,不会立即查询其中所有学生,而是需要时在进行加载.fetch机制更多的是为了考虑性能,一般情况下,一对多集合对象,使用懒加载.<br>需要在Mybatis-config中配置:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;setting name=&quot;lazyLoadingEnabled&quot; value=&quot;true&quot;/&gt;</span><br><span class="line">&lt;setting name=&quot;aggressiveLazyLoading&quot; value=&quot;false&quot;/&gt;</span><br></pre></td></tr></table></figure></collection></p><p>lazyLoadingEnabled表示延迟加载的全局开关,开启时,所有对象都会懒加载.<br>aggressiveLazyLoading启用时,会是懒加载的元素懒加载,按需加载.</p><p>StudentMapper:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span><br><span class="line">        &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;</span><br><span class="line">&lt;mapper namespace=&quot;com.mapper.StudentDao&quot;&gt;</span><br><span class="line">    &lt;!--定义用于映射的student的resultMap--&gt;</span><br><span class="line">   &lt;resultMap id=&quot;studentMap&quot; type=&quot;student&quot;&gt;</span><br><span class="line">       &lt;id property=&quot;id&quot; column=&quot;id&quot;/&gt;</span><br><span class="line">       &lt;result property=&quot;name&quot; column=&quot;name&quot;/&gt;</span><br><span class="line">       &lt;result property=&quot;age&quot; column=&quot;age&quot;/&gt;</span><br><span class="line">       &lt;!--定义一对一的映射关系--&gt;</span><br><span class="line">       &lt;association property=&quot;clazz&quot; column=&quot;clazz_id&quot;</span><br><span class="line">                    javaType=&quot;com.domain.Clazz&quot; select=&quot;com.mapper.ClazzDao.select&quot;/&gt;</span><br><span class="line">   &lt;/resultMap&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--&lt;select id=&quot;selectClazz&quot; parameterType=&quot;int&quot; resultType=&quot;clazz&quot;&gt;--&gt;</span><br><span class="line">        &lt;!--SELECT * FROM clazz WHERE id = #&#123;id&#125;--&gt;</span><br><span class="line">    &lt;!--&lt;/select&gt;--&gt;</span><br><span class="line"></span><br><span class="line">    &lt;select id=&quot;select&quot; resultMap=&quot;studentMap&quot; parameterType=&quot;int&quot;&gt;</span><br><span class="line">        SELECT * FROM student WHERE id=#&#123;id&#125;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure></p><p>然后配置mapper对应的Dao接口,与前面一对一类似,然后进行测试即可.</p><h2 id="多对多"><a href="#多对多" class="headerlink" title="多对多"></a>多对多</h2><p>多对多在开发商城时十分常见,一个用户下订单订购商品,一个用户可以对应多个订单,一个订单对应一个用户,这是一对多.一个商品可以对应多个订单,一个订单也可对应多个商品.这是多对多.对于数据库的多对多关系,我们一般需要建立一个中间表来维护,中间表中的订单id作为外检参照订单表的id,中间表的商品id作为外检参照商品表的id.<br>首先创建数据表:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">#创建用户表</span><br><span class="line">CREATE TABLE users(</span><br><span class="line">  id INT(8)  PRIMARY KEY AUTO_INCREMENT,</span><br><span class="line">  username VARCHAR(10)</span><br><span class="line">);</span><br><span class="line">#创建商品表</span><br><span class="line">CREATE TABLE goods(</span><br><span class="line">  id INT(8) PRIMARY KEY AUTO_INCREMENT,</span><br><span class="line">  name VARCHAR(10),</span><br><span class="line">  price DOUBLE</span><br><span class="line">);</span><br><span class="line">#创建订单表</span><br><span class="line">CREATE TABLE orders(</span><br><span class="line">  id INT(8) PRIMARY KEY AUTO_INCREMENT,</span><br><span class="line">  code VARCHAR(30),</span><br><span class="line">  user_id INT(8),</span><br><span class="line">  FOREIGN KEY (user_id) REFERENCES users(id)</span><br><span class="line">);</span><br><span class="line">#创建中间表,表示商品与订单多对多</span><br><span class="line">CREATE TABLE goods_order(</span><br><span class="line">  order_id INT,</span><br><span class="line">  goods_id INT,</span><br><span class="line">  amount INT,</span><br><span class="line">  PRIMARY KEY (order_id,goods_id),</span><br><span class="line">  FOREIGN KEY (order_id) REFERENCES orders(id),</span><br><span class="line">  FOREIGN KEY (goods_id) REFERENCES goods(id)</span><br><span class="line">);</span><br><span class="line">INSERT INTO users(username) VALUE(&quot;wade&quot;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">INSERT INTO goods(name,price) VALUES (&quot;basketball&quot;,246);</span><br><span class="line">INSERT INTO goods(name,price) VALUES (&quot;shoes&quot;,965);</span><br><span class="line">INSERT INTO goods(name,price) VALUES (&quot;cloth&quot;,426);</span><br><span class="line"></span><br><span class="line">INSERT INTO  orders(code, user_id) VALUES (&quot;001&quot;,1);</span><br><span class="line">INSERT INTO  orders(code, user_id) VALUES (&quot;002&quot;,1);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">INSERT INTO goods_order VALUES (1,1,2);</span><br><span class="line">INSERT INTO goods_order VALUES (1,2,4);</span><br><span class="line">INSERT INTO goods_order VALUES (1,3,2);</span><br><span class="line">INSERT INTO goods_order VALUES (2,2,2);</span><br><span class="line">INSERT INTO goods_order VALUES (2,1,6);</span><br></pre></td></tr></table></figure></p><p>首先创建实体类:<br>Users:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">package com.domain;</span><br><span class="line"></span><br><span class="line">import java.io.Serializable;</span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">public class Users implements Serializable &#123;</span><br><span class="line">    private int id;</span><br><span class="line">    private String userName;</span><br><span class="line">    //用户与订单是一对多</span><br><span class="line">    private List&lt;Orders&gt;ordersList;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public List&lt;Orders&gt; getOrdersList() &#123;</span><br><span class="line">        return ordersList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setOrdersList(List&lt;Orders&gt; ordersList) &#123;</span><br><span class="line">        this.ordersList = ordersList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int getId() &#123;</span><br><span class="line">        return id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setId(int id) &#123;</span><br><span class="line">        this.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getUserName() &#123;</span><br><span class="line">        return userName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setUserName(String userName) &#123;</span><br><span class="line">        this.userName = userName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        return &quot;Users&#123;&quot; +</span><br><span class="line">                &quot;id=&quot; + id +</span><br><span class="line">                &quot;, userName=&apos;&quot; + userName + &apos;\&apos;&apos; +</span><br><span class="line">                &quot;, ordersList=&quot; + ordersList +</span><br><span class="line">                &apos;&#125;&apos;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Orders:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">package com.domain;</span><br><span class="line"></span><br><span class="line">import java.io.Serializable;</span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">public class Orders implements Serializable &#123;</span><br><span class="line">    private int id;</span><br><span class="line">    private String code;</span><br><span class="line">    //订单与用户是多对一</span><br><span class="line">    private Users users;</span><br><span class="line">    //订单与商品是多对多</span><br><span class="line">    private List&lt;Goods&gt;goodsList;</span><br><span class="line"></span><br><span class="line">    public int getId() &#123;</span><br><span class="line">        return id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setId(int id) &#123;</span><br><span class="line">        this.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getCode() &#123;</span><br><span class="line">        return code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setCode(String code) &#123;</span><br><span class="line">        this.code = code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Users getUsers() &#123;</span><br><span class="line">        return users;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setUsers(Users users) &#123;</span><br><span class="line">        this.users = users;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public List&lt;Goods&gt; getGoodsList() &#123;</span><br><span class="line">        return goodsList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setGoodsList(List&lt;Goods&gt; goodsList) &#123;</span><br><span class="line">        this.goodsList = goodsList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        return &quot;Orders&#123;&quot; +</span><br><span class="line">                &quot;id=&quot; + id +</span><br><span class="line">                &quot;, code=&apos;&quot; + code + &apos;\&apos;&apos; +</span><br><span class="line">                &quot;, users=&quot; + users +</span><br><span class="line">                &quot;, goodsList=&quot; + goodsList +</span><br><span class="line">                &apos;&#125;&apos;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Goods:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">package com.domain;</span><br><span class="line"></span><br><span class="line">import java.io.Serializable;</span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">public class Orders implements Serializable &#123;</span><br><span class="line">    private int id;</span><br><span class="line">    private String code;</span><br><span class="line">    //订单与用户是多对一</span><br><span class="line">    private Users users;</span><br><span class="line">    //订单与商品是多对多</span><br><span class="line">    private List&lt;Goods&gt;goodsList;</span><br><span class="line"></span><br><span class="line">    public int getId() &#123;</span><br><span class="line">        return id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setId(int id) &#123;</span><br><span class="line">        this.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getCode() &#123;</span><br><span class="line">        return code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setCode(String code) &#123;</span><br><span class="line">        this.code = code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Users getUsers() &#123;</span><br><span class="line">        return users;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setUsers(Users users) &#123;</span><br><span class="line">        this.users = users;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public List&lt;Goods&gt; getGoodsList() &#123;</span><br><span class="line">        return goodsList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setGoodsList(List&lt;Goods&gt; goodsList) &#123;</span><br><span class="line">        this.goodsList = goodsList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        return &quot;Orders&#123;&quot; +</span><br><span class="line">                &quot;id=&quot; + id +</span><br><span class="line">                &quot;, code=&apos;&quot; + code + &apos;\&apos;&apos; +</span><br><span class="line">                &quot;, users=&quot; + users +</span><br><span class="line">                &quot;, goodsList=&quot; + goodsList +</span><br><span class="line">                &apos;&#125;&apos;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>然后定义映射文件:<br>UsersMapper:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span><br><span class="line">        &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;</span><br><span class="line">&lt;mapper namespace=&quot;com.mapper.UsersDao&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;resultMap id=&quot;usersMap&quot; type=&quot;users&quot;&gt;</span><br><span class="line">        &lt;id property=&quot;id&quot; column=&quot;id&quot;/&gt;</span><br><span class="line">        &lt;result property=&quot;userName&quot; column=&quot;username&quot;/&gt;</span><br><span class="line">        &lt;collection property=&quot;ordersList&quot; ofType=&quot;orders&quot; column=&quot;id&quot;</span><br><span class="line">                    javaType=&quot;ArrayList&quot; fetchType=&quot;lazy&quot; select=&quot;com.mapper.OrdersDao.selectOrdersByUserId&quot;&gt;</span><br><span class="line">            &lt;id property=&quot;id&quot; column=&quot;id&quot;/&gt;</span><br><span class="line">            &lt;result property=&quot;code&quot; column=&quot;code&quot;/&gt;</span><br><span class="line">        &lt;/collection&gt;</span><br><span class="line">    &lt;/resultMap&gt;</span><br><span class="line"></span><br><span class="line">    &lt;select id=&quot;selectUsersByUserId&quot; resultMap=&quot;usersMap&quot; parameterType=&quot;int&quot;&gt;</span><br><span class="line">        SELECT * FROM users WHERE id=#&#123;id&#125;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure></p><p>OrdersMapper:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span><br><span class="line">        &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;</span><br><span class="line">&lt;mapper namespace=&quot;com.mapper.OrdersDao&quot;&gt;</span><br><span class="line">    &lt;resultMap id=&quot;ordersMap&quot; type=&quot;orders&quot; &gt;</span><br><span class="line">        &lt;id property=&quot;id&quot; column=&quot;id&quot;/&gt;</span><br><span class="line">        &lt;result property=&quot;code&quot; column=&quot;code&quot;/&gt;</span><br><span class="line">        &lt;!--多对一映射 orders对应的users--&gt;</span><br><span class="line">        &lt;association property=&quot;users&quot; column=&quot;user_id&quot; javaType=&quot;users&quot; select=&quot;com.mapper.UsersDao.selectUsersByUserId&quot;&gt;</span><br><span class="line">            &lt;id property=&quot;id&quot; column=&quot;id&quot;/&gt;</span><br><span class="line">            &lt;result property=&quot;userName&quot; column=&quot;username&quot;/&gt;</span><br><span class="line">        &lt;/association&gt;</span><br><span class="line">        &lt;!--多对多映射--&gt;</span><br><span class="line">        &lt;collection property=&quot;goodsList&quot; column=&quot;id&quot; javaType=&quot;ArrayList&quot;</span><br><span class="line">                    ofType=&quot;goods&quot; fetchType=&quot;lazy&quot; select=&quot;com.mapper.GoodsDao.selectGoodsByOrderId&quot;&gt;</span><br><span class="line">            &lt;id property=&quot;id&quot; column=&quot;id&quot;/&gt;</span><br><span class="line">            &lt;result property=&quot;name&quot; column=&quot;name&quot;/&gt;</span><br><span class="line">            &lt;result property=&quot;price&quot; column=&quot;price&quot;/&gt;</span><br><span class="line">        &lt;/collection&gt;</span><br><span class="line">    &lt;/resultMap&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--查询订单,有相同的列名需要用别名来区分,如users里面查询出来的id与orders里的id列名重复--&gt;</span><br><span class="line">    &lt;select id=&quot;selectOrdersByOrderId&quot; resultMap=&quot;ordersMap&quot; parameterType=&quot;int&quot;&gt;</span><br><span class="line">        SELECT u.*,o.id,code,user_id FROM users u,orders o WHERE u.id=user_id AND  o.id=#&#123;id&#125;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;!--根据用户id查询订单--&gt;</span><br><span class="line">    &lt;select id=&quot;selectOrdersByUserId&quot; parameterType=&quot;int&quot; resultType=&quot;orders&quot;&gt;</span><br><span class="line">        SELECT * FROM orders WHERE user_id=#&#123;id&#125;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line"></span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure></p><p>GoddsMapper:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span><br><span class="line">        &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;</span><br><span class="line">&lt;mapper namespace=&quot;com.mapper.GoodsDao&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--根据orderId将goods都查出--&gt;</span><br><span class="line">    &lt;select id=&quot;selectGoodsByOrderId&quot; parameterType=&quot;int&quot; resultType=&quot;goods&quot;&gt;</span><br><span class="line">          SELECT * FROM goods WHERE id IN (SELECT goods_id FROM goods_order WHERE order_id=#&#123;id&#125;)</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line"></span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure></p><p>然后创建映射Dao接口即可进行测试.</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><h2 id="ORM"><a href="#ORM" class="headerlink" title="ORM"></a>ORM</h2><p>ORM是Object/Relation Mapping 即对象/关系数据库映射.ORM完成了面向对象的编程语言到面向关系的数据库映射.他将关系数据库包装成为一种对象模型.<br>使用ORM框架之后,应用程序不需要直接访问底层数据库,而是以面向对象的方式操纵持久话对象,而ORM框架将这些面向对象的操作转换为底层的SQL操作.<br>ORM有一下基本映射关系:</p><ul><li>数据表映射类</li><li>数据表的行映射实例</li><li>数据表的lies映射实例对象的属性</li></ul><h2 id="Mybatis"><a href="#Mybatis" class="headerlink" title="Mybatis"></a>Mybatis</h2><ul><li>Mybatis的PO十分简单,与普通的JavaBean没有区别,所以Mybatis是一种低入侵式设计.</li><li>SqlsessionFactory是Mybatis的关键对象,他是单个数据库映射关系经过编译之后的内存镜像.每个Mybatis的应用程序以一个SqlsessionFactory对象实例为核心.并且SqlsessionFactory是线程安全的,一旦被创建,应该在整个应用程序执行期间都存在.在应用程序运行期间不要多次创建,应当使用单例模式.如果想连接两个数据库,就需要分别创建两个SqlSessionFactory实例.SqlsessionFactory是创建Sqlsession的工厂.使用SqlsessionFactory.openSession()来创建.</li><li>SqlSession是Mybatis执行持久化操作的对象.他是应用程序与持久层之间执行交互操作的一个单线程对象.SqlSession对象完全包含了以数据库为北京的所有执行SQL操作方法,底层封装了JDBC连接,可以用SqlSession对象直接执行以映射的SQL语句.每个线程都应该有自己的SqlSession实例.SqlSession实例不可共享,非线程安全,不可以将SqlSession放在一个类的静态字段与实例字段中.使用完SqlSession需要关闭.</li></ul><p>与一对一是,在数据库中可以引入外键作为关联,一般是多方维护关系,即在多方中引入外检,然后在实体类中属性包含该关联类.比如Users与Orders是一对多关系,则在表Orders中有User_id属性,并且在实体类Orders中有Users属性,而Users中则包含List<orders>orderList.而多对多关系则引入联表,用于查询两者对应关系,如goods_orders,并在两者实体类中包含对应属性.  </orders></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在细学Mybatis,写一下总结,一边日后回顾.&lt;br&gt;
    
    </summary>
    
      <category term="study" scheme="https://watermelon-lee.github.io/categories/study/"/>
    
    
      <category term="Mybatis" scheme="https://watermelon-lee.github.io/tags/Mybatis/"/>
    
  </entry>
  
  <entry>
    <title>Spring-Maven</title>
    <link href="https://watermelon-lee.github.io/2018/05/30/Spring-Maven/"/>
    <id>https://watermelon-lee.github.io/2018/05/30/Spring-Maven/</id>
    <published>2018-05-30T14:26:21.000Z</published>
    <updated>2018-05-30T16:03:25.848Z</updated>
    
    <content type="html"><![CDATA[<p>自己对于Maven依赖一直有些迷糊,每次都是之间复制配置文件,还是需要有所了解,慢慢做一个总结<br><a id="more"></a></p><h1 id="Spring必要依赖"><a href="#Spring必要依赖" class="headerlink" title="Spring必要依赖"></a>Spring必要依赖</h1><p>总体上来说必须要有的一共是7个依赖:</p><ul><li>Spring核心依赖:spring-core,spring-beans,spring-context</li><li>SpringDao依赖:spring-jdbc,spring-tx</li><li>SPring web依赖:spring-web,spring-webmvc</li><li>Spring test依赖:spring-test</li></ul><h2 id="常见依赖的具体功能"><a href="#常见依赖的具体功能" class="headerlink" title="常见依赖的具体功能"></a>常见依赖的具体功能</h2><ul><li>spring-core:包含Spring框架基本核心工具类型.Spring其他的组件都需要使用这个包里面的类.外部依赖commons logging(Log4J)</li><li>spring-beans:所有应用都要用到,包含配置文件,创建和管理bean以及进行Inversion of Control/Dependency Injection(IOC/DI)相关操作的所有类.外部依赖spring-core</li><li>spring-aop:对使用Spring AOP特性是所需要的所有类进行支持.基于AOP的Spring特性如声明事务管理也包含在其中.外部依赖spring-core.soring-beans.</li><li>spring-context:为Spring核心提供了大量的扩展.可以找到Spring ApplicationContexttext所需的所有类,JDNI(Java Naming and Directory Interface)所需全部类.instrumentation组件以及校验Validation方面相关的类.</li><li>spring-dao:这个jar 文件包含Spring DAO、Spring Transaction 进行数据访问的所有类.为了使用声明型事务支持，还需在自己的应用里包含spring-aop.jar.外部依赖spring-core，spring-aop， spring-context.</li><li>spring-jdbc:这个jar 文件包含对Spring 对JDBC 数据访问进行封装的所有类.外部依赖spring-beans，spring-dao</li><li>spring-context-support:包含支持缓存Cache（ehcache）、JCA、JMX、 邮件服务（Java Mail、COS Mail）、任务计划Scheduling（Timer、Quartz）方面的类.以前的版本中应该是这个：spring-support.jar这个jar 文件包含支持UI模版（Velocity，FreeMarker，JasperReports），邮件服务，脚本服务(JRuby)，缓存Cache（EHCache），任务计划Scheduling（uartz）方面的类.</li><li>spring-web:这个jar 文件包含Web 应用开发时，用到Spring 框架时所需的核心类，包括自动载入Web Application Context 特性的类、Struts 与JSF 集成类、文件上传的支持类、Filter 类和大量工具辅助类.外部依赖spring-context, Servlet API.</li><li>spring-webmvc:这个jar 文件包含Spring MVC 框架相关的所有类.包括框架的Servlets，Web MVC框架，控制器和视图支持.当然，如果你的应用使用了独立的MVC 框架，则无需这个JAR 文件里的任何类.外部依赖spring-web.spring-support.</li><li>spring-orm:包含Spring对DAO特性集进行了扩展，使其支持iBATIS、JDO、OJB、TopLink，因为Hibernate已经独立成包了，现在不包含在这个包里了.这个jar文件里大部分的类都要依赖spring-dao.jar里的类，用这个包时你需要同时包含spring-dao.jar包.</li><li>spring-oxm:Spring 对Object/XMl的映射支持,可以让Java与XML之间来回切换.</li><li>spring-tx:以前是在这里org.springframework.transaction为JDBC、Hibernate、JDO、JPA、Beans等提供的一致的声明式和编程式事务管理支持.</li></ul><!-- Spring依赖 --><pre><code>&lt;!-- 1.Spring核心依赖 --&gt;&lt;dependency&gt;    &lt;groupId&gt;org.springframework&lt;/groupId&gt;    &lt;artifactId&gt;spring-core&lt;/artifactId&gt;    &lt;version&gt;4.3.7.RELEASE&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt;    &lt;groupId&gt;org.springframework&lt;/groupId&gt;    &lt;artifactId&gt;spring-beans&lt;/artifactId&gt;    &lt;version&gt;4.3.7.RELEASE&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt;    &lt;groupId&gt;org.springframework&lt;/groupId&gt;    &lt;artifactId&gt;spring-context&lt;/artifactId&gt;    &lt;version&gt;4.3.7.RELEASE&lt;/version&gt;&lt;/dependency&gt;</code></pre><!-- 2.Spring dao依赖 --><!-- spring-jdbc包括了一些如jdbcTemplate的工具类 --><pre><code>&lt;dependency&gt;    &lt;groupId&gt;org.springframework&lt;/groupId&gt;    &lt;artifactId&gt;spring-jdbc&lt;/artifactId&gt;    &lt;version&gt;4.3.7.RELEASE&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt;    &lt;groupId&gt;org.springframework&lt;/groupId&gt;    &lt;artifactId&gt;spring-tx&lt;/artifactId&gt;    &lt;version&gt;4.3.7.RELEASE&lt;/version&gt;&lt;/dependency&gt;&lt;!-- 3.Spring web依赖 --&gt;&lt;dependency&gt;    &lt;groupId&gt;org.springframework&lt;/groupId&gt;    &lt;artifactId&gt;spring-web&lt;/artifactId&gt;    &lt;version&gt;4.3.7.RELEASE&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt;    &lt;groupId&gt;org.springframework&lt;/groupId&gt;    &lt;artifactId&gt;spring-webmvc&lt;/artifactId&gt;    &lt;version&gt;4.3.7.RELEASE&lt;/version&gt;&lt;/dependency&gt;&lt;!-- 4.Spring test依赖：方便做单元测试和集成测试 --&gt;&lt;dependency&gt;    &lt;groupId&gt;org.springframework&lt;/groupId&gt;    &lt;artifactId&gt;spring-test&lt;/artifactId&gt;    &lt;version&gt;4.3.7.RELEASE&lt;/version&gt;</code></pre><p>　　<br><code>`</code></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;自己对于Maven依赖一直有些迷糊,每次都是之间复制配置文件,还是需要有所了解,慢慢做一个总结&lt;br&gt;
    
    </summary>
    
      <category term="study" scheme="https://watermelon-lee.github.io/categories/study/"/>
    
    
      <category term="Maven" scheme="https://watermelon-lee.github.io/tags/Maven/"/>
    
  </entry>
  
  <entry>
    <title>SpringMVC-Summary</title>
    <link href="https://watermelon-lee.github.io/2018/05/30/SpringMVC-Summary/"/>
    <id>https://watermelon-lee.github.io/2018/05/30/SpringMVC-Summary/</id>
    <published>2018-05-30T14:15:58.000Z</published>
    <updated>2018-06-03T01:58:00.260Z</updated>
    
    <content type="html"><![CDATA[<p>对自己所学的SpringMVC做一个总结<br><a id="more"></a></p><h1 id="web-xml配置"><a href="#web-xml配置" class="headerlink" title="web.xml配置"></a>web.xml配置</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># @Controller</span><br><span class="line">@Controller用来标记一个类，使用其标记的对象就是一个SpringMVC Controller对象，即一个控制类。Spring使用扫描机制查找应用程序中所有基于注解的控制类。分发处理器会扫描使用了该注解的类的方法，查看是否使用了@RequestMapping注解，而@RequestMapping才是真正的处理请求的处理器。为了保证使Spring能找到控制器，需要完成两节事情：</span><br><span class="line">* 在SpringMVC配置头文件引入Spring-context。</span><br><span class="line">* 使用&lt;context:component-scan base-package=“com.web”/&gt;元素，扫描指定的包，以便注册@Controller，@Service，@Repository，@Component等注解类成为Spring的Bean。</span><br><span class="line"># @RequestMapping&lt;br&gt;@RequestMapping用于注释一个类或者方法处理请求动作。常用属性有：</span><br><span class="line">* value：该属性将URL映射到具体的方法上。如`@RequestMapping（value=“/index”)public ModelAndView index()`.</span><br><span class="line">* method：制定该方法处理哪些HTTP请求方式`@RequestMapping（value=“/index”method=&quot;RequestMethod.GET&quot;)public ModelAndView index()`.</span><br><span class="line">* consumes:该属性处理请求的提交内容类型（Content-Type）。`@RequestMapping（value=“/index”method=&quot;RequestMethod.GET&quot; conmuses=“application/json”)public ModelAndView index()`.该方法表示处理request Content-Type为application/json类型的请求。</span><br><span class="line">* params：指定request中必须包含某些参数，才让该方法处理。`@RequestMapping（value=“/index”method=&quot;RequestMethod.GET&quot; conmuses=“application/json” params=“myParam=myValue”)public ModelAndView index()`。方法只处理含有名为“myParam”，值为“myValue”的请求。</span><br><span class="line"># 参数绑定注解&lt;br&gt;## @RequestParam注解</span><br><span class="line">可指定属性：</span><br><span class="line">* name：指定请求头绑定属性的名称</span><br><span class="line">* value：name属性名的别称&lt;br&gt;* required（true，false）：指定参数是否必须</span><br><span class="line">* defaultValue：如果没有传递参数使用的默认值,例如</span><br><span class="line">```@RequestMapping(value=&quot;/login&quot;)</span><br><span class="line">    public ModelAndView login(@RequestParam(&quot;userName&quot;)String userName,@RequestParam(value=&quot;birthday&quot;,required=&quot;false&quot;)Date birthday)&#123;</span><br><span class="line">        ......</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="PathVariable"><a href="#PathVariable" class="headerlink" title="@PathVariable"></a>@PathVariable</h2><p>使用该注解可以方便的获得URL中间的动态参数。@PathVariable只有一个属性value，表示绑定参数的名称。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">    public ModelAndView list(@PathVariable(&quot;userId)Integer userId)&#123;</span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="SessionAttributes"><a href="#SessionAttributes" class="headerlink" title="@SessionAttributes"></a>@SessionAttributes</h2><p>将需要的对象转存到HttpSession对象中。在控制器类上标注。</p><h2 id="ModelAttribute"><a href="#ModelAttribute" class="headerlink" title="@ModelAttribute"></a>@ModelAttribute</h2><p>如果希望将方法入参对象添加到模型当中，只需在入参前添加@ModelAttribute属性。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@RequestMapping(&quot;/login&quot;)</span><br><span class="line">public ModelAndView login(@ModelAttribute（“user”） User user)</span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>则SpringMVC以user为键，将User对象放到模型当中，在对视图渲染前。SpringMVC还会将模型中的数据转储到视图的上下文中，并且暴露给视图。<br>此外，还可以在方法定义中使用。SpringMVC在先处理请求时，会先逐个调用标注了@ModelAttribute的方法。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">@ModelAttribute(&quot;user&quot;)</span><br><span class="line">public User getUser() &#123;</span><br><span class="line">User user = new User();</span><br><span class="line">    user.setUserId(&quot;1001&quot;);</span><br><span class="line">        user.setUserName(&quot;&lt;&gt;&quot;);</span><br><span class="line">       return user;</span><br><span class="line">    &#125;</span><br><span class="line">    @RequestMapping(value = &quot;/handle62&quot;)</span><br><span class="line">    public String handle62(@ModelAttribute(&quot;user&quot;) User user) &#123;</span><br><span class="line">user.setUserName(&quot;tom&quot;);</span><br><span class="line">return &quot;/user/showUser&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在访问该控制器的任何方法之前，SpringMVC先执行标注了@ModelAttribute的方法，如getUser（），将返回值以user为键添加到模型中间。<br>然后执行handle62方法时候，模型数据会赋值给user入参，然后根据Http请求消息中的参数进一步填充覆盖user。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;对自己所学的SpringMVC做一个总结&lt;br&gt;
    
    </summary>
    
      <category term="study" scheme="https://watermelon-lee.github.io/categories/study/"/>
    
    
      <category term="Spring" scheme="https://watermelon-lee.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Project1</title>
    <link href="https://watermelon-lee.github.io/2018/05/30/Project1/"/>
    <id>https://watermelon-lee.github.io/2018/05/30/Project1/</id>
    <published>2018-05-30T05:25:47.000Z</published>
    <updated>2018-05-30T05:27:37.553Z</updated>
    
    <content type="html"><![CDATA[<p>自己写的一个社区/论坛的项目<a href="https://github.com/watermelon-lee/-" target="_blank" rel="noopener">ThisIsUsCommunity</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;自己写的一个社区/论坛的项目&lt;a href=&quot;https://github.com/watermelon-lee/-&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;ThisIsUsCommunity&lt;/a&gt;&lt;/p&gt;

      
    
    </summary>
    
      <category term="study" scheme="https://watermelon-lee.github.io/categories/study/"/>
    
    
      <category term="Spring" scheme="https://watermelon-lee.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>我的API文档</title>
    <link href="https://watermelon-lee.github.io/2018/05/20/JavaWebAPI/"/>
    <id>https://watermelon-lee.github.io/2018/05/20/JavaWebAPI/</id>
    <published>2018-05-20T01:24:19.000Z</published>
    <updated>2018-05-27T12:14:46.498Z</updated>
    
    <content type="html"><![CDATA[<p>把自己在编程中遇到的一些不会的API都记录下来<br><a id="more"></a></p><h1 id="Assert-断言"><a href="#Assert-断言" class="headerlink" title="Assert(断言)"></a>Assert(断言)</h1><p>属于org.springframework.util.Assert.是方法参数校验工具类.常用方法有:  </p><ul><li>notNull(Object object)<br>当 object 不为 null 时抛出异常，notNull(Object object, String message)方法允许您通过 message 定制异常信息。和 notNull() 方法断言规则相反的方法是 isNull(Object object)/isNull(Object object, String message)，它要求入参一定是 null；  </li><li>isTrue(boolean expression) / isTrue(boolean expression, String message)<br>当 expression 不为 true 抛出异常.  </li><li>notEmpty(Collection collection) / notEmpty(Collection collection, String message)<br>当集合未包含元素时抛出异常。<br>notEmpty(Map map) / notEmpty(Map map, String message) 和 notEmpty(Object[] array, String message) / notEmpty(Object[] array, String message) 分别对 Map 和 Object[] 类型的入参进行判断；  </li><li>hasLength(String text) / hasLength(String text, String message)  当 text 为 null 或长度为 0 时抛出异常；  </li><li>hasText(String text) / hasText(String text, String message)  text 不能为 null 且必须至少包含一个非空格的字符，否则抛出异常；  </li><li>isInstanceOf(Class clazz, Object obj) / isInstanceOf(Class type, Object obj, String message)  如果 obj 不能被正确造型为 clazz 指定的类将抛出异常；  </li><li>isAssignable(Class superType, Class subType) / isAssignable(Class superType, Class subType, String message)  subType 必须可以按类型匹配于 superType，否则将抛出异常；  <h1 id="String"><a href="#String" class="headerlink" title="String"></a>String</h1></li><li>int indexOf(String str):返回指定子字符串在此字符串第一次出现的索引.</li><li>String toLowerCase():使用默认语言环境下的规则将此String中的所有字符转化为小写.</li><li>String subString(int beginIndex):返回一个行的字符串,他是该字符串的子串</li><li>equalsIgnoreCase（String s）：将此String与另一个String s比较，不考虑大小写<h1 id="Pattern"><a href="#Pattern" class="headerlink" title="Pattern"></a>Pattern</h1>正则表达式的编译表示形式。<br>指定为字符串的正则表达式必须首先被编译为此类的实例。然后，可将得到的模式用于创建 Matcher 对象，依照正则表达式，该对象可以与任意字符序列匹配。执行匹配所涉及的所有状态都驻留在匹配器中，所以多个匹配器可以共享同一模式。<br>因此，典型的调用顺序是<br>   Pattern p = Pattern.compile(“a<em>b”);<br>   Matcher m = p.matcher(“aaaaab”);<br>   boolean b = m.matches();<br>在仅使用一次正则表达式时，可以方便地通过此类定义 matches 方法。此方法编译表达式并在单个调用中将输入序列与其匹配。语句boolean b = Pattern.matches(“a</em>b”, “aaaaab”);等效于上面的三个语句，尽管对于重复的匹配而言它效率不高，因为它不允许重用已编译的模式。<br>此类的实例是不可变的，可供多个并发线程安全使用。Matcher 类的实例用于此目的则不安全。  <h2 id="正则表达式摘要"><a href="#正则表达式摘要" class="headerlink" title="正则表达式摘要"></a>正则表达式摘要</h2></li><li>\     反斜线字符</li><li>.     任何字符（与行结束符可能匹配也可能不匹配）</li><li>\d     数字：[0-9]</li><li>\D     非数字： [^0-9]</li><li>\s     空白字符：[ \t\n\x0B\f\r]</li><li>\S     非空白字符：[^\s]</li><li>\w     单词字符：[a-zA-Z_0-9]</li><li>\W     非单词字符：[^\w]<h2 id="常见方法"><a href="#常见方法" class="headerlink" title="常见方法"></a>常见方法</h2></li><li>static Pattern compile(String regex):将给定的正则表达式编译到模式中。</li><li>static Pattern compile(String regex, int flags):将给定的正则表达式编译到具有给定标志的模式中。</li><li>Matcher matcher(CharSequence input):创建匹配给定输入与此模式的匹配器。</li></ul><h1 id="Matcher"><a href="#Matcher" class="headerlink" title="Matcher"></a>Matcher</h1><p> 通过解释 Pattern 对 character sequence 执行匹配操作的引擎。<br>通过调用模式的 matcher 方法从模式创建匹配器。创建匹配器后，可以使用它执行三种不同的匹配操作：  </p><pre><code>matches 方法尝试将整个输入序列与该模式匹配。  lookingAt 尝试将输入序列从头开始与该模式匹配。  find 方法扫描输入序列以查找与该模式匹配的下一个子序列。  </code></pre><p>每个方法都返回一个表示成功或失败的布尔值。通过查询匹配器的状态可以获取关于成功匹配的更多信息。  </p><p>匹配器在其输入的子集（称为区域）中查找匹配项。默认情况下，此区域包含全部的匹配器输入。可通过 region 方法修改区域，通过 regionStart 和 regionEnd 方法查询区域。区域边界与某些模式构造交互的方式是可以更改的。有关此内容更多的信息，请参阅 useAnchoringBounds 和 useTransparentBounds。  </p><p>此类还定义使用新字符串替换匹配子序列的方法，需要时，可以从匹配结果计算出新字符串的内容。可以先后使用 appendReplacement 和 appendTail 方法将结果收集到现有的字符串缓冲区，或者使用更加便捷的 replaceAll 方法创建一个可以在其中替换输入序列中每个匹配子序列的字符串。  </p><p>匹配器的显式状态包括最近成功匹配的开始和结束索引。它还包括模式中每个捕获组捕获的输入子序列的开始和结束索引以及该子序列的总数。出于方便的考虑，还提供了以字符串的形式返回这些已捕获子序列的方法。  </p><p>匹配器的显式状态最初是未定义的；在成功匹配导致 IllegalStateException 抛出之前尝试查询其中的任何部分。每个匹配操作都将重新计算匹配器的显式状态。  </p><p>匹配器的隐式状态包括输入字符序列和添加位置，添加位置最初是零，然后由 appendReplacement 方法更新。  </p><p>可以通过调用匹配器的 reset() 方法来显式重置匹配器，如果需要新输入序列，则调用其 reset(CharSequence) 方法。重置匹配器将放弃其显式状态信息并将添加位置设置为零。  </p><p>此类的实例用于多个并发线程是不安全的。  </p><h2 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h2><p>Matcher     appendReplacement(StringBuffer sb, String replacement)<br>          实现非终端添加和替换步骤。<br>StringBuffer     appendTail(StringBuffer sb)<br>          实现终端添加和替换步骤。<br>  boolean     find()<br>          尝试查找与该模式匹配的输入序列的下一个子序列。<br> boolean     find(int start)<br>          重置此匹配器，然后尝试查找匹配该模式、从指定索引开始的输入序列的下一个子序列。  </p><h1 id="插话"><a href="#插话" class="headerlink" title="插话"></a>插话</h1><p>StringBuffer 字符串变量（线程安全）<br>StringBuilder 字符串变量（非线程安全）<br>简要的说， String 类型和 StringBuffer 类型的主要性能区别其实在于 String 是不可变的对象, 因此在每次对 String 类型进行改变的时候其实都等同于生成了一个新的 String 对象，然后将指针指向新的 String 对象，所以经常改变内容的字符串最好不要用 String ，因为每次生成对象都会对系统性能产生影响，特别当内存中无引用对象多了以后， JVM 的 GC 就会开始工作，那速度是一定会相当慢的。<br> 而如果是使用 StringBuffer 类则结果就不一样了，每次结果都会对 StringBuffer 对象本身进行操作，而不是生成新的对象，再改变对象引用。所以在一般情况下我们推荐使用 StringBuffer ，特别是字符串对象经常改变的情况下。  </p><h1 id="Query-Hibernate"><a href="#Query-Hibernate" class="headerlink" title="Query(Hibernate)"></a>Query(Hibernate)</h1><p>Query实例是通过调用Session.createQuery（）获得的(Query query=getSession().createQuery(hql)).<br>可以通过调用setMaxResults（），setFirstResult（）来选择结果集的特定页面<br>常用方法:<br>List     list()<br>          Return the query results as a List.<br>int     executeUpdate()<br>          Execute the update or delete statement.<br>Iterator     iterate()<br>          Return the query results as an Iterator.<br>Query     setFirstResult(int firstResult)<br>          Set the first row to retrieve(检索).<br>Query     setMaxResults(int maxResults)<br>          Set the maximum number of rows to retrieve.<br>Query     setParameter(int position, Object val)<br>          Bind a value to a JDBC-style query parameter.  </p><h1 id="List"><a href="#List" class="headerlink" title="List"></a>List</h1><ul><li>sublist(int i,int j):截取原list一段下来，但是只是快照，如果修改截取的部分list，原list也会相应的变化</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;把自己在编程中遇到的一些不会的API都记录下来&lt;br&gt;
    
    </summary>
    
      <category term="study" scheme="https://watermelon-lee.github.io/categories/study/"/>
    
    
      <category term="JavaWeb" scheme="https://watermelon-lee.github.io/tags/JavaWeb/"/>
    
  </entry>
  
  <entry>
    <title>HibernateJPA</title>
    <link href="https://watermelon-lee.github.io/2018/05/19/HibernateJPA/"/>
    <id>https://watermelon-lee.github.io/2018/05/19/HibernateJPA/</id>
    <published>2018-05-19T03:33:20.000Z</published>
    <updated>2018-05-19T12:06:46.397Z</updated>
    
    <content type="html"><![CDATA[<h1 id="HibernateJPA注解"><a href="#HibernateJPA注解" class="headerlink" title="HibernateJPA注解"></a>HibernateJPA注解</h1><p>最近在写一个论坛的Demo,接触带了许多Hibernate的注解,不是很了解,做个笔记<br><a id="more"></a></p><h2 id="类级别注解"><a href="#类级别注解" class="headerlink" title="类级别注解"></a>类级别注解</h2><ul><li>@Entity(name=”Name”):映射实体类,name可选,对应数据库中的一个表.</li><li>@Table(name=”Name”,catalog=”Catalog”,schema=”Schema”):与@Entity配合使用,只能标注在实体类的class上,表示实体类对应的数据库表信息.Name可选，映射表的名称，若表名与实体类名相同，则name可省略。catalog可选，表示catalog名称，默认为Catalog(“”)。Schema可选，表示schema名称，默认为schma(“”)。 </li><li>@inheritance:参见<a href="https://blog.csdn.net/ack_finding/article/details/78691361" target="_blank" rel="noopener">博客</a></li><li>@cache:设置缓存策略,Hibernate提供了以下集中策略.<ol><li>CacheConcurrencyStrategy.NONE:不使用缓存.</li><li>CacheConcurrencyStrategy.READ_ONLY:只读模式,在此模式下,如果对数据进行了更新,就会产生异常.</li><li>CacheConcurrencyStrategy.REEAD_WRITE:读写模式,该模式在更新缓存的同时会对缓存里面的数据加锁,其他的事务如果去获取缓存,被锁发现了,就会直接去数据库查询.</li><li>CacheConcurrencyStrategy.NONSTRICT_READ_WRITE:不严格的读写模式,使用该模式不会对缓存数据加锁.</li><li>CacheConcurrencyStrategy.TRANSACTIONAL:事务模式,指缓存支持事务,当事务回滚时,缓存也能回滚,目前只支持JTA环境.<h2 id="属性级别注解"><a href="#属性级别注解" class="headerlink" title="属性级别注解"></a>属性级别注解</h2>可以在属性字段上添加,也可以在属性的get上添加</li></ol></li><li>@id:定义了映射到数据库表的主键属性.</li><li>@GeneratedValue(Strategy=””),用于定义主键生成策略.Strategy有一下策略:<ol><li>GenerationType.AUTO:根据底层数据库自动选择</li><li>GenerationType.INDENTITY:根据数据库的Identity字段生成</li><li>GenerationType.SEQUENCE:使用Sequence来决定主键取值</li><li>GenerationType.TABLE:使用指定表来决定主键取值</li></ol></li><li>@Column:将属性映射到列上,使用该注解来覆盖默认值.可选属性:<ol><li>name:表示数据库表中该字段的名称</li><li>Nullable:该字段是否可为空,默认为True`</li><li>Unique:该字段标示是否唯一,默认为False</li><li>Length:标示字段大小,只对String类型字段有效,默认255</li><li>Inserable:在ORM框架执行Insert操作时,该字段是否需要出现在Insert语句中,默认True</li><li>Updateable:在ORM执行更行操作是,该字段是都出现在Update语句中,默认为True.对于一经创建就不可以更改的字段，改属性非常有用，如对于birthday字段。</li></ol></li><li>@Basic(fetch=”Lazy”,optional=”true”):表示一个简单的属性到数据库字段的映射,对没有标记任何getXXX()的方法,默认为@Basic.fetch表示该属性的读取策略,有EAGER和LAZY.分别为主枝抓取和延迟加载.默认为EAGER.</li><li>@Transient:表示该属性并非一个到数据库表的字段的映射,ORM框架将忽略该属性.如果一个属性并非数据库表的字段映射,就务必将其标示为@Transient,否则,ORM框架默认其注解为@Basic</li></ul><h2 id="关系映射注解"><a href="#关系映射注解" class="headerlink" title="关系映射注解"></a>关系映射注解</h2><p>实体之间的映射关系有一对一,一对多,多对一,多对多.  </p><h3 id="一对一外键"><a href="#一对一外键" class="headerlink" title="一对一外键:"></a>一对一外键:</h3><p>@OneToOne(cascade=CascadeType.ALL,fetch=FetchType)<br>@JoinColumn(name=”pid”,unique=true)<br>注：保存时应该先保存外键对象，再保存主表对象.fetch标示抓取策略,默认为FetchType.LAZY.cascade标示级联操作策略.  </p><h3 id="多对一外键"><a href="#多对一外键" class="headerlink" title="多对一外键"></a>多对一外键</h3><p>@ManyToOne(cascade={CasecadeType.All},fetch=FetchType.EAGER)<br>@JoinColum(name=”cid”, referencedColumnName=”CID”) </p><p>###　多对多单向外键<br>@ManyToMany(cascade = {CascadeType.PERSIST, CascadeType.MERGE}, mappedBy = “manBoards”, fetch = FetchType.LAZY)<br>private Set<user> users=new HashSet<user>();  </user></user></p><h3 id="Hibernate-CascadeType说明"><a href="#Hibernate-CascadeType说明" class="headerlink" title="Hibernate CascadeType说明"></a>Hibernate CascadeType说明</h3><p>CascadeType.PERSIST只有A类新增时，会级联B对象新增。若B对象在数据库存（跟新）在则抛异常（让B变为持久态） </p><p>CascadeType.MERGE指A类新增或者变化，会级联B对象（新增或者变化） </p><p>CascadeType.REMOVE只有A类删除时，会级联删除B类； </p><p>CascadeType.ALL包含所有； </p><p>CascadeType.REFRESH没用过。 </p><p>综上：大多数情况用CascadeType.MERGE就能达到级联跟新又不报错，用CascadeType.ALL时要斟酌下CascadeType.REMOVE  </p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;HibernateJPA注解&quot;&gt;&lt;a href=&quot;#HibernateJPA注解&quot; class=&quot;headerlink&quot; title=&quot;HibernateJPA注解&quot;&gt;&lt;/a&gt;HibernateJPA注解&lt;/h1&gt;&lt;p&gt;最近在写一个论坛的Demo,接触带了许多Hibernate的注解,不是很了解,做个笔记&lt;br&gt;
    
    </summary>
    
      <category term="study" scheme="https://watermelon-lee.github.io/categories/study/"/>
    
    
      <category term="Hibernate" scheme="https://watermelon-lee.github.io/tags/Hibernate/"/>
    
  </entry>
  
  <entry>
    <title>我们这一年</title>
    <link href="https://watermelon-lee.github.io/2018/05/17/OneYear/"/>
    <id>https://watermelon-lee.github.io/2018/05/17/OneYear/</id>
    <published>2018-05-16T16:00:00.000Z</published>
    <updated>2018-05-18T10:57:17.804Z</updated>
    
    <content type="html"><![CDATA[<p>嗨,西瓜,有你的日子过得好快,我们也在一起一年了.<br><a id="more"></a><br>刚开始的认识始于一次偶然的问候,坐在前桌的你突然回头问我是不是湖南人(大概是我的塑普十分明显),后来问了别人才得知就在隔壁班的你竟也是老乡.之后便添加了你的好友.<br><img src="../../../../img/oneYear/2.jpg" alt="pic2"><br>相互熟悉也是始于一次偶然.没有人报名当人大代表,我就被导员拉去了.大概是需要收集一些同学们反映的问题,然后开会时提出来.想想当时还气的不行,又得浪费打游戏的时间去开一些莫名其妙的会.有天晚上打游戏时,你发了一个意见反馈给我,通过这次聊天,发现两人之间有好多相似的地方,有说不完的话.<br>后来相互熟悉,也觉得互有感觉,进过深思熟虑,终于决定勇敢的表达自己对你喜欢.当然,我成功了,原因的话,大概就是下图吧<br><img src="../../../../img/oneYear/1.jpg" alt="ShowMyLove"><br>和你在一起后生活也多了很多新奇的体验.我们一起在球场看露天电影,走遍校园里的大道与小巷,一路小跑的追逐晚霞,每晚自习完的一起锻炼,一起种星星,在路边走过看这肥肥跳跳滑稽的走路,当然,最后也带你体验了一下我玩了两年的游戏.最后虽然就在良乡呆了两个月,经历却比之前的两年更为丰富.暑假的成都之行也是十分的开心,带着一个每次出行都会做好计划,把行程安排的十分妥当的你体验了一下随意的旅行.<br><img src="../../../../img/oneYear/3.jpg" alt="pic3"><br><img src="../../../../img/oneYear/4.jpg" alt="pic4"><br><img src="../../../../img/oneYear/5.jpg" alt="pic5"><br><img src="../../../../img/oneYear/6.jpg" alt="pic6"><br><img src="../../../../img/oneYear/7.jpg" alt="pic7"><br>当然,我们也有经历一段tough time.大三上你交换去了台湾半年,我们就得经历一段好长时间的异地了.还记得一开始你对于那里各种不适应,找房子,遇到一些不善意的人,和棘手的事情.当然,有问题就找老大投诉,我也愿意听,你不开心的时候我都会在一旁安慰你.还好你可爱又明事理,大多时候都可以哄好你.我也曾失去过耐心,表现的很自私,这种时候我是一个糟糕的男朋友.即便如此,你也总是会包容我,你真挚的情感总是能拯救我,always,always.十分感激.除了那一丢丢不好的地方,台湾这种城市对你这样的文艺女孩也算是天堂啦.有各种集市,你喜欢的手账,文具店.充满了生活气息的巷子,道路上有机车飞驰的声音.好可惜没有和你一起在台湾,以后有机会的话就请大导游带我去玩耍啦.<br><img src="../../../../img/oneYear/10.png" alt="pic10"><br><img src="../../../../img/oneYear/8.jpg" alt="pic8"><br><img src="../../../../img/oneYear/9.jpg" alt="pic9"><br>这个学期,我们又在一起啦.当然,大三是比较忙碌的,很多时间也都泡在图书馆了.暑假开始我们也就要一起考研了.总觉得你是一个特别勇敢有梦想的人,为了自己的兴趣,选择跨考.虽然也许会很难,不过我很一直陪你.在图书馆看到你沉浸在自己喜欢的书籍与作业中,也就觉得这一切也都值得.<br>最后,你有时老是会问我喜欢你的什么,那么,杜致远<br>我喜欢你坐在单车后搂住我看在我背上的动作.<br>我喜欢你吃好吃的东西,眯起眼睛的样子,还有双颊塞满食物时,嘴角露出上扬的弧线.<br>我喜欢你看着窗外跳跳发呆的侧脸.<br>我喜欢你偶尔听着我放的音乐不自禁摇摆的身体.<br>我喜欢你遇见摄像头时候摆个姿势,露出的微笑.<br>我喜欢你就算不懂也陪在旁边和我一起看球的认真.<br>我喜欢你在我问你带有选择的问题时,你习惯的说出”随你”.<br>我喜欢你悄悄为我准备的突如其来的惊喜.<br>我喜欢你不时的在我的书上或者写给我的卡片上,那些鼓励我好好学习的话语.<br>我喜欢你看自己感兴趣的书时,认真的眼神.<br>我喜欢你每天的问候”早早”与”晚安”的可爱.<br>我喜欢你在完成图形学作业之后有些癫狂的庆祝动作.<br>我喜欢你在北湖教我认那些花草树木的模样.<br>我喜欢你为我们创作的那些可爱的头像.<br>我喜欢这样的你.<br>偶尔翻起生日时你送我的32页的小本本,总有许多感动.很幸运能够遇到这样的你,一直陪伴有些幼稚愚蠢的我.也许以后还会犯错,还会遇到苦难,还得麻烦你多多照顾~</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;嗨,西瓜,有你的日子过得好快,我们也在一起一年了.&lt;br&gt;
    
    </summary>
    
      <category term="YuanYuan" scheme="https://watermelon-lee.github.io/categories/YuanYuan/"/>
    
    
      <category term="letter" scheme="https://watermelon-lee.github.io/tags/letter/"/>
    
  </entry>
  
  <entry>
    <title>两小无猜||天生一对 ?</title>
    <link href="https://watermelon-lee.github.io/2018/05/14/twins/"/>
    <id>https://watermelon-lee.github.io/2018/05/14/twins/</id>
    <published>2018-05-14T00:43:10.000Z</published>
    <updated>2018-05-14T15:27:12.074Z</updated>
    
    <content type="html"><![CDATA[<p>你们看起来好像一样可爱<br><a id="more"></a></p><h1 id="Bottle"><a href="#Bottle" class="headerlink" title="Bottle"></a>Bottle</h1><p><img src="../../../../img/twins/1.jpg" alt="Bottle">  </p><h1 id="Shoes"><a href="#Shoes" class="headerlink" title="Shoes"></a>Shoes</h1><p><img src="../../../../img/twins/2.jpg" alt="Shoes"><br><img src="../../../../img/twins/4.jpg" alt="Shoes"><br><img src="../../../../img/twins/5.jpg" alt="Shoes">  </p><h1 id="Satchel"><a href="#Satchel" class="headerlink" title="Satchel"></a>Satchel</h1><p><img src="../../../../img/twins/3.jpg" alt="Satchel">  </p><h1 id="Angel"><a href="#Angel" class="headerlink" title="Angel"></a>Angel</h1><p><img src="../../../../img/twins/6.jpg" alt="Angel">  </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;你们看起来好像一样可爱&lt;br&gt;
    
    </summary>
    
      <category term="home" scheme="https://watermelon-lee.github.io/categories/home/"/>
    
    
      <category term="twins" scheme="https://watermelon-lee.github.io/tags/twins/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu命令</title>
    <link href="https://watermelon-lee.github.io/2018/05/08/Linux-instructions/"/>
    <id>https://watermelon-lee.github.io/2018/05/08/Linux-instructions/</id>
    <published>2018-05-08T12:59:22.000Z</published>
    <updated>2018-06-08T06:14:15.813Z</updated>
    
    <content type="html"><![CDATA[<p>使用系统时总有好多命令不知道,查了然后又忘了,慢慢作个总结，把每次不记得的都写在这里吧。</p><ul><li>连接服务器：ssh <a href="mailto:root@39.107.93.107" target="_blank" rel="noopener">root@39.107.93.107</a></li><li>上传文件到服务器：类似：scp -r testprojectsystem.war <a href="mailto:root@39.107.93.107" target="_blank" rel="noopener">root@39.107.93.107</a>:/opt/tomcat/webapps/</li><li>mysql执行sql文件：进入mysql    Source fileAddress</li><li>查看mysql版本:mysql -V</li><li>查看端口lsof -i:8088</li><li>杀死使用该端口的进程:kill -9 PID号</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;使用系统时总有好多命令不知道,查了然后又忘了,慢慢作个总结，把每次不记得的都写在这里吧。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;连接服务器：ssh &lt;a href=&quot;mailto:root@39.107.93.107&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;ro
      
    
    </summary>
    
      <category term="study" scheme="https://watermelon-lee.github.io/categories/study/"/>
    
    
      <category term="Ubuntu" scheme="https://watermelon-lee.github.io/tags/Ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>远远的作品集</title>
    <link href="https://watermelon-lee.github.io/2018/05/05/YuanYuanPortfolio1/"/>
    <id>https://watermelon-lee.github.io/2018/05/05/YuanYuanPortfolio1/</id>
    <published>2018-05-05T14:54:26.000Z</published>
    <updated>2018-05-14T01:16:16.535Z</updated>
    
    <content type="html"><![CDATA[<p>涂涂画画<br><a id="more"></a></p><h1 id="远远的课堂作业"><a href="#远远的课堂作业" class="headerlink" title="远远的课堂作业"></a>远远的课堂作业</h1><h2 id="第一次作业"><a href="#第一次作业" class="headerlink" title="第一次作业"></a>第一次作业</h2><p><img src="../../../../img/Portfolio/1.jpg" alt="pic">  </p><h2 id="第二次作业"><a href="#第二次作业" class="headerlink" title="第二次作业"></a>第二次作业</h2><p><img src="../../../../img/Portfolio/2.jpg" alt="pic"><br><img src="../../../../img/Portfolio/3.jpg" alt="pic"><br><img src="../../../../img/Portfolio/4.jpg" alt="pic"><br><img src="../../../../img/Portfolio/5.jpg" alt="pic"><br><img src="../../../../img/Portfolio/6.jpg" alt="pic">  </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;涂涂画画&lt;br&gt;
    
    </summary>
    
      <category term="YuanYuan" scheme="https://watermelon-lee.github.io/categories/YuanYuan/"/>
    
    
      <category term="Portfolio" scheme="https://watermelon-lee.github.io/tags/Portfolio/"/>
    
  </entry>
  
  <entry>
    <title>Spring-MVC</title>
    <link href="https://watermelon-lee.github.io/2018/05/02/Spring-MVC/"/>
    <id>https://watermelon-lee.github.io/2018/05/02/Spring-MVC/</id>
    <published>2018-05-02T13:32:30.000Z</published>
    <updated>2018-05-13T04:00:08.638Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring-MVC"><a href="#Spring-MVC" class="headerlink" title="Spring MVC"></a>Spring MVC</h1><p>Spring MVC是围绕DispatcherServlet这个核心展开的,他负责截获请求并将其分配给相应的处理器.Spring MVC框架包括注解驱动器控制器,请求以及相应控制器,视图解析,本地化解析,上传文件解析,异常处理解析以及表单绑定等.<br><a id="more"></a></p><h2 id="体系结构"><a href="#体系结构" class="headerlink" title="体系结构"></a>体系结构</h2><p><img src="../../../../img/Spring/SpringMVCFramework.png" alt="SpringMVC体系结构">  </p><h3 id="配置DispatcherServlet"><a href="#配置DispatcherServlet" class="headerlink" title="配置DispatcherServlet"></a>配置DispatcherServlet</h3><p>DispatcherServlet负责接受Http请求并协调Spring MVC中各个组件2完成处理1请求的工作.和任何servlet一样,DispatcherServlet也需要在web.xml文件中配置.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;context-param&gt;</span><br><span class="line">   &lt;param-name&gt;contextConfigLocation&gt;&lt;/param-name&gt;</span><br><span class="line">   &lt;param-value&gt;/WEB-INF/applicationContext.xml&lt;/param-value&gt;</span><br><span class="line"> &lt;/context-param&gt;</span><br><span class="line"> &lt;listener&gt;</span><br><span class="line">   &lt;listener-class&gt;org.springframework.web.context.ContextLoaderListener&lt;/listener-class&gt;</span><br><span class="line"> &lt;/listener&gt;</span><br><span class="line"></span><br><span class="line"> &lt;servlet&gt;</span><br><span class="line">   &lt;servlet-name&gt;mvc&lt;/servlet-name&gt;</span><br><span class="line">   &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt;</span><br><span class="line">   &lt;!-- 可以自定义servlet.xml配置文件的位置和名称，默认为WEB-INF目录下，名称为[&lt;servlet-name&gt;]-servlet.xml，如spring-servlet.xml</span><br><span class="line">  &lt;init-param&gt;</span><br><span class="line">      &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;</span><br><span class="line">      &lt;param-value&gt;/WEB-INF/spring-servlet.xml&lt;/param-value&gt;&amp;nbsp; 默认</span><br><span class="line">  &lt;/init-param&gt;</span><br><span class="line">  --&gt;</span><br><span class="line">   &lt;load-on-startup&gt;1&lt;/load-on-startup&gt;</span><br><span class="line"> &lt;/servlet&gt;</span><br><span class="line"> &lt;servlet-mapping&gt;</span><br><span class="line">   &lt;servlet-name&gt;mvc&lt;/servlet-name&gt;</span><br><span class="line">   &lt;!--&lt;url-pattern&gt;*.html&lt;/url-pattern&gt;--&gt;</span><br><span class="line">   &lt;url-pattern&gt;/&lt;/url-pattern&gt;</span><br><span class="line"> &lt;/servlet-mapping&gt;</span><br></pre></td></tr></table></figure></p><p>通过contextConfigLocation参数指定业务层Spring配置文件(多个使用逗号,)为/WEB-INF/applicationContext.xml.使用<servlet>标签配置了DispatcherServlet,名为mvc,它默认加载/WEB-INF/mvc-servlet,可使用<init-param>来指定文件,启动web层的Spring容器.通过<servlet-mapping>指定DispatcherServlet处理所有以.html结尾的请求.</servlet-mapping></init-param></servlet></p><h3 id="简单实例"><a href="#简单实例" class="headerlink" title="简单实例"></a>简单实例</h3><p>SpringMVC应用开发一般包括一下几个步骤:</p><ul><li>配置web.xml,指定业务层对应的Spring配置文件,定义DispatcherServlet.</li><li>编写处理请求的控制器.</li><li>编写视图对象(如jsp).</li><li>配置SpringMVC配置文件,是控制器,视图解析器生效.</li></ul><h4 id="配置web-xml"><a href="#配置web-xml" class="headerlink" title="配置web.xml"></a>配置web.xml</h4><p>代码在前面贴出来了</p><h4 id="编写处理请求的控制器"><a href="#编写处理请求的控制器" class="headerlink" title="编写处理请求的控制器"></a>编写处理请求的控制器</h4><p>SpringMVC通过@Controller注解就可以将POJO转化为处理请求的控制器,通过@RequestMapping为控制器指定处理哪些请求URL请求.我们定义UserController为处理的控制器:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">@Controller//标记成为处理请求的控制器</span><br><span class="line">@RequestMapping(&quot;/user&quot;)//处理来自/user的uri请求</span><br><span class="line">public class UserController &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private UserService userService;//业务层</span><br><span class="line"></span><br><span class="line">    @RequestMapping(&quot;/register&quot;)</span><br><span class="line">    public String register()&#123;</span><br><span class="line">        return &quot;user/register&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>首先使用@Controller对该类进行标注,使其成为一个可以处理Http请求的控制器,使用@RequestMapping对其标注,使其处理所有所有URI为/user的请求,相对于web根目录.然后在register方法上标注@RequestMapping来确定对应的URL请求.他返回了一个字符串”user/register”,代表了一个逻辑视图名,之后将由视图解析器解析为一个具体的视图对象,/WEB-INF/views/user/register.jsp.</p><h4 id="编写视图对象"><a href="#编写视图对象" class="headerlink" title="编写视图对象"></a>编写视图对象</h4><p>使用register.jsp作为一个试图对象:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ taglib prefix=&quot;c&quot; uri=&quot;http://www.springframework.org/tags&quot; %&gt;</span><br><span class="line">&lt;%--</span><br><span class="line">  Created by IntelliJ IDEA.</span><br><span class="line">  User: watermelon</span><br><span class="line">  Date: 18-5-1</span><br><span class="line">  Time: 下午9:59</span><br><span class="line">  To change this template use File | Settings | File Templates.</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;新增用户&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;form action=&quot;&lt;c:url value=&quot;/user.html&quot;/&gt;&quot; method=&quot;post&quot;&gt;</span><br><span class="line">    &lt;table&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">    &lt;td&gt;用户名:&lt;/td&gt;</span><br><span class="line">    &lt;td&gt;&lt;input type=&quot;text&quot; name=&quot;userName&quot;/&gt;&lt;/td&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">    &lt;td&gt;密码:&lt;/td&gt;</span><br><span class="line">    &lt;td&gt;&lt;input name=&quot;password&quot; type=&quot;password&quot;/&gt; &lt;/td&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">    &lt;td&gt;姓名:&lt;/td&gt;</span><br><span class="line">    &lt;td&gt;&lt;input name=&quot;realName&quot; type=&quot;text&quot;/&gt; &lt;/td&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">    &lt;td colspan=&quot;2&quot;&gt;&lt;input value=&quot;注册&quot; type=&quot;submit&quot;/&gt; &lt;/td&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">    &lt;/table&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p><p>register.jsp包含一个表单,将数据提交到/user.html.我们在UserController中添加一个createUser()方法,来处理表单的提交:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">@RequestMapping(method = RequestMethod.POST)</span><br><span class="line">public ModelAndView createUser(User user)&#123;</span><br><span class="line">    userService.createUser(user);</span><br><span class="line">    ModelAndView modelAndView=new ModelAndView();</span><br><span class="line"></span><br><span class="line">    modelAndView.setViewName(&quot;user/createSuccess&quot;);</span><br><span class="line">    modelAndView.addObject(&quot;user&quot;,user);</span><br><span class="line">    return modelAndView;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>该方法处理/user.html的请求并且请求方法为post.SpringMVC自动将表单中的数据按照参数名和User属性名匹配的方式进行绑定,将参数值填充到对应的User相应的属性中.调用业务层UserService处理业务,然后将user保存在ModelAndView对象,视图名为user/createUser,user作为模型数据将暴露给试图对象.</p><p>user对象代码如下,省略get,set:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public class User &#123;</span><br><span class="line">    private String userId;</span><br><span class="line">    private String userName;</span><br><span class="line">    private String password;</span><br><span class="line">    private String realName;</span><br><span class="line">   ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>User中的参数名与Register.jsp表单页面中组件名字是一致的,这样SpringMVC即可自动填充属性.<br>视图解析器将user/createUser解析为/WEB-INF/views/user/createSuccess.jsp的视图对象.createSuccess.jsp视图可以访问到模型中的数据user.createSuccess.jsp如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot; pageEncoding=&quot;UTF-8&quot;%&gt;</span><br><span class="line">&lt;%@ page isELIgnored=&quot;false&quot; %&gt;</span><br><span class="line">&lt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;用户创建成功&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">恭喜，用户$&#123;user13.userName&#125;创建成功，用户姓名为为$&#123;user13.userRealName&#125;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p><h4 id="配置SpringMVC的配置文件"><a href="#配置SpringMVC的配置文件" class="headerlink" title="配置SpringMVC的配置文件"></a>配置SpringMVC的配置文件</h4><p>mvc-servlet.xml:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class="line">       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">       xmlns:context=&quot;http://www.springframework.org/schema/context&quot; xmlns:p=&quot;http://www.springframework.org/schema/p&quot;</span><br><span class="line">       xmlns:util=&quot;http://www.springframework.org/schema/util&quot; xmlns:mvc=&quot;http://www.springframework.org/schema/mvc&quot;</span><br><span class="line">       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd http://www.springframework.org/schema/tool http://www.springframework.org/schema/tool/spring-tool.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;context:component-scan base-package=&quot;com.controller&quot;/&gt;</span><br><span class="line">    &lt;bean class=&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span><br><span class="line">          p:prefix=&quot;/WEB-INF/views/&quot;</span><br><span class="line">          p:suffix=&quot;.jsp&quot;/&gt;</span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure></p><p>通过 &lt;context:component-scan base-package=”com.controller”/&gt; 扫描com.controller中的的所有类,对于标注了Spring标记的类生效.然后定义了一个视图解析器,将视图名解析为/WEB-INF/views/<viewname>.jsp的视图对象.</viewname></p><h4 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h4><p>将应用部署到web服务器中,输入localhost:/8088/mvc/user/register.html既可以访问注册页面,填写信息提交到localhost:8088/mvc/user.html,UserController控制器中的createUser()方法响应该请求,并导向createSuccess.jsp页面.<br>SpringMVC处理请求的过程如下图:<br><img src="../../../../img/Spring/SpringMVCHandle.png" alt="SpringMVC请求处理过程">  </p><ul><li>web应用服务器接收到一个新请求是，如果匹配DispatcherServlet的请求映射路径，web容器将该请求转发给DispatcherServlet进行处理</li><li>DispatcherServlet接收到请求后，将根据请求的信息及HandlerMapping的配置找到处理请求的处理器（Handler）</li><li>当DispatcherServlet根据HandlerMapping得到对应当前请求的Handler后，通过HandlerAdapter对Handler进行封装，以统一的适配器接口调用Handler</li><li>处理器完成业务逻辑的处理后将返回一个ModelAndView给DispatcherServlet，ModelAndView包含了视图逻辑名和模型数据信息</li><li>ModelAndView中包含的是“逻辑视图名”，而非真正的视图对象，DispatcherServlet借助ViewResolver完成逻辑视图名到真实视图名对象的解析工作</li><li>当得到真实的视图对象View后，DispatcherServlet就使用这个View对象对ModelAndView中的模型数据进行视图渲染</li><li>最终客户端得到的可能是HTML页面或者其他对象</li></ul><h2 id="注解驱动的控制器"><a href="#注解驱动的控制器" class="headerlink" title="注解驱动的控制器"></a>注解驱动的控制器</h2><h3 id="使用-RequestMapping映射请求"><a href="#使用-RequestMapping映射请求" class="headerlink" title="使用@RequestMapping映射请求"></a>使用@RequestMapping映射请求</h3><p>在POJO类定义出标记@Controller,在通过<a href="context:component-scan/" target="_blank" rel="noopener">context:component-scan/</a>扫描对应的类包,即可以使POJO类成为一个能处理HTTP请求的控制器.<br>在控制器的类定义以及方法定义处都可以标注@RequestMapping,类的定义处提供初步请求映射信息,类方法处提供详细的映射信息.DispatcherServlet截获请求后,通过控制器上的@RequestMapping提供的映射信息确定所对应的处理方法.总共包括4中映射关系,URL,请求参数,请求方法,请求头.<br>@RequestMapping使用value/path指定请求的URL,如@RequestMapping(“/user”),需要注意,@RequestMapping在类定义处指定的URL是相对于Web应用部署的路径.<br>除此之外,还可以使用请求方法,请求头参数,以及请求参数:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@RequestMapping(value = &quot;/delete&quot;, method = RequestMethod.POST, params = &quot;userId&quot;)</span><br><span class="line">public String test1(@RequestParam(&quot;userId&quot;) String userId) &#123;</span><br><span class="line">// do sth</span><br><span class="line">return &quot;user/test1&quot;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@RequestMapping(value = &quot;/show&quot;, headers = &quot;content-type=text/*&quot;)</span><br><span class="line">public String test2(@RequestParam(&quot;userId&quot;) String userId) &#123;</span><br><span class="line">// do sth</span><br><span class="line">return &quot;user/test2&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>@RequestMapping的path,method,params以及headers分别表示请求的URL,请求方法,请求参数,报文头的映射条件,他们之间是与的关系.<br>params与headers支持简单的映射表达式,以params为说明,headers类似:</p><ul><li>params=”param1”表示请求必须包含名为param1的请求参数.</li><li>!param1表示请求不能包含名为param1的请求参数</li><li>“param1!=value1”包含名为param1的请求参数,但是其值不能value1</li><li>{“param1=value1”,”param2”}请求必须包含名为param1和param2的请求参数,且param1的值必须为value1</li></ul><h3 id="请求处理方法签名"><a href="#请求处理方法签名" class="headerlink" title="请求处理方法签名"></a>请求处理方法签名</h3><p>Spring MVC可以使用@RequestParam来绑定请求参数值,@CookieValue绑定请求中的cookie值,使用@RequestHeader绑定请求报文头的属性,使用表单对象绑定请求参数.</p><h4 id="使用-RequestParam来绑定请求参数值"><a href="#使用-RequestParam来绑定请求参数值" class="headerlink" title="使用@RequestParam来绑定请求参数值"></a>使用@RequestParam来绑定请求参数值</h4><p>@RequestParam有三个参数</p><ul><li>value:参数名</li><li>required:是否必须,默认为true,表示请求中必须包含有对应的参数名.如果不存在,抛出异常.</li><li>defaultValue:默认参数名.不推荐使用<br>例如:<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@RequestMapping(value = &quot;/handle11&quot;)</span><br><span class="line">public String handle11(</span><br><span class="line">@RequestParam(value = &quot;userName&quot;, required = false) String userName,</span><br><span class="line">@RequestParam(&quot;age&quot;) int age) &#123;</span><br><span class="line">return &quot;success&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>上面的例子将userName和age的请求参数绑定到了handle11方法的参数上,并且自动完成类型转换.如果不存在age参数,抛出异常.</p><h3 id="使用表单-命令对象绑定请求参数"><a href="#使用表单-命令对象绑定请求参数" class="headerlink" title="使用表单/命令对象绑定请求参数"></a>使用表单/命令对象绑定请求参数</h3><p>使用命令/表单对象不需要实现任何接口,只需要一个包含若干属性的POJO.SpringMVC会按照请求参数名和表单对象属性名匹配的方式,自动为该对象填充属性.</p><h3 id="处理数据模型"><a href="#处理数据模型" class="headerlink" title="处理数据模型"></a>处理数据模型</h3><p>将数据模型暴露给视图是SpringMVC框架的重要工作,SPringMVC提供了多种输出模型数据:</p><ul><li>ModelAndView:当处理方法返回值为ModelAndView,方法体即可用该对象添加数据模型</li><li>@ModelAttribute:在方法的入参处标记该注解,入参的对象就会自动放到数据模型中.</li><li>Map和Model:方法入参为import org.springframework.ui.ModelMap或者java.util.Map,返回时,Map中的数据自动添加到模型中.</li><li>@SessionAttributes:将模型中的某个属性存到HttpSession中,以便多个请求键可以共享该属性</li></ul><h4 id="ModelAndView"><a href="#ModelAndView" class="headerlink" title="ModelAndView"></a>ModelAndView</h4><p>控制器处理的方法如果返回值为ModelAndView,则既包含了视图信息,又包含了数据模型信息,这样SpringMVC就可以对视图进行渲染.ModelAndView类似于一个Map&lt;String,Object&gt;对象.其包含的方法有:</p><ul><li>ModelAndView addObject(String attributeName,Object attributeValue)</li><li>ModelAndView addAllObjects(Map&lt;String,?&gt;modeMap)</li><li>void setView(View view):指定一个视图对象</li><li>void setViewName(String viewName):指定一个逻辑视图名</li></ul><h4 id="ModelAttribute"><a href="#ModelAttribute" class="headerlink" title="@ModelAttribute"></a>@ModelAttribute</h4><p>如果希望将方法的入参对象添加到模型当中,只需要在入参前面添加@ModeAttribute注解.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@RequestMapping(value = &quot;/handle61&quot;)</span><br><span class="line">public String handle61(@ModelAttribute(&quot;user&quot;) User user) &#123;</span><br><span class="line">user.setUserId(&quot;1000&quot;);</span><br><span class="line">return &quot;/user/createSuccess&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>SpringMVC将请求消息绑定到User对象,在以user为键将User对象放到模型上.在对视图进行渲染前,SPringMVC还会进一步将模型中的数据转存到视图上下文,并且暴露给视图.<br>此外,还可以在方法的定义中使用@ModelAttribute注解.SpringMVC在调用目标方法前,<em>会先逐个调用在方法级别上标注了@ModelAttribute注解的方法,并将这些方法的返回值添加到模型中</em>.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">@ModelAttribute(&quot;user&quot;)</span><br><span class="line">public User getUser() &#123;</span><br><span class="line">User user = new User();</span><br><span class="line">user.setUserId(&quot;1001&quot;);</span><br><span class="line">user.setUserName(&quot;&lt;&gt;&quot;);</span><br><span class="line">return user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">@RequestMapping(value = &quot;/handle62&quot;)</span><br><span class="line">public String handle62(@ModelAttribute(&quot;user&quot;) User user) &#123;</span><br><span class="line">user.setUserName(&quot;tom&quot;);</span><br><span class="line">return &quot;/user/showUser&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>SpringMVC在访问任何UserController中的方法前,先执行标注了@ModelAttribute的方法gerUser(),并将其返回值以user为键,添加到模型中.<br>而在handle12方法中使用了键值为user的模型数据,所以SpringMVC会将模型中的属性值赋给入参user,然后在根据Http请求消息对user进行填充覆盖,得到一个整合版的user.</p><h4 id="Model和Map"><a href="#Model和Map" class="headerlink" title="Model和Map"></a>Model和Map</h4><p>SpringMVC在调用方法前会创造一个隐含的模型对象,作为模型数据的存储容器,称为”隐含模型”.如果处理方法入参为Model或者Map,SpringMVC会自动将隐含模型传递给这些入参.在方法体内,可以通过这个入参对象访问到模型的所有对象,也可以像模型中添加新的数据.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@RequestMapping(value = &quot;/handle63&quot;)</span><br><span class="line">public String handle63(ModelMap modelMap) &#123;</span><br><span class="line">User user = (User) modelMap.get(&quot;user&quot;);</span><br><span class="line">user.setUserName(&quot;tom&quot;);</span><br><span class="line">modelMap.addAttribute(&quot;testAttr&quot;, &quot;value1&quot;);</span><br><span class="line">return &quot;/user/showUser&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="SessionAttributes"><a href="#SessionAttributes" class="headerlink" title="@SessionAttributes"></a>@SessionAttributes</h4><p>如果希望在多个模型中公用一个数据模型,则可以在控制器内标注一个@SessionAttributes,SpringMVC会将模型中对应的属性暂存到HttpSession中.但是在使用时需要添加一个标注@ModelAttribute(“xxx”)的方法,像隐含对象中添加一个xxx属性.否则抛出HttpSessionRequiredException异常.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">Controller</span><br><span class="line">@RequestMapping(&quot;/user&quot;)</span><br><span class="line">@SessionAttributes(value=&quot;user&quot;)</span><br><span class="line">public class UserController &#123;</span><br><span class="line">@ModelAttribute(&quot;user&quot;)//需要添加该方法,先向隐含模型中添加user属性,否则报错.</span><br><span class="line">public User getUser() &#123;</span><br><span class="line">User user = new User();</span><br><span class="line">user.setUserId(&quot;1001&quot;);</span><br><span class="line">user.setUserName(&quot;&lt;&gt;&quot;);</span><br><span class="line">return user;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@RequestMapping(value = &quot;/handle71&quot;)</span><br><span class="line">public String handle71(@ModelAttribute(&quot;user&quot;) User user) &#123;</span><br><span class="line">user.setUserName(&quot;John&quot;);</span><br><span class="line">return &quot;redirect:handle72.html&quot;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@RequestMapping(value = &quot;/handle72&quot;)</span><br><span class="line">public String handle72(ModelMap modelMap, SessionStatus sessionStatus) &#123;</span><br><span class="line">User user = (User) modelMap.get(&quot;user&quot;);</span><br><span class="line">if (user != null) &#123;</span><br><span class="line">user.setUserName(&quot;Jetty&quot;);</span><br><span class="line">sessionStatus.setComplete();</span><br><span class="line">&#125;</span><br><span class="line">return &quot;/user/showUser&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>探究一下报错的原理:<br>因为SpringMVC在对@ModelAttribute和@SessionAttributes处理有一个特定的流程:</p><ul><li>SPringMVC在调用处理方法前,在请求线程中自动创建一个隐含的模型对象</li><li>调用所有标志了@ModelAttribute的方法,将方法的返回值添加到隐含模型中</li><li>查看Session中是否有@SessionAttributes(“xxx”)所指定的xxx属性,若有,将其添加到隐含模型中.如果隐含模型已经有了该属性,则会覆盖该属性.</li><li>对标注了@ModelAttribute(“xxx)”处理方法的入参会按照如下处理流程:<br>  1.如果隐含模型中有名为xx的属性,则将其赋值给该入参,再用请求消息填充该入参对象直接返回,否侧下一步<br>  2.如果xxx是会话属性,即在类定义处标记了@SessionAttributes(“xxx”),则会从回话中获取该属性,将其赋值给入参,然后再用请求消息填充该入参.如果在会话中找不到,抛出异常HttpSessionRequiredException.否则转下一步<br>  3.如果在隐含模型中不存在xxx属性,xxx也不是会话属性,则创建入参对象的实例,然后在用请求消息填充.<br>因为我们对user标注了@SessionAttributes,而在隐含模型和Session中均无该属性,则会抛出异常.<br>所以我们只需要添加一个标注了@ModelAttribute(“user”)的方法,让其在隐含模型中添加user属性即可.<br>@SessionAttributes除了可以使用value指定属性名外,还可以使用types指定模型属性对象类型,两者联合使用为并集关系,可以指定多个属性或类型,中间用逗号隔开:</li><li>@SessionAttributes(types=”User.class):将所有User类型的属性添加到会话中</li><li>@SessionAttributes(value={“user1”,”user2”}, types=”Dept.class”):将名为user1,user2的模型属性添加到会话中,将所有类为Dept的模型属性添加到会话中</li></ul><h2 id="处理方法的数据绑定"><a href="#处理方法的数据绑定" class="headerlink" title="处理方法的数据绑定"></a>处理方法的数据绑定</h2><h3 id="数据绑定流程"><a href="#数据绑定流程" class="headerlink" title="数据绑定流程"></a>数据绑定流程</h3><p><img src="../../../../img/Spring/DataBinding.png" alt="数据绑定">  </p><p>数据绑定的核心部件是DataBinder，SpringMVC将ServletRequest对象以及处理方法的入参对象实例传递给DataBinder，DataBinder首先调用装配在Spring Web上下文中的ConversionService组件进行数据类型转换，数据格式转换等工作，将ServletRequest中的消息填充到对象，然后调用Validator组件对已经绑定的请求消息数据的入参进行合法性检验，最后生成的数据绑定BindingResult对象。BindingResultSet对象包含了完成数据绑定的入参对象，还包含相应的校验错误的对象。SpringMVC抽取BindingResult中的入参对象以及校验错误对象，将他们赋给处理方法的相应入参。</p><h3 id="数据转换"><a href="#数据转换" class="headerlink" title="数据转换"></a>数据转换</h3><p>Spring在核心模块添加了通用转换类型模块，位于org.springframework.core.convert包中.  </p><h4 id="ConversionService"><a href="#ConversionService" class="headerlink" title="ConversionService"></a>ConversionService</h4><p>ConversionService是Spring类型转化体系的核心接口,定义了以下4种方法.</p><ul><li>boolean canConvert(Class&lt;?&gt;sourceType,Class&lt;?&gt;targetType):判断是否可以将一个Java类转换为另一个Java类.</li><li>Boolean canConvert(TypeDescriptor sourceType,TypeDescriptor targetType):转换的类将以成员变量的方式出现在宿主类中.</li><li><t> T convert(Object source,Class<t> targetType):将原类型对象转化为目标类对象.</t></t></li><li>Object convert(Object source,TypeDescriptor sourceType,TypeDescriptor targetType):将原类型转换为目标类型,此时往往会用到所在宿主类的上下文信息.<br>可以利用org.springframework.context.support.ConversionServiceFactoryBean在Spring的上下文中定义一个ConversionService.可如下配置:<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id=&quot;conversionService&quot; class=&quot;org.springframework.format.support.FormattingConversionServiceFactoryBean&quot;/&gt;</span><br></pre></td></tr></table></figure></li></ul><p>该Factory穿件的ConverSionService内部已经包含了许多转换器,可以完成大部分类型的JAVA类转换.如果需要使用的自己的转换器,可以通过ConversionServiceFactory的converts属性注册自定义转换器.代码如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> &lt;!--使用自定义转换器--&gt;</span><br><span class="line">&lt;bean id=&quot;conversionService&quot; class=&quot;org.springframework.format.support.ConversionServiceFactoryBean&quot;&gt;</span><br><span class="line">    &lt;property name=&quot;converters&quot;&gt;</span><br><span class="line">        &lt;list&gt;</span><br><span class="line">            &lt;bean class=&quot;com.domain.StringToUserConverter1&quot;/&gt;</span><br><span class="line">            &lt;bean class=&quot;com.domain.StringToUserConverter2&quot;/&gt;</span><br><span class="line">        &lt;/list&gt;</span><br><span class="line">    &lt;/property&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure></p><h4 id="在SpringMVC中使用ConversionService"><a href="#在SpringMVC中使用ConversionService" class="headerlink" title="在SpringMVC中使用ConversionService"></a>在SpringMVC中使用ConversionService</h4><p>我们在处理User类型的入参时,希望将请求参数中格式为<username>:<password>:<realname>的字符串转换为user对象.这时我们需要自定义一个负责将String转为User对象的自定义转化器,需要实现Converter&lt;S,T&gt;接口:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">package com.domain;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import org.springframework.core.convert.converter.Converter;</span><br><span class="line"></span><br><span class="line">public class StringToUserConverter implements Converter&lt;String,User&gt; &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public User convert(String s) &#123;</span><br><span class="line">        User user=new User();</span><br><span class="line">        if(s!=null)&#123;</span><br><span class="line">            String[] items=s.split(&quot;:&quot;);//将&lt;UserName&gt;:&lt;password&gt;:&lt;realName&gt;格式的串转为User对象</span><br><span class="line">            user.setUserName(items[0]);</span><br><span class="line">            user.setPassword(items[1]);</span><br><span class="line">            user.setRealName(items[2]);</span><br><span class="line">        &#125;</span><br><span class="line">        return user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></realname></password></username></p><p>然后,我们将其安装到Spring上下文中,如下所示:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;mvc:annotation-driven  conversion-service=&quot;conversionService&quot;/&gt;</span><br><span class="line"></span><br><span class="line">     &lt;!--使用自定义转换器--&gt;</span><br><span class="line">    &lt;bean id=&quot;conversionService&quot; class=&quot;org.springframework.format.support.ConversionServiceFactoryBean&quot;&gt;</span><br><span class="line">        &lt;property name=&quot;converters&quot;&gt;</span><br><span class="line">            &lt;list&gt;</span><br><span class="line">                &lt;bean class=&quot;com.domain.StringToUserConverter&quot;/&gt;</span><br><span class="line">            &lt;/list&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br></pre></td></tr></table></figure></p><p>使用mvc命名空间&lt;mvc:annotation-driven /&gt;可以简化配置.默认创造一个DefaultAnnotationHandlerMapping和一个RequestMappingHandlerAdapter实例.此外,&lt;mvc:annotation-driven /&gt;标签还会注册一个默认的ConversionService,即FormattingConversionServiceFactoryBean,以满足大部分的转换需求.而我们自定义转换类时,则需要自己显示定义一个ConversionService覆盖其中的默认实现.通过设置其的conversion-service来实现.<br>装配好StringToUserConvert之后,就可以在控制器中使用该方法了:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//自定义了StringToUserConverter转换器,则可以会自动处理请求如</span><br><span class="line">  // localhost://8080/mvc/user/handle12.html?user=tom:123456:jack</span><br><span class="line">  // @RequestParam自动将请求中的user绑定到函数参数中的user上</span><br><span class="line">  @RequestMapping(&quot;/handle12&quot;)</span><br><span class="line">  public String handle12(@RequestParam(&quot;user&quot;)User user,ModelMap modelMap)&#123;</span><br><span class="line">      modelMap.put(&quot;user&quot;,user);</span><br><span class="line">      return &quot;/user/showUser&quot;;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><h3 id="数据格式化"><a href="#数据格式化" class="headerlink" title="数据格式化"></a>数据格式化</h3><p>Spring使用转换器进行了原类到目标类的转换,但是并没有提供输入输出信息的格式化工作.例如,从客户端传来的数据,像日期,时间,数字,货币都有固定的格式.Spring使用了一个格式化框架,位于org.springframework.format包中.在Spring中使用FormattingConversionServiceFactoryBean,通过该工厂类,也可以实现自定义转换器,所以我们只需要在配置文件中修改一下,将ConversionServiceFactoryBean替换为FormattingConversionService类即可.此外 <a href="mvc:annotation-driven/" target="_blank" rel="noopener">mvc:annotation-driven/</a> 默认创建的ConversionService的实例就是FormattingConversionService.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"> &lt;!--使用自定义转换器,将ConversionService换位FormattingConversionService--&gt;</span><br><span class="line">&lt;bean id=&quot;conversionService&quot; class=&quot;org.springframework.format.support.FormattingConversionServiceFactoryBean&quot;&gt;</span><br><span class="line">    &lt;property name=&quot;converters&quot;&gt;</span><br><span class="line">        &lt;list&gt;</span><br><span class="line">            &lt;bean class=&quot;com.domain.StringToUserConverter&quot;/&gt;</span><br><span class="line">        &lt;/list&gt;</span><br><span class="line">    &lt;/property&gt;</span><br></pre></td></tr></table></figure></p><p>人后就可以使用注解驱动格式化实例<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public class User&#123;</span><br><span class="line">    @DateTimeFormat(pattern = &quot;yyyy-MM-dd&quot;)//将类似1997-11-15的字符串转化到Date类型的birthday中.</span><br><span class="line">    private Date birthday;</span><br><span class="line"></span><br><span class="line">    @NumberFormat(style= NumberFormat.Style.NUMBER,pattern = &quot;#,###&quot;)// 将类似4,512的字符串转化到int类型的salary中</span><br><span class="line">    private int salary;</span><br><span class="line">    .......</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p> @DateTimeFormat 注解有3个互斥可选的属性：style，pattern和iso。属性style允许我们使用两个字符的字符串来表明怎样格式化日期和时间。第一个字符表明了日期的格式，第二个字符表明了时间的格式。下面的表格中列出了可用的选择以及相应的输出的例子：</p><ul><li>短格式（这是缺省值）     SS        8/30/64 11:24 AM</li><li>中等格式     MM       Aug 30,1964 11:24:41 AM</li><li>长格式     LL     August 30,1964 11:24:41 AM CDT</li><li>完整格式     FF       Sunday, August 30,1964 11:24:41 AM CDT</li><li>使用短横线省略日期或时间     M-     Aug 30,1964</li></ul><p>Pattern 属性允许我们使用自定义的日期/时间格式。该属性的值遵循java标准的date/time格式规范。缺省的该属性的值为空，也就是不进行特殊的格式化。如果需要带上时分秒pattern的值就是yyyy-MM-dd HH:mm:ss 这种格式  </p><p>最后，可以使用org.springframework.format.annotation.DateTimeFormat.ISO枚举值来使用ISO标准的日期/时间格式来格式化:</p><ul><li>DateTimeFormat.ISO.DATE       2000-10-31</li><li>DateTimeFormat.ISO.TIME       01:30:00.000-05:00（最后的是时区)</li><li>DateTimeFormat.ISO.DATE_TIME     2000-10-31 01:30:00.000-05:00.</li><li>DateTimeFormat.ISO.NONE     不进行ISO标准的格式化<br>类似@DateTimeFormat(iso = DateTimeFormat.ISO.DATE)</li></ul><h3 id="数据校验"><a href="#数据校验" class="headerlink" title="数据校验"></a>数据校验</h3><p>在业务逻辑执行前,必须保证数据是合法的,比如时间必须是过去的,工资必须是正数等.</p><h4 id="JSR-303注解"><a href="#JSR-303注解" class="headerlink" title="JSR-303注解"></a>JSR-303注解</h4><p>JSR-303通过在Bean属性上标注类似@NotNull的注解来对Bean进行校验.所有注释如下:  </p><ul><li>@Null    被注释的元素必须为 null</li><li>@NotNull    被注释的元素必须不为 null</li><li>@AssertTrue    被注释的元素必须为 true</li><li>@AssertFalse    被注释的元素必须为 false</li><li>@Min(value)    被注释的元素必须是一个数字，其值必须大于等于指定的最小值</li><li>@Max(value)    被注释的元素必须是一个数字，其值必须小于等于指定的最大值</li><li>@DecimalMin(value)    被注释的元素必须是一个数字，其值必须大于等于指定的最小值</li><li>@DecimalMax(value)    被注释的元素必须是一个数字，其值必须小于等于指定的最大值</li><li>@Size(max, min)    被注释的元素的大小必须在指定的范围内</li><li>@Digits (integer, fraction)    被注释的元素必须是一个数字，其值必须在可接受的范围内</li><li>@Past    被注释的元素必须是一个过去的日期</li><li>@Future    被注释的元素必须是一个将来的日期</li><li>@Pattern(value)    被注释的元素必须符合指定的正则表达式<br>Hibernate Validator也实现了JSR-303,并且还扩展了注解:  </li><li>@Email    被注释的元素必须是电子邮箱地址</li><li>@Length    被注释的字符串的大小必须在指定的范围内</li><li>@NotEmpty    被注释的字符串的必须非空</li><li>@Range    被注释的元素必须在合适的范围内</li></ul><h4 id="Spring校验框架"><a href="#Spring校验框架" class="headerlink" title="Spring校验框架"></a>Spring校验框架</h4><p>Spring通过DataBinder在进行数据绑定的同时,调用校验框架完成数据校验工作.SpringMVC中,可以直接通过注解驱动的方式进行数据校验.<br>Spring的org.springframework.validation是框架校验包的所在.LocalValidatorFactoryBean既实现了Spring的Validator接口,有实现的JSR-303的Validator的接口.需要在Spring中定义一个LocalValidatorFactoryBean.代码如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id=&quot;validator&quot; class=&quot;org.springframework.validation.beanvalidation.LocalValidatorFactoryBean&quot;&gt;</span><br></pre></td></tr></table></figure></p><h4 id="SpringMVC的数据校验"><a href="#SpringMVC的数据校验" class="headerlink" title="SpringMVC的数据校验"></a>SpringMVC的数据校验</h4><p> &lt;mvc:annotation-driven /&gt; 会默认装配一个LocalValidatorFactoryBean,通过在处理入参的方法上标注@Valid注解,就可以让SpringMVC在完成数据绑定之后执行数据校验.<br>代码如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">public class User &#123;</span><br><span class="line">    private String userId;</span><br><span class="line"></span><br><span class="line">     //@Pattern(regexp = &quot;w&#123;4,30&#125;&quot;)//通过正则表达式校验,匹配4-30个班含数字,字母,下划线的字符</span><br><span class="line">    @Size(min = 6, max = 12, message = &quot;姓名必须大于6个字符，小于13个字符！&quot;)</span><br><span class="line">    private String userName;</span><br><span class="line"></span><br><span class="line">    @Size(min = 6, max = 16, message = &quot;密码必须大于6个字符，小于17个字符！&quot;)</span><br><span class="line">    //@Pattern(regexp = &quot;S&#123;6,30&#125;&quot;)//通过正则表达式校验,匹配6-30个非空字符</span><br><span class="line">    private String password;</span><br><span class="line"></span><br><span class="line">    @Length(min = 2,max = 100)</span><br><span class="line">    private String realName;</span><br><span class="line"></span><br><span class="line">    @Past//表示时间值必须在过去</span><br><span class="line">    //@DateTimeFormat(pattern = &quot;yyyy-MM-dd&quot;)</span><br><span class="line">    @DateTimeFormat(iso = DateTimeFormat.ISO.DATE)</span><br><span class="line">    private Date birthday;</span><br><span class="line"></span><br><span class="line">    @DecimalMin(value = &quot;1000&quot;)</span><br><span class="line">    @DecimalMax(value = &quot;10000&quot;)</span><br><span class="line">    @NumberFormat(style= NumberFormat.Style.NUMBER,pattern = &quot;#,###&quot;)</span><br><span class="line">    private int salary;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在user类属性上标注了校验注解之后,我们可以在UserController中添加一个处理方法:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">@RequestMapping(&quot;/handle13&quot;)</span><br><span class="line">    public String handle13(@Valid @ModelAttribute(&quot;user13&quot;)User user, BindingResult bindingResult)&#123;</span><br><span class="line">        if (bindingResult.hasErrors())&#123;//判断是否有错误</span><br><span class="line">            return &quot;/user/register3&quot;;</span><br><span class="line">        &#125;else &#123;</span><br><span class="line">            return &quot;user/createSuccess&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @RequestMapping(value = &quot;/register3&quot;)</span><br><span class="line">    public String register3() &#123;</span><br><span class="line">//        User user=new User();//用于转换到form表单</span><br><span class="line">//        new ModelAndView(&quot;user13&quot;).addObject(user);</span><br><span class="line">        return &quot;/user/register3&quot;;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>在标注了JSR-303注解的表单/命令对象前标注一个@Valid,SpringMVC框架将在请求数据绑定到该入参之后,就会调用校验框架根据注解声明的校验规则进行校验.前一个表单/命令对象的结果保存在其后的入参中,这个保存校验结果的入参必须为BindResult或Errors类型.这两个都位于org.springframework.validation中.所以,需要校验的表单/命令对象和其绑定的结果对象或者错误对象是成对出现的,他们之间不予许出现其他的入参.</p><h4 id="获取校验结果"><a href="#获取校验结果" class="headerlink" title="获取校验结果"></a>获取校验结果</h4><p>在表单/命令对象类的属性上标注了校验注解之后,在处理方法对应的入参前面添加@Valid注解,SpringMVC就会走动实施校验并且将结果保存在被校验对象入参之后的BindingResult或Errors入参中.<br>BindingResult与Errors常用方法:</p><ul><li>boolean hasErrors():是都有校验错误</li><li>FieldError getFieldError(String Field):根据属性名获取对应的校验错误</li><li>List<fielderror>getFieldErrors:获取所有属性的校验错误</fielderror></li><li>Object getFieldValue(String field):获取属性值</li><li>int getErrorCount():获取错误数量</li></ul><h4 id="在页面中显式错误"><a href="#在页面中显式错误" class="headerlink" title="在页面中显式错误"></a>在页面中显式错误</h4><p>SpringMVC除了将错误保存到了BindingResult或Errors,还将所有对象保存到了隐含模型中,所以,他们始终可以在隐含模型中获取.隐含模型总的数据最后将通过HttpServletRequest的属性暴露给JSP视图.<br>首先,对SpringMVC从输出.输入层进行分析:<br><img src="../../../../img/Spring/SpringMVCDataFlowDiagram.png" alt="SpringMVCDataFlowDiagram">  </p><ol><li>Http报文到达Web服务器,Web服务器将其封装成为一个HttpServletRequest对象.</li><li>SpringMVC框架截获这个HttpServletRequest对象</li><li>SpringMVC创造一个隐含模型对象,作为处理本次请求的上下文数据存放处.</li><li>SpringMVC将HttpServletRequest对象数据绑定到处理方法入参对象中(表单/命令对象)</li><li>将错误信息绑定到隐含模型</li><li>将本次请求对象的隐含信息放到HttpServletRequest属性列表,将其暴露给视图对象</li><li>视图对象将已经存放在HttpServletRequest属性列表中的数据模型进行渲染</li><li>将渲染后的Http响应报文发送到客户端</li></ol><p>在JSP页面中可以使用Spring标签&lt;form:errors path=”propName”/&gt;显示错误信息<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ taglib prefix=&quot;form&quot; uri=&quot;http://www.springframework.org/tags/form&quot; %&gt;</span><br><span class="line">&lt;%--</span><br><span class="line">  Created by IntelliJ IDEA.</span><br><span class="line">  User: watermelon</span><br><span class="line">  Date: 18-5-4</span><br><span class="line">  Time: 下午8:15</span><br><span class="line">  To change this template use File | Settings | File Templates.</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot; pageEncoding=&quot;UTF-8&quot;%&gt;</span><br><span class="line">&lt;%@taglib uri=&quot;http://java.sun.com/jsp/jstl/core&quot; prefix=&quot;c&quot; %&gt;</span><br><span class="line">&lt;%@ taglib prefix=&quot;form&quot; uri=&quot;http://www.springframework.org/tags/form&quot; %&gt;</span><br><span class="line">&lt;%@ taglib prefix=&quot;c&quot;      uri=&quot;http://java.sun.com/jsp/jstl/core&quot; %&gt;</span><br><span class="line">&lt;%@ taglib prefix=&quot;fmt&quot;  uri=&quot;http://java.sun.com/jsp/jstl/fmt&quot; %&gt;</span><br><span class="line">&lt;jsp:useBean id=&quot;user13&quot; class=&quot;com.domain.User&quot; scope=&quot;request&quot;/&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;新增用户&lt;/title&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        .errorClass&#123;color:red&#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;form:form modelAttribute=&quot;user13&quot;  action=&quot;/mvc/user/handle13.html&quot;&gt;</span><br><span class="line">    &lt;form:errors path=&quot;*&quot; cssClass=&quot;errorClass&quot; element=&quot;div&quot;/&gt;</span><br><span class="line">    &lt;table&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;td&gt;用户名：&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;</span><br><span class="line">                &lt;form:errors path=&quot;userName&quot; cssClass=&quot;errorClass&quot; element=&quot;div&quot;/&gt;</span><br><span class="line">                &lt;form:input path=&quot;userName&quot;  /&gt;</span><br><span class="line">            &lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;td&gt;密码：&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;</span><br><span class="line">                &lt;form:errors path=&quot;password&quot; cssClass=&quot;errorClass&quot;  element=&quot;div&quot;/&gt;</span><br><span class="line">                &lt;form:password path=&quot;password&quot; /&gt;</span><br><span class="line">            &lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;td&gt;姓名：&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;</span><br><span class="line">                &lt;form:errors  path=&quot;realName&quot; cssClass=&quot;errorClass&quot; element=&quot;div&quot;/&gt;</span><br><span class="line">                &lt;form:input path=&quot;realName&quot; /&gt;</span><br><span class="line"></span><br><span class="line">            &lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;td&gt;生日：&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;</span><br><span class="line">                &lt;form:errors path=&quot;birthday&quot; cssClass=&quot;errorClass&quot; element=&quot;div&quot;/&gt;</span><br><span class="line">                &lt;form:input path=&quot;birthday&quot; /&gt;</span><br><span class="line">            &lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;td&gt;工资：&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;</span><br><span class="line">                &lt;form:errors path=&quot;salary&quot; cssClass=&quot;errorClass&quot; element=&quot;div&quot;/&gt;</span><br><span class="line">                &lt;form:input path=&quot;salary&quot; /&gt;</span><br><span class="line">            &lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;td colspan=&quot;2&quot;&gt;&lt;input type=&quot;submit&quot; name=&quot;提交&quot;/&gt;&lt;/td&gt;</span><br><span class="line">        &lt;/tr</span><br><span class="line">    &lt;/table&gt;</span><br><span class="line">&lt;/form:form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p><p>通过&lt;form:errors path=”*”/&gt;在顶部显示全部校验错误信息.使用&lt;form:errors path=”propName”/&gt;显示某个属性的检验错误信息.<br>需要注意的是,使用&lt;form:form modelAttribute=”user13”  action=”/mvc/user/handle13.html”&gt;,我们会从模型中调用user13属性.但是一开始报错Neither BindingResult nor plain target object for bean name ‘user13’ available as request attribute.查看博客后发现Spring:form标签源码是<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Object target = requestContext.getModelObject(beanName);</span><br><span class="line">if (target == null) &#123;</span><br><span class="line">throw new IllegalStateException(&quot;Neither BindingResult nor plain target object for bean name &apos;&quot; +</span><br><span class="line">beanName + &quot;&apos; available as request attribute&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>我直接对register3.html页面请求,此时,模型中没有user13属性,那么则会抛出异常.<br>所以,需要在页面上加入&lt;jsp:useBean id=”user13” class=”com.domain.User” scope=”request”/&gt;.<br><a href="jsp:userbean" target="_blank" rel="noopener">jsp:userbean</a>的执行原理是:”首先在指定的域范围内查找指定名称的JavaBean对象，如果存在则直接返回该JavaBean对象的引用，如果不存在则实例化一个新的JavaBean对象并将它以指定的名称存储到指定的域范围中。所以模型中会添加user13属性,则消除报错.</p><h2 id="视图与试图解析器"><a href="#视图与试图解析器" class="headerlink" title="视图与试图解析器"></a>视图与试图解析器</h2><p>请求处理方法在执行完成后,最后会返回一个ModelAndView对象.对弈那些返回String,View,ModelMap的处理方法,SpringMVC也会将他们包装成为一个ModelAndView对象,该对象包含了视图逻辑名和模型对象信息.SpringMVC借助视图解析器(ViewResolver)来得到最终的视图对象(View),这可能是我们常见的JSP视图,还可以是PDF,Excel,XML,JSON等等各种形式的视图.</p><h3 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h3><p>视图的作用是渲染数据模型,将模型里的数据以不同的方式呈现给用户.常见技术有JSP,还有Excel,PDF等等.<br>试图对象是一个Bean,通常情况下,视图对象是一个Bean.对于不同类型的视图,有不同的View实现类:<br><img src="../../../../img/Spring/SpringMVCView.png" alt="SpringMVCView">  </p><h3 id="视图解析器"><a href="#视图解析器" class="headerlink" title="视图解析器"></a>视图解析器</h3><p>SpringMVC中为逻辑视图名的解析提供了不同的策略,可以在SpringWeb上下文中配置一种或者多种不同的策略,并且指定他们的先后策略.<br><img src="../../../../img/Spring/SpringMVCViewResolver.png" alt="SpringMVCViewResolver"><br>用户可以选择一种或多种视图解析器,每一个解析器都有一个orderNo属性,可以用来指定优先级,数值越小优先级越大.<strong>SpringMVC会按照给定优先级的顺序使用视图解析器对视图进行解析,直到解析成功返回试图对象,否侧抛出ServletException</strong>.</p><h3 id="Spring表单标签"><a href="#Spring表单标签" class="headerlink" title="Spring表单标签"></a>Spring表单标签</h3><p>自己有时间看看,记一下</p><h3 id="输出Excel"><a href="#输出Excel" class="headerlink" title="输出Excel"></a>输出Excel</h3><p>输出Excel,需要扩展Spring的AbstractorXlsView,实现buildExcelDocument90方法,在方法中使用数据模型构建Excel文档.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">public class UserListExcelView extends AbstractXlsView&#123;</span><br><span class="line">    @Override</span><br><span class="line">    protected void buildExcelDocument(Map&lt;String, Object&gt; map, Workbook workbook, HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse) throws Exception &#123;</span><br><span class="line">        httpServletResponse.setHeader(&quot;Content-Disposition&quot;,&quot;attachment;filename=&quot;+new String(&quot;用户列表.xls&quot;.getBytes(),&quot;iso8859-1&quot;));//excel文档编码必须为iso-8859-1,否则乱码.attachment表示使用附件下载</span><br><span class="line"></span><br><span class="line">        List&lt;User&gt; users=(List&lt;User&gt;)map.get(&quot;userList&quot;);</span><br><span class="line">        HSSFSheet sheet=(HSSFSheet)workbook.createSheet(&quot;users&quot;);</span><br><span class="line">        HSSFRow hssfRow=sheet.createRow(0);</span><br><span class="line">        hssfRow.createCell(0).setCellValue(&quot;账号&quot;);</span><br><span class="line">        hssfRow.createCell(1).setCellValue(&quot;姓名&quot;);</span><br><span class="line">        hssfRow.createCell(2).setCellValue(&quot;生日&quot;);</span><br><span class="line"></span><br><span class="line">        int rowNum=1;</span><br><span class="line">        for (User user:users)&#123;</span><br><span class="line">            HSSFRow row=sheet.createRow(rowNum++);</span><br><span class="line">            row.createCell(0).setCellValue(user.getUserName());</span><br><span class="line">            row.createCell(1).setCellValue(user.getRealName());</span><br><span class="line">            String createDate= DateFormatUtils.format(user.getBirthday(),&quot;yyyy-MM-dd&quot;);</span><br><span class="line">            row.createCell(2).setCellValue(createDate);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在mvc-servlet.xml文件中添加配置:<br>:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--输出excel--&gt;</span><br><span class="line">   &lt;bean class=&quot;org.springframework.web.servlet.view.BeanNameViewResolver&quot; p:order=&quot;10&quot;/&gt;</span><br><span class="line">   &lt;bean id=&quot;userListExcel&quot; class=&quot;com.controller.UserListExcelView&quot;/&gt;</span><br></pre></td></tr></table></figure></p><p>由于我们使得UserListExcelView代表的Excel视图对象是一个Bean,所以我们使用BeanNameViewResolver作为视图解析器.<br>在UserController中添加相应处理请求的方法:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">@RequestMapping(value = &quot;/showUserListByXls&quot;)</span><br><span class="line">    public String showUserListInExcel(ModelMap mm) &#123;</span><br><span class="line">        Calendar calendar = new GregorianCalendar();</span><br><span class="line"></span><br><span class="line">        List&lt;User&gt; userList = new ArrayList&lt;User&gt;();</span><br><span class="line">        User user1 = new User();</span><br><span class="line">        user1.setUserName(&quot;tom&quot;);</span><br><span class="line">        user1.setRealName(&quot;汤姆&quot;);</span><br><span class="line">        calendar.set(1980, 1, 1);</span><br><span class="line">        user1.setBirthday(calendar.getTime());</span><br><span class="line">        User user2 = new User();</span><br><span class="line">        user2.setUserName(&quot;john&quot;);</span><br><span class="line">        user2.setRealName(&quot;约翰&quot;);</span><br><span class="line">        user2.setBirthday(calendar.getTime());</span><br><span class="line">        userList.add(user1);</span><br><span class="line">        userList.add(user2);</span><br><span class="line">        mm.addAttribute(&quot;userList&quot;, userList);</span><br><span class="line">        return &quot;userListExcel&quot;;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><h3 id="输出JSON"><a href="#输出JSON" class="headerlink" title="输出JSON"></a>输出JSON</h3><p>SpringMVC的MappingJackson2JsonView借助jackson框架的ObjectMapper将数据模型转化为JSON格式输出.由于MappingJackson2JsonView也是一个Bean,所以可以使用BeanNameViewResolver进行解析,只需直接在配置文件配置即可:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--输出json  用modekey指定输出模型中的哪些属性--&gt;</span><br><span class="line">    &lt;bean id=&quot;userListJson&quot; class=&quot;org.springframework.web.servlet.view.json.MappingJackson2JsonView&quot;</span><br><span class="line">          p:modelKey=&quot;userList&quot;/&gt;</span><br></pre></td></tr></table></figure></p><p>默认情况下,MappingJakson2JsonView会将模型中的所有数据全部输出为JSON,我么可以使用ModelKeys指定模型中输出那些方法.<br>在userController中添加一个方法返回userListJson逻辑视图名,使其被BeanNameViewResolver解析.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">@RequestMapping(value = &quot;/showUserListByJson&quot;)</span><br><span class="line">    public String showUserListInJson(ModelMap mm) &#123;</span><br><span class="line">        Calendar calendar = new GregorianCalendar();</span><br><span class="line">        List&lt;User&gt; userList = new ArrayList&lt;User&gt;();</span><br><span class="line">        User user1 = new User();</span><br><span class="line">        user1.setUserName(&quot;tom&quot;);</span><br><span class="line">        user1.setRealName(&quot;汤姆&quot;);</span><br><span class="line">        calendar.set(1980, 1, 1);</span><br><span class="line">        user1.setBirthday(calendar.getTime());</span><br><span class="line">        User user2 = new User();</span><br><span class="line">        user2.setUserName(&quot;john&quot;);</span><br><span class="line">        user2.setRealName(&quot;约翰&quot;);</span><br><span class="line">        user2.setBirthday(calendar.getTime());</span><br><span class="line">        userList.add(user1);</span><br><span class="line">        userList.add(user2);</span><br><span class="line">        mm.addAttribute(&quot;userList&quot;, userList);</span><br><span class="line">        return &quot;userListJson&quot;;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>在浏览器输入localhost:8088/mvc/user/showUserListByJson.html杰克将模型中的userList属性对象以JSON格式出输出.</p><h2 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h2><p>SpringMVC为文件上传提供了直接支持,使用MultipartResolver实现.实现类为:CommonsMultipartResolver.</p><h3 id="配置MultipartResolver"><a href="#配置MultipartResolver" class="headerlink" title="配置MultipartResolver"></a>配置MultipartResolver</h3><p>使用CommonsMultipartResolver配置一个Multipart:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id=&quot;multipartResolver&quot; class=&quot;org.springframework.web.multipart.commons.CommonsMultipartResolver&quot;</span><br><span class="line">          p:defaultEncoding=&quot;UTF-8&quot;</span><br><span class="line">          p:maxUploadSize=&quot;524880&quot;</span><br><span class="line">          p:uploadTempDir=&quot;file:/home/watermelon/JavaWebDemo/mvc/src/main/resources/upload&quot;/&gt;</span><br><span class="line">    &lt;!-- 上传格式为UTF-8,默认为ISO-8859-1,文件上传大小为5mb,上传路径为resources下的upload文件夹--&gt;</span><br></pre></td></tr></table></figure></p><p>DefaultEncoding必须与JSP页面的pageEncoding相同,以便读取表单中的内容.uploadTempDir是上传过程中的临时文件夹,上传完毕后会自动清除临时文件夹中的内容.</p><h3 id="编写控制器与文件上传视图"><a href="#编写控制器与文件上传视图" class="headerlink" title="编写控制器与文件上传视图"></a>编写控制器与文件上传视图</h3><p>在UserController中添加用于处理上传图片的方法:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">//文件上传</span><br><span class="line">   @RequestMapping(&quot;/uploadPage&quot;)</span><br><span class="line">   public String uploadPage()&#123;</span><br><span class="line">       return &quot;/user/uploadPage&quot;;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   @RequestMapping(&quot;/upload&quot;)</span><br><span class="line">   public String upload(@RequestParam(&quot;name&quot;)String name, @RequestParam(&quot;file&quot;)MultipartFile file) throws Exception&#123;//上传文件自动保存到MultipartFile中</span><br><span class="line">       if(!file.isEmpty())&#123;</span><br><span class="line">           file.transferTo((new File(&quot;/home/watermelon/JavaWebDemo/mvc/src/main/resources/upload/&quot;+file.getOriginalFilename())));</span><br><span class="line">           return &quot;redirect:success.html&quot;;</span><br><span class="line">       &#125;else &#123;</span><br><span class="line">           return &quot;redirect:fail.html&quot;;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   @RequestMapping(&quot;/success&quot;)</span><br><span class="line">   public String success()&#123;</span><br><span class="line">       return &quot;user/success&quot;;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   @RequestMapping(&quot;/fail&quot;)</span><br><span class="line">   public String fail()&#123;</span><br><span class="line">       return &quot;user/fail&quot;;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><p>SpringMVC会上传文件自动绑定到MultipartFile中,MultipartFile提供了获取上传文件内容,文件名等方法,具体如下:</p><ul><li>byte[] getBytes():获取文件数据.</li><li>String getContentType():获取文件MIME类型,如image/pjpeg,text/plain等</li><li>InputStream getInputStream():获取文件流</li><li>String getName():获取表单中文件组的名字</li><li>String getOriginalFilename():获取上传文件原名</li><li>long getSize():获取文件字节大小,单位为byte.</li><li>boolean isEmpty():是否有上传的文件</li><li>void transferTo(File dest):将上传文件保存到指定的目标文件中.</li></ul><p>负责上传文件的表单和一般的表单有一些区别,表单的编码类型必须是multipart.form-data类型:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ taglib prefix=&quot;c&quot; uri=&quot;http://java.sun.com/jsp/jstl/core&quot; %&gt;</span><br><span class="line">&lt;%--</span><br><span class="line">  Created by IntelliJ IDEA.</span><br><span class="line">  User: watermelon</span><br><span class="line">  Date: 18-5-5</span><br><span class="line">  Time: 下午3:07</span><br><span class="line">  To change this template use File | Settings | File Templates.</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;上传文件&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;请选择上传文件&lt;/h1&gt;</span><br><span class="line">&lt;form method=&quot;post&quot; action=&quot;&lt;c:url value=&quot;/user/upload.html&quot;/&gt; &quot; enctype=&quot;multipart/form-data&quot;&gt;</span><br><span class="line">    &lt;input type=&quot;text&quot; name=&quot;name&quot;&gt;</span><br><span class="line">    &lt;input type=&quot;file&quot; name=&quot;file&quot;&gt;</span><br><span class="line">    &lt;input type=&quot;submit&quot; value=&quot;上传&quot;&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p><h2 id="静态资源"><a href="#静态资源" class="headerlink" title="静态资源"></a>静态资源</h2><p>REST风格的资源URL不希望带有.html或者.do等后缀,希望使用如</p><ul><li>/user/tom:用户tom的资源</li><li>/forum.java:java论坛板块资源<br>我们只需将web.xml中的DispatcherServlet配置修改,将<url-pattern>*.html</url-pattern>改为<url-pattern>/</url-pattern>,使其可以捕获所有请求.<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;servlet&gt;</span><br><span class="line">    &lt;servlet-name&gt;mvc&lt;/servlet-name&gt;</span><br><span class="line">    &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt;</span><br><span class="line">    &lt;load-on-startup&gt;1&lt;/load-on-startup&gt;</span><br><span class="line">  &lt;/servlet&gt;</span><br><span class="line">  &lt;servlet-mapping&gt;</span><br><span class="line">    &lt;servlet-name&gt;mvc&lt;/servlet-name&gt;</span><br><span class="line">    &lt;url-pattern&gt;/&lt;/url-pattern&gt;</span><br><span class="line">  &lt;/servlet-mapping&gt;</span><br></pre></td></tr></table></figure></li></ul><p>然后在mvc-servlet.xml中添加 &lt;mvc:default-servlet-handler /&gt; 即可.</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Spring-MVC&quot;&gt;&lt;a href=&quot;#Spring-MVC&quot; class=&quot;headerlink&quot; title=&quot;Spring MVC&quot;&gt;&lt;/a&gt;Spring MVC&lt;/h1&gt;&lt;p&gt;Spring MVC是围绕DispatcherServlet这个核心展开的,他负责截获请求并将其分配给相应的处理器.Spring MVC框架包括注解驱动器控制器,请求以及相应控制器,视图解析,本地化解析,上传文件解析,异常处理解析以及表单绑定等.&lt;br&gt;
    
    </summary>
    
      <category term="study" scheme="https://watermelon-lee.github.io/categories/study/"/>
    
    
      <category term="Spring" scheme="https://watermelon-lee.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Spring-cache初探</title>
    <link href="https://watermelon-lee.github.io/2018/04/26/Spring-cache/"/>
    <id>https://watermelon-lee.github.io/2018/04/26/Spring-cache/</id>
    <published>2018-04-26T02:45:37.000Z</published>
    <updated>2018-04-30T14:38:06.062Z</updated>
    
    <content type="html"><![CDATA[<h1 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>可以将缓存定义为一种存储机制,他将数据保存在某个地方,以一种更快的方式提供服务</p><h3 id="缓存命中率"><a href="#缓存命中率" class="headerlink" title="缓存命中率"></a>缓存命中率</h3><p>命中率=从缓存中读取的次数/(总读取次数{从缓存读取的次数+从慢速设备上读取的次数}),缓存策略一般命中率越高越好</p><h3 id="过期策略"><a href="#过期策略" class="headerlink" title="过期策略"></a>过期策略</h3><p>如果缓存满了,从缓存中移除数据的策略.常见的有LFU,LRU,FIFO  </p><ul><li>FIFO(first in first out):先进先出,先放入缓存的数据先移除</li><li>LRU(least recently used):最久未使用策略,即使用时间距离现在最久的那个数据被移除</li><li>LFU(least frequently used):最久最少使用策略,一定时间段内使用次数最少的那个数据被移除</li><li>TTL(time to live):存活期,即从缓存中创建时间点开始知道到期的一个时间点(不管在存活期内是否被访问过)</li><li>TTI(time ti idle):空闲期,数据多久没被访问就从缓存中移除<a id="more"></a><h3 id="使用Spring-Cache"><a href="#使用Spring-Cache" class="headerlink" title="使用Spring Cache"></a>使用Spring Cache</h3>首先自己自定义一个缓存,然后在将其与Spring Cache对比.<br>假如我们需要查询用户,为了避免多次访问数据库,我们会对其做一个缓存,以userId为键,userValue为值.当查询相同的userId时,程序直接从缓存中获取结果,否则更新缓存.<br>实体类User定义:<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">package com.cache.domain;</span><br><span class="line"></span><br><span class="line">import java.io.Serializable;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public class User implements Serializable&#123;</span><br><span class="line">    private String userId;</span><br><span class="line">    private String userName;</span><br><span class="line">    private int age;</span><br><span class="line"></span><br><span class="line">    public User(String userId) &#123;</span><br><span class="line">        this.userId = userId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getUserId() &#123;</span><br><span class="line">        return userId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setUserId(String userId) &#123;</span><br><span class="line">        this.userId = userId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getUserName() &#123;</span><br><span class="line">        return userName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setUserName(String userName) &#123;</span><br><span class="line">        this.userName = userName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int getAge() &#123;</span><br><span class="line">        return age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setAge(int age) &#123;</span><br><span class="line">        this.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>java缓存的对象与序列化是息息相关的,一般情况下,需要被缓存的实体类实现Serializable,只有实现了Serializable接口类,JVM才可以对其对象进行序列化.<br>接下来定义一个缓存管理器,负责实现缓存逻辑,支持对象的增加修改和删除,并支持泛型:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">package com.cache.mycache;</span><br><span class="line"></span><br><span class="line">import java.util.Map;</span><br><span class="line">import java.util.concurrent.ConcurrentHashMap;</span><br><span class="line"></span><br><span class="line">public class CacheManager&lt;T&gt; &#123;</span><br><span class="line">    private Map&lt;String,T&gt; cache=new ConcurrentHashMap&lt;String, T&gt;();</span><br><span class="line"></span><br><span class="line">    public T getValue(Object key)&#123;</span><br><span class="line">        return cache.get(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void addOrUpdateCache(String key,T value)&#123;</span><br><span class="line">        cache.put(key,value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void evictCache(String key)&#123;//按键值清除缓存</span><br><span class="line">        cache.remove(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void evictCache()&#123;//清除所有缓存</span><br><span class="line">        cache.clear();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在提供一个用户查询的服务类:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">package com.cache.mycache;</span><br><span class="line"></span><br><span class="line">import com.cache.domain.User;</span><br><span class="line"></span><br><span class="line">public class UserService &#123;</span><br><span class="line">    private CacheManager&lt;User&gt; cacheManager;</span><br><span class="line"></span><br><span class="line">    public UserService()&#123;</span><br><span class="line">        //构造一个缓存器</span><br><span class="line">        cacheManager=new CacheManager&lt;User&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public User getUserById(String userId)&#123;</span><br><span class="line">        //首先查询缓存</span><br><span class="line">        User result=cacheManager.getValue(userId);</span><br><span class="line">        if(result!=null)&#123;</span><br><span class="line">            System.out.println(&quot;get forum cache...&quot;+userId);</span><br><span class="line">            return result;</span><br><span class="line">        &#125;else &#123;</span><br><span class="line">            result=getForumDb(userId);</span><br><span class="line">            if(result!=null)&#123;</span><br><span class="line">                //将数据查询结果更新到</span><br><span class="line">                cacheManager.addOrUpdateCache(userId,result);</span><br><span class="line">            &#125;</span><br><span class="line">            return result;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void reload()&#123;</span><br><span class="line">        cacheManager.evictCache();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private User getForumDb(String userId)&#123;</span><br><span class="line">        System.out.println(&quot;real querying db...&quot;+userId);</span><br><span class="line">        return new User(userId);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>编写一个测试类:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">package com.cache.mycache;</span><br><span class="line"></span><br><span class="line">import com.cache.domain.User;</span><br><span class="line">import com.cache.mycache.UserService;</span><br><span class="line"></span><br><span class="line">public class UserMain &#123;</span><br><span class="line">    public static void main(String[] a)&#123;</span><br><span class="line">        UserService userService=new UserService();</span><br><span class="line"></span><br><span class="line">        //开始查询账号</span><br><span class="line">        userService.getUserById(&quot;001&quot;);//第一次查询,从数据库查询</span><br><span class="line">        userService.getUserById(&quot;001&quot;);//第二次查询,从缓存返回</span><br><span class="line"></span><br><span class="line">        //重置缓存</span><br><span class="line">        userService.reload();</span><br><span class="line">        System.out.println(&quot;after reload&quot;);</span><br><span class="line"></span><br><span class="line">        userService.getUserById(&quot;001&quot;);//再次查询,从数据库返回</span><br><span class="line">        userService.getUserById(&quot;001&quot;);//缓存返回</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>可以得到结果:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">real querying db...001</span><br><span class="line">get forum cache...001</span><br><span class="line">after reload</span><br><span class="line">real querying db...001</span><br><span class="line">get forum cache...001</span><br></pre></td></tr></table></figure></p><p>可以看出缓存可以正常工作,但是这种方式十分不优雅,缓存代码与业务代码高度耦合,业务代码中包含了大量缓存逻辑控制代码,下面使用Spring Cache来改进上述代码:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">package com.cache.simpleCache;</span><br><span class="line">import com.cache.domain.User;</span><br><span class="line">import org.springframework.cache.annotation.Cacheable;</span><br><span class="line">import org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line">@Service(&quot;userServiceBean&quot;)</span><br><span class="line">public class UserServiceBySpringCache&#123;</span><br><span class="line"></span><br><span class="line">    //使用一个名为users的缓存</span><br><span class="line">    @Cacheable(cacheNames = &quot;users&quot;)</span><br><span class="line">    public User getUserById(String userId)&#123;</span><br><span class="line">        //方法内部不考虑缓存逻辑,直接实现</span><br><span class="line">        System.out.println(&quot;执行用户业务方法查找&quot;+userId);</span><br><span class="line">        return getForumDb(userId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private User getForumDb(String userId)&#123;</span><br><span class="line">        System.out.println(&quot;从数据库中查找&quot;+userId);</span><br><span class="line">        return new User(userId);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>getUserById()方法标注了一个注解@Cacheable(cacheNames=”users”),当调用这个方法的时候,会先从缓存中匹配对象,如果存在,直接返回,如果不存在,则执行方法体内的逻辑,并且将返回值放入缓存中.对应缓存的key是userId,value就是userId对应的User对象.<br>在配置文件中配置支持注解缓存:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class="line">       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:cache=&quot;http://www.springframework.org/schema/cache&quot;</span><br><span class="line">       xmlns:p=&quot;http://www.springframework.org/schema/p&quot; xmlns:context=&quot;http://www.springframework.org/schema/context&quot;</span><br><span class="line">       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;cache:annotation-driven/&gt;</span><br><span class="line">    &lt;context:component-scan base-package=&quot;com.cache.simpleCache&quot;/&gt;</span><br><span class="line">    &lt;!--&lt;bean id=&quot;cacheService&quot; class=&quot;com.cache.simpleCache.UserServiceBySpringCache&quot;/&gt;--&gt;</span><br><span class="line">    &lt;bean id=&quot;cacheManager&quot; class=&quot;org.springframework.cache.support.SimpleCacheManager&quot;&gt;</span><br><span class="line">        &lt;property name=&quot;caches&quot;&gt;</span><br><span class="line">            &lt;set&gt;</span><br><span class="line">                &lt;bean class=&quot;org.springframework.cache.concurrent.ConcurrentMapCacheFactoryBean&quot; p:name=&quot;default&quot;/&gt;</span><br><span class="line">                &lt;bean class=&quot;org.springframework.cache.concurrent.ConcurrentMapCacheFactoryBean&quot; p:name=&quot;users&quot;/&gt;</span><br><span class="line">            &lt;/set&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure></p><p>Spring通过<a href="cache:annotation-driven/" target="_blank" rel="noopener">cache:annotation-driven/</a>就可以启动基于注解的缓存驱动,这个配置项默认了使用了一个名为cacheManager的缓存管理器.SimpleCacheManager是这个缓存管理器的默认实现,他通过对其属性caches的配置来实现刚刚自定义的缓存管理器逻辑.除了默认default缓存外,还自定义了一个名为users的缓存,使用了默认的内存存储方案concurrentMapCacheFactoryBean.接下来重写测试类,以观察结果:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">package com.cache.simpleCache;</span><br><span class="line"></span><br><span class="line">import org.springframework.context.ApplicationContext;</span><br><span class="line">import org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line">public class UserCacheMain &#123;</span><br><span class="line">    public static void main(String[] a)&#123;</span><br><span class="line">        ApplicationContext context=new ClassPathXmlApplicationContext(&quot;applicationContext.xml&quot;);</span><br><span class="line">        UserServiceBySpringCache userService=(UserServiceBySpringCache)context.getBean(&quot;userServiceBean&quot;);</span><br><span class="line"></span><br><span class="line">        System.out.println(&quot;first query&quot;);</span><br><span class="line">        userService.getUserById(&quot;me&quot;);</span><br><span class="line">        System.out.println(&quot;second query&quot;);</span><br><span class="line">        userService.getUserById(&quot;me&quot;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>结果为:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">first query</span><br><span class="line">执行用户业务方法查找me</span><br><span class="line">从数据库中查找me</span><br><span class="line">second query</span><br></pre></td></tr></table></figure></p><p>可以看出使用Spring cache成功,我们仅仅在userServiceBySpringCache中的Service上注解了一个@Cacheable就实现了基本缓存方案.使用Spring Cache十分简单,只需要两个步骤:</p><ul><li>缓存定义:确定需要缓存的方法和缓存策略</li><li>配置缓存:配置缓存</li></ul><p>##　Spring Cache抽象</p><h3 id="注解缓存"><a href="#注解缓存" class="headerlink" title="注解缓存"></a>注解缓存</h3><h4 id="Cacheable"><a href="#Cacheable" class="headerlink" title="@Cacheable"></a>@Cacheable</h4><p>@Cacheable是最重要的注解,它指定了返回值是可以被缓存的.缓存名是必须提供的,可用引号,Value或者cacheNames属性来定义.此外还可以定义多个缓存,在该类表中使用逗号分隔缓存名,并且用花括号括起来.例如:<code>@Cacheable(cacheNames={&quot;cache1&quot;,&quot;cache2&quot;}</code>  </p><h5 id="键生成器"><a href="#键生成器" class="headerlink" title="键生成器"></a>键生成器</h5><p>缓存的本质就是键值对集合.Spring提供了默认的SimpleKeyGenerator,使用一个符合键SimpleKey.规则为:  </p><ul><li>如果方法没有入参,使用SimpleKey.EMPTY为key</li><li>如果方法只有一个入参,则使用该入参作为key</li><li>如果方法有多个入参,则返回包含所有入参的一个SimpleKey<br>此外可以使用SpEL来指定自定义键,如:<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@Cacheable(cacheNames=&quot;users&quot; key=&quot;#user.getCode&quot;)</span><br><span class="line">public User GetUser(User user,boolean checkLogout)</span><br></pre></td></tr></table></figure></li></ul><p>上述函数有一个checkLogout用于区分用户是都注销,而我们不想使用其作为key的一部分,可以根据key属性指定为userCode.</p><h5 id="带条件的缓存"><a href="#带条件的缓存" class="headerlink" title="带条件的缓存"></a>带条件的缓存</h5><p>使用@Cacheable注解的Condition属性可以按条件来缓存.condition属性使用了SpEL表达式动态评估方法入参是否满足条件.<br>例如使用了@Cacheable声明的方法getUser(),我们启用一个条件:仅仅对年龄小于35的用户缓存<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public class UserService &#123;</span><br><span class="line">    private Map&lt;Integer, User&gt; users = new HashMap&lt;Integer, User&gt;();</span><br><span class="line">    &#123;</span><br><span class="line">        users.put(1, new User(&quot;1&quot;, &quot;w1&quot;,37));</span><br><span class="line">        users.put(2, new User(&quot;2&quot;, &quot;w2&quot;, 34));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Cacheable(value = &quot;users&quot;, condition = &quot;#user.age &lt; 35&quot;)</span><br><span class="line">    public User getUser(User user) &#123;</span><br><span class="line">        System.out.println(&quot;User with id &quot; + user.getUserId() + &quot; requested.&quot;);</span><br><span class="line">        return users.get(Integer.valueOf(user.getUserId()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="CachePut"><a href="#CachePut" class="headerlink" title="@CachePut"></a>@CachePut</h4><p>@CachePut与@Cacheable效果几乎一样,他首先执行方法,然后将返回值放入缓存.当希望更新数据,以方法返回值来更新缓存就可以使用该注解.@CachePut注解会强制执行方法而更新缓存,而@Cacheable会直接跳过方法从直接获取缓存,所以两者不可以同时使用.如:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@CachePut(cacheNames=&quot;book&quot;, key=&quot;#isbn&quot;)</span><br><span class="line">public Book updateBook(ISBN isbn, BookDescriptor descriptor)</span><br></pre></td></tr></table></figure></p><p>在更新操作后,缓存中的book对应的BookDescriptor为更新之后的值.</p><h4 id="CacheEvict"><a href="#CacheEvict" class="headerlink" title="@CacheEvict"></a>@CacheEvict</h4><p>@CacheEvict是@Cacheable的反向操作,负责从缓存中删除一个数据.@CacheEvict要求指定一个或多个缓存，使之都受影响。如:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@CacheEvict(cacheNames=&quot;users&quot;)</span><br><span class="line">public void removeUser(int id)&#123;</span><br><span class="line">    usersremove(id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>使用@CacheEvict即可从缓存中删除一个用户.同样的,@CacheEvict也提供了Condition和key属性.此外，还提供了两个额外的参数allEntries和beforeInvocation。allEntries表示是否需要清除缓存中的所有元素。默认为false，表示不需要。当指定了allEntries为true时，Spring Cache将忽略指定的key。而beforeInvocation可以改变清除操作的时间.平时都是方法执行完毕后清除缓存,如果方法抛出异常,则不会清除缓存.而指定beforeInvocation为true,则会在方法调用前清除缓存.</p><h4 id="Caching"><a href="#Caching" class="headerlink" title="@Caching"></a>@Caching</h4><p>@Caching是一个组注解,可以为一个方法定义提供基于@Cacheable,@CacheEvict,@CachePut的数组.假设我们定义了一个User,Member,Visitor三个实体类,User为抽象类,而member和Visitor为继承他的子类.<br>我们可以使用@Caching声明两个@Cacheable注解,使其指向不同的两个缓存:member和Visitor.然后根据两个@Cacheable注解定义的条件对方法中的参数进行检查,将对象存储在对应的缓存.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">package com.cache.caching;</span><br><span class="line"></span><br><span class="line">import com.cache.domain.User;</span><br><span class="line">import org.springframework.cache.annotation.Cacheable;</span><br><span class="line">import org.springframework.cache.annotation.Caching;</span><br><span class="line">import org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line">import java.util.HashMap;</span><br><span class="line">import java.util.Map;</span><br><span class="line"></span><br><span class="line">@Service(value = &quot;cacheGroupUserService&quot;)</span><br><span class="line">public class UserService &#123;</span><br><span class="line">    private Map&lt;Integer,User&gt; map=new HashMap&lt;Integer, User&gt;();</span><br><span class="line">    &#123;</span><br><span class="line">        map.put(1,new Member(&quot;1&quot;,&quot;member1&quot;));</span><br><span class="line">        map.put(2,new Visitor(&quot;2&quot;,&quot;visitor1&quot;));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Caching(cacheable = &#123;</span><br><span class="line">            @Cacheable(value = &quot;members&quot;,condition = &quot;#obj instanceof T(com.domain.Mamber)&quot;),</span><br><span class="line">            @Cacheable(value = &quot;visitor&quot;,condition = &quot;#obj instanceof T(com.domain.Visitor)&quot;),</span><br><span class="line">    &#125;)</span><br><span class="line">    public User getUser(User obj)&#123;</span><br><span class="line">        return map.get(Integer.valueOf(obj.getUserId()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="CacheConfig"><a href="#CacheConfig" class="headerlink" title="@CacheConfig"></a>@CacheConfig</h4><p>前面的注解都是基于方法的,假如我们在一个类中需要的缓存的方法注解属性一致,则需要一个个重复的添加.我们可以使用@CacheConfig来配置.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@CacheConfig(cacheNames=&quot;users&quot;,keyGenerator=&quot;MyKeyGenerator&quot;)</span><br><span class="line">public class UserService&#123;</span><br><span class="line">    @Cacheable</span><br><span class="line">    public User findA(User user)&#123;</span><br><span class="line">    ....</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    @Cacheable</span><br><span class="line">    public User findB(User user)&#123;</span><br><span class="line">    ....</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;缓存&quot;&gt;&lt;a href=&quot;#缓存&quot; class=&quot;headerlink&quot; title=&quot;缓存&quot;&gt;&lt;/a&gt;缓存&lt;/h1&gt;&lt;h2 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h2&gt;&lt;p&gt;可以将缓存定义为一种存储机制,他将数据保存在某个地方,以一种更快的方式提供服务&lt;/p&gt;
&lt;h3 id=&quot;缓存命中率&quot;&gt;&lt;a href=&quot;#缓存命中率&quot; class=&quot;headerlink&quot; title=&quot;缓存命中率&quot;&gt;&lt;/a&gt;缓存命中率&lt;/h3&gt;&lt;p&gt;命中率=从缓存中读取的次数/(总读取次数{从缓存读取的次数+从慢速设备上读取的次数}),缓存策略一般命中率越高越好&lt;/p&gt;
&lt;h3 id=&quot;过期策略&quot;&gt;&lt;a href=&quot;#过期策略&quot; class=&quot;headerlink&quot; title=&quot;过期策略&quot;&gt;&lt;/a&gt;过期策略&lt;/h3&gt;&lt;p&gt;如果缓存满了,从缓存中移除数据的策略.常见的有LFU,LRU,FIFO  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;FIFO(first in first out):先进先出,先放入缓存的数据先移除&lt;/li&gt;
&lt;li&gt;LRU(least recently used):最久未使用策略,即使用时间距离现在最久的那个数据被移除&lt;/li&gt;
&lt;li&gt;LFU(least frequently used):最久最少使用策略,一定时间段内使用次数最少的那个数据被移除&lt;/li&gt;
&lt;li&gt;TTL(time to live):存活期,即从缓存中创建时间点开始知道到期的一个时间点(不管在存活期内是否被访问过)&lt;/li&gt;
&lt;li&gt;TTI(time ti idle):空闲期,数据多久没被访问就从缓存中移除
    
    </summary>
    
      <category term="study" scheme="https://watermelon-lee.github.io/categories/study/"/>
    
    
      <category term="Spring" scheme="https://watermelon-lee.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Spring-ORM框架</title>
    <link href="https://watermelon-lee.github.io/2018/04/21/Spring-ORM/"/>
    <id>https://watermelon-lee.github.io/2018/04/21/Spring-ORM/</id>
    <published>2018-04-21T14:32:28.000Z</published>
    <updated>2018-04-30T14:37:30.200Z</updated>
    
    <content type="html"><![CDATA[<p>非常简单学习了一下Hibernate与Mybatis,两者给我的感受是Hibernate对于初学者上手很快,不需要自己写Sql语句,相比于Mybatis对于每一个实体类需要一个映射文件来说,它的使用十分快捷方便.但是在使用过程中出现的问题也更多,Hql语句定义问题啊,使用泛型BaseDao问题什么,自己对于Hibernate也完全不了解,出了Bug需要查阅许多博客.而使用Mybatis可以不用自己写Dao实现类,可以使用Mybatis的提供的MapperScannerConfigurer直接将映射接口转换为Spring容器的Bean.<br><a id="more"></a></p><h1 id="使用Hibernate"><a href="#使用Hibernate" class="headerlink" title="使用Hibernate"></a>使用Hibernate</h1><h2 id="使用注解配置"><a href="#使用注解配置" class="headerlink" title="使用注解配置"></a>使用注解配置</h2><p>使用配置注解的话就可以不用编写Hibernate映射文件,我认为注解更为便捷<br>配置文件如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE hibernate-mapping PUBLIC &quot;-//Hibernate/Hibernate Mapping DTD//EN&quot;</span><br><span class="line">&quot;http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd&quot;&gt;</span><br><span class="line">&lt;hibernate-mapping auto-import=&quot;true&quot; default-lazy=&quot;false&quot;&gt;</span><br><span class="line">&lt;class name=&quot;com.smart.domain.Forum&quot; table=&quot;t_forum&quot;&gt;</span><br><span class="line">&lt;id name=&quot;forumId&quot; column=&quot;forum_id&quot;&gt;</span><br><span class="line">&lt;generator class=&quot;assigned&quot; /&gt;</span><br><span class="line">&lt;/id&gt;</span><br><span class="line">&lt;property name=&quot;forumName&quot; column=&quot;forum_name&quot; /&gt;</span><br><span class="line">&lt;property name=&quot;forumDesc&quot; column=&quot;forum_desc&quot; /&gt;</span><br><span class="line">&lt;/class&gt;</span><br><span class="line">&lt;/hibernate-mapping&gt;</span><br></pre></td></tr></table></figure></p><p>该Forum实体类的映射文件等价于下面注解.<br>对Forum和Post两个实体类标记注解:<br>Forum:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">:@Entity</span><br><span class="line">@Table(name=&quot;t_forum&quot;)</span><br><span class="line">public class Forum implements Serializable&#123;</span><br><span class="line">@Id</span><br><span class="line">@Column(name = &quot;forum_id&quot;, nullable = true)</span><br><span class="line">private int forumId;</span><br><span class="line"></span><br><span class="line">@Column(name = &quot;forum_name&quot; ,nullable = true)</span><br><span class="line">private String forumName;</span><br><span class="line"></span><br><span class="line">@Column(name = &quot;forum_desc&quot; ,nullable = true)</span><br><span class="line">private String forumDesc;</span><br><span class="line"></span><br><span class="line">public String getForumDesc() &#123;</span><br><span class="line">return forumDesc;</span><br><span class="line">&#125;</span><br><span class="line">public void setForumDesc(String forumDesc) &#123;</span><br><span class="line">this.forumDesc = forumDesc;</span><br><span class="line">&#125;</span><br><span class="line">public int getForumId() &#123;</span><br><span class="line">return forumId;</span><br><span class="line">&#125;</span><br><span class="line">public void setForumId(int forumId) &#123;</span><br><span class="line">this.forumId = forumId;</span><br><span class="line">&#125;</span><br><span class="line">public String getForumName() &#123;</span><br><span class="line">return forumName;</span><br><span class="line">&#125;</span><br><span class="line">public void setForumName(String forumName) &#123;</span><br><span class="line">this.forumName = forumName;</span><br><span class="line">&#125;</span><br><span class="line">public String toString()&#123;</span><br><span class="line">return ToStringBuilder.reflectionToString(this);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Post:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">@Entity</span><br><span class="line">@Table(name=&quot;t_post&quot;)</span><br><span class="line">public class Post implements Serializable &#123;</span><br><span class="line">@Id</span><br><span class="line">@Column(name = &quot;post_id&quot;)</span><br><span class="line">private int postId;</span><br><span class="line"></span><br><span class="line">@Column(name = &quot;user_id&quot;)</span><br><span class="line">private int userId;</span><br><span class="line"></span><br><span class="line">@ManyToOne</span><br><span class="line">    @JoinColumn(name = &quot;topic_id&quot;)</span><br><span class="line">private Topic topic;</span><br><span class="line"></span><br><span class="line">@Lob</span><br><span class="line">@Basic(fetch = FetchType.LAZY)</span><br><span class="line">@Column(name = &quot;post_text&quot;,columnDefinition = &quot;CLOB&quot;)</span><br><span class="line">//@Type(type=&quot;org.springframework.orm.hibernate4.support.ClobStringType&quot;)</span><br><span class="line">private String postText;</span><br><span class="line"></span><br><span class="line">@Lob</span><br><span class="line">@Basic(fetch = FetchType.LAZY)</span><br><span class="line">@Column(name = &quot;post_attach&quot;,columnDefinition = &quot;BLOB&quot;)</span><br><span class="line">//@Type(type=&quot;org.springframework.orm.hibernate4.support.BlobByteArrayType&quot;)</span><br><span class="line">private byte[] postAttach;</span><br><span class="line"></span><br><span class="line">@Column(name = &quot;post_time&quot;)</span><br><span class="line">private Date postTime;</span><br><span class="line"></span><br><span class="line">public int getPostId() &#123;</span><br><span class="line">return postId;</span><br><span class="line">&#125;</span><br><span class="line">public void setPostId(int postId) &#123;</span><br><span class="line">this.postId = postId;</span><br><span class="line">&#125;</span><br><span class="line">public String getPostText() &#123;</span><br><span class="line">return postText;</span><br><span class="line">&#125;</span><br><span class="line">public void setPostText(String postText) &#123;</span><br><span class="line">this.postText = postText;</span><br><span class="line">&#125;</span><br><span class="line">public Date getPostTime() &#123;</span><br><span class="line">return postTime;</span><br><span class="line">&#125;</span><br><span class="line">public void setPostTime(Date postTime) &#123;</span><br><span class="line">this.postTime = postTime;</span><br><span class="line">&#125;</span><br><span class="line">public int getUserId() &#123;</span><br><span class="line">return userId;</span><br><span class="line">&#125;</span><br><span class="line">public void setUserId(int userId) &#123;</span><br><span class="line">this.userId = userId;</span><br><span class="line">&#125;</span><br><span class="line">public byte[] getPostAttach() &#123;</span><br><span class="line">return postAttach;</span><br><span class="line">&#125;</span><br><span class="line">public void setPostAttach(byte[] postAttach) &#123;</span><br><span class="line">this.postAttach = postAttach;</span><br><span class="line">&#125;</span><br><span class="line">public Topic getTopic() &#123;</span><br><span class="line">return topic;</span><br><span class="line">&#125;</span><br><span class="line">public void setTopic(Topic topic) &#123;</span><br><span class="line">this.topic = topic;</span><br><span class="line">&#125;</span><br><span class="line">public String toString()&#123;</span><br><span class="line">return ToStringBuilder.reflectionToString(this);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Topic:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line">package com.domain;</span><br><span class="line"></span><br><span class="line">import org.apache.commons.lang.builder.ToStringBuilder;</span><br><span class="line"></span><br><span class="line">import javax.persistence.*;</span><br><span class="line">import java.io.Serializable;</span><br><span class="line">import java.util.Date;</span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">@Entity</span><br><span class="line">@Table(name=&quot;t_topic&quot;)</span><br><span class="line">public class Topic implements Serializable &#123;</span><br><span class="line">private static final long serialVersionUID = 1L; </span><br><span class="line">@Id</span><br><span class="line">@Column(name = &quot;topic_id&quot;)</span><br><span class="line">private int topicId;</span><br><span class="line"></span><br><span class="line">@Column(name = &quot;user_id&quot;)</span><br><span class="line">private int userId;</span><br><span class="line"></span><br><span class="line">@Column(name = &quot;topic_title&quot;)</span><br><span class="line">private String topicTitle;</span><br><span class="line"></span><br><span class="line">@Column(name = &quot;topic_time&quot;)</span><br><span class="line">private Date topicTime;</span><br><span class="line"></span><br><span class="line">@ManyToOne</span><br><span class="line">    @JoinColumn(name = &quot;forum_id&quot;)</span><br><span class="line">private Forum forum;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@Column(name = &quot;topic_views&quot;)</span><br><span class="line">private int topicViews;</span><br><span class="line"></span><br><span class="line">@OneToMany(mappedBy = &quot;topic&quot;, cascade = CascadeType.ALL)</span><br><span class="line">private List&lt;Post&gt; posts;</span><br><span class="line"></span><br><span class="line">@Column(name = &quot;topic_replies&quot;)</span><br><span class="line">    private int topicReplies;</span><br><span class="line"></span><br><span class="line">public int getTopicId() &#123;</span><br><span class="line">return topicId;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void setTopicId(int topicId) &#123;</span><br><span class="line">this.topicId = topicId;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public Date getTopicTime() &#123;</span><br><span class="line">return topicTime;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void setTopicTime(Date topicTime) &#123;</span><br><span class="line">this.topicTime = topicTime;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public String getTopicTitle() &#123;</span><br><span class="line">return topicTitle;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void setTopicTitle(String topicTitle) &#123;</span><br><span class="line">this.topicTitle = topicTitle;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public int getTopicViews() &#123;</span><br><span class="line">return topicViews;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void setTopicViews(int topicViews) &#123;</span><br><span class="line">this.topicViews = topicViews;</span><br><span class="line">&#125;</span><br><span class="line">public String toString()&#123;</span><br><span class="line">return ToStringBuilder.reflectionToString(this);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public Forum getForum() &#123;</span><br><span class="line">return forum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void setForum(Forum forum) &#123;</span><br><span class="line">this.forum = forum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public int getUserId() &#123;</span><br><span class="line">return userId;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void setUserId(int userId) &#123;</span><br><span class="line">this.userId = userId;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public List&lt;Post&gt; getPosts() &#123;</span><br><span class="line">return posts;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void setPosts(List&lt;Post&gt; posts) &#123;</span><br><span class="line">this.posts = posts;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public int getTopicReplies() &#123;</span><br><span class="line">return topicReplies;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void setTopicReplies(int topicReplies) &#123;</span><br><span class="line">this.topicReplies = topicReplies;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>然后XML配置文件中使用packagesToScan来让Spring扫描加载带注释的实体类,可以使用逗号分隔,制定一系列的包名:<code>&lt;property name=&quot;packagesToScan&quot; value=&quot;com.domain&quot;/&gt;</code></p><h2 id="配置SessionFactory"><a href="#配置SessionFactory" class="headerlink" title="配置SessionFactory"></a>配置SessionFactory</h2><p>配置文件:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--制定Hibernate实体类映射,以及制定Hibernate配置属性--&gt;</span><br><span class="line">   &lt;bean id=&quot;sessionFactory&quot; class=&quot;org.springframework.orm.hibernate4.LocalSessionFactoryBean&quot; p:dataSource-ref=&quot;dataSource&quot; &gt;</span><br><span class="line">       &lt;property name=&quot;packagesToScan&quot; value=&quot;com.domain&quot;/&gt;</span><br><span class="line">       &lt;property name=&quot;hibernateProperties&quot;&gt;</span><br><span class="line">           &lt;props&gt;</span><br><span class="line">               &lt;prop key=&quot;hibernate.dialect&quot;&gt;</span><br><span class="line">                   org.hibernate.dialect.MySQLDialect</span><br><span class="line">               &lt;/prop&gt;</span><br><span class="line">               &lt;prop key=&quot;hibernate.show_sql&quot;&gt;</span><br><span class="line">                   true</span><br><span class="line">               &lt;/prop&gt;</span><br><span class="line">           &lt;/props&gt;</span><br><span class="line">       &lt;/property&gt;</span><br><span class="line">   &lt;/bean&gt;</span><br></pre></td></tr></table></figure></p><h2 id="使用HibernateTemplate"><a href="#使用HibernateTemplate" class="headerlink" title="使用HibernateTemplate"></a>使用HibernateTemplate</h2><p>基于模板类使用Hibernate是最简单的方式,按照Spring的风格,它提供了模板的支持类HibernateDaoSupport,并且通过getHibernateTemplate()方法像子类开放模板类实例的调用.配置如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id=&quot;hibernateTemplate&quot;</span><br><span class="line">          class=&quot;org.springframework.orm.hibernate4.HibernateTemplate&quot;</span><br><span class="line">          p:sessionFactory-ref=&quot;sessionFactory&quot;/&gt;</span><br></pre></td></tr></table></figure></p><p>在实际开发中,开发者一般会在Spring支持类的基础上编写自己的Dao基类,进行自己的封装,以获得泛型的支持,并提供自己的代理方法.Dao基类并不需要对模板类的所有方法进行代理,只需代理一些常用的方法(如CRUD),不常用的方法可在子模板类中实现.<br>一般实体类对应的Dao都必须有自己的CRUD操作,与其在每个实体Dao接口中重复定义这些方法,不如提供一个通用的Dao接口.<br>BaseDao:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">package com;</span><br><span class="line"></span><br><span class="line">import com.domain.Forum;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.orm.hibernate4.HibernateTemplate;</span><br><span class="line"></span><br><span class="line">import java.io.Serializable;</span><br><span class="line">import java.lang.reflect.ParameterizedType;</span><br><span class="line">import java.lang.reflect.Type;</span><br><span class="line"></span><br><span class="line">public class BaseDao&lt;T&gt; &#123;</span><br><span class="line"></span><br><span class="line">    private HibernateTemplate hibernateTemplate;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    public void setHibernateTemplate(HibernateTemplate hibernateTemplate) &#123;</span><br><span class="line">        this.hibernateTemplate = hibernateTemplate;</span><br><span class="line">    &#125;</span><br><span class="line">    private Class entityClass;</span><br><span class="line"></span><br><span class="line">    public BaseDao()&#123;</span><br><span class="line">//        Type genType = getClass().getGenericSuperclass();</span><br><span class="line">//        Type[] params = ((ParameterizedType) genType).getActualTypeArguments();</span><br><span class="line">//        entityClass = (Class) params[0];</span><br><span class="line"></span><br><span class="line">        //返回表示此 Class 所表示的实体类的 直接父类 的 Type。注意，是直接父类</span><br><span class="line">        //这里type结果是 com.dfsj.generic.GetInstanceUtil&lt;com.dfsj.generic.User&gt;</span><br><span class="line">            Type type = getClass().getGenericSuperclass();</span><br><span class="line">        // 判断 是否泛型</span><br><span class="line">            if( type instanceof ParameterizedType )&#123;</span><br><span class="line">                //getActualTypeArguments()返回表示此类型实际类型参数的Type对象的数组,这里我们只有一个泛型类.</span><br><span class="line">                // 当有多个泛型类时，数组的长度就不是1了</span><br><span class="line">                ParameterizedType pType = (ParameterizedType)type;</span><br><span class="line">                Type claz =  ((ParameterizedType) type).getActualTypeArguments()[0];</span><br><span class="line">                if( claz instanceof Class )&#123;</span><br><span class="line">                    this.entityClass = (Class&lt;T&gt;) claz;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public T get(int id)&#123;</span><br><span class="line">        return (T)hibernateTemplate.get(entityClass, id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void save(T entity)&#123;</span><br><span class="line">        hibernateTemplate.save(entity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void update(T entity)&#123;</span><br><span class="line">        hibernateTemplate.update(entity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public HibernateTemplate getHibernateTemplate() &#123;</span><br><span class="line">        return hibernateTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>ForumHibernateDao:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">package com.HibrenateDao;</span><br><span class="line"></span><br><span class="line">import com.BaseDao;</span><br><span class="line">import com.domain.Forum;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.orm.hibernate4.HibernateTemplate;</span><br><span class="line">import org.springframework.stereotype.Repository;</span><br><span class="line"></span><br><span class="line">import java.lang.reflect.ParameterizedType;</span><br><span class="line">import java.lang.reflect.Type;</span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">@Repository</span><br><span class="line">public class ForumHibernateDao extends BaseDao&lt;Forum&gt; &#123;//使用HQL查询</span><br><span class="line">    private HibernateTemplate hibernateTemplate;</span><br><span class="line"></span><br><span class="line">    public long getForumNum()&#123;</span><br><span class="line">        Object object=getHibernateTemplate().iterate(&quot;select count(forum.forumId) from Forum  forum&quot;).next();</span><br><span class="line">        return (Long)object;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public List&lt;Forum&gt; findForumByName(String forumName) &#123;</span><br><span class="line">        return (List&lt;Forum&gt;) getHibernateTemplate().find(</span><br><span class="line">                &quot;from Forum f where f.forumName like ?&quot;, forumName + &quot;%&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>PostHibernateDao:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">package com.HibrenateDao;</span><br><span class="line"></span><br><span class="line">import com.BaseDao;</span><br><span class="line">import com.domain.Forum;</span><br><span class="line">import com.domain.Post;</span><br><span class="line">import org.springframework.stereotype.Repository;</span><br><span class="line"></span><br><span class="line">@Repository</span><br><span class="line">public class PostHibernateDao extends BaseDao&lt;Post&gt; &#123;</span><br><span class="line"></span><br><span class="line">public void addPost(Post post) &#123;</span><br><span class="line">getHibernateTemplate().save(post);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public Post getPost(int postId) &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">return null;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在PostHibernateDao中addPost()中包含了Lob数据处理,需要在配置文件中定义LobHandler的Bean:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id=&quot;lobHandler&quot; class=&quot;org.springframework.jdbc.support.lob.DefaultLobHandler&quot;</span><br><span class="line">          lazy-init=&quot;true&quot;/&gt;</span><br></pre></td></tr></table></figure></p><p>TopicHibernateDao:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">package com.HibrenateDao;</span><br><span class="line"></span><br><span class="line">import com.BaseDao;</span><br><span class="line">import com.domain.Topic;</span><br><span class="line">import org.springframework.stereotype.Repository;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@Repository</span><br><span class="line">public class TopicHibernateDao extends BaseDao&lt;Topic&gt; &#123;</span><br><span class="line">public void addTopic(Topic topic) &#123;</span><br><span class="line">getHibernateTemplate().save(topic);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public Topic getTopicById(int topicId)&#123;</span><br><span class="line">return getHibernateTemplate().get(Topic.class, topicId);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="事务处理"><a href="#事务处理" class="headerlink" title="事务处理"></a>事务处理</h3><p>Spring的通用事务处理对于Hibernate完全通用,代码如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">@Transactional</span><br><span class="line">@Service(&quot;forumService&quot;)</span><br><span class="line">public class ForumHibernateService &#123;</span><br><span class="line">    private ForumHibernateDao forumHibernateDao;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private PostHibernateDao postHibernateDao;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    public void setForumHibernateDao(ForumHibernateDao forumHibernateDao) &#123;</span><br><span class="line">        this.forumHibernateDao = forumHibernateDao;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public void addForum(Forum forum)&#123;</span><br><span class="line">        forumHibernateDao.save(forum);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void updateForum(Forum forum)&#123;</span><br><span class="line">        forumHibernateDao.update(forum);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public Forum getForum(int id)&#123;</span><br><span class="line">        return (Forum)forumHibernateDao.get(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public long getForumNum()&#123;</span><br><span class="line">       return forumHibernateDao.getForumNum();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public List&lt;Forum&gt; findForumByName(String name)&#123;</span><br><span class="line">        return forumHibernateDao.findForumByName(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void addPost(Post post)&#123;</span><br><span class="line">        postHibernateDao.addPost(post);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在配置文件需要如下声明:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--事务处理--&gt;</span><br><span class="line">    &lt;bean id=&quot;transactionManager&quot; class=&quot;org.springframework.orm.hibernate4.HibernateTransactionManager&quot;</span><br><span class="line">          p:sessionFactory-ref=&quot;sessionFactory&quot;/&gt;</span><br><span class="line"></span><br><span class="line">    &lt;tx:annotation-driven/&gt;</span><br></pre></td></tr></table></figure></p><p>测试类编写:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">@Transactional</span><br><span class="line">public class HibernateTest  &#123;</span><br><span class="line">    ApplicationContext context=new ClassPathXmlApplicationContext(&quot;com/Hibernate/Hibernate.xml&quot;);</span><br><span class="line">    ForumHibernateService service=(ForumHibernateService)context.getBean(&quot;forumService&quot;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void test()&#123;</span><br><span class="line">        Forum forum=new Forum();</span><br><span class="line">        forum.setForumId(54);</span><br><span class="line">        forum.setForumName(&quot;watermelon&quot;);</span><br><span class="line">        forum.setForumDesc(&quot;my cute wife&quot;);</span><br><span class="line"></span><br><span class="line">        service.addForum(forum);</span><br><span class="line">        Forum forum2=service.getForum(11);</span><br><span class="line">        System.out.println(forum2);</span><br><span class="line">        long num=service.getForumNum();</span><br><span class="line">        forum.setForumDesc(&quot;my beautiful wife&quot;);</span><br><span class="line">        service.updateForum(forum);</span><br><span class="line"></span><br><span class="line">        List&lt;Forum&gt;forums=new ArrayList&lt;Forum&gt;();</span><br><span class="line">        forums=service.findForumByName(&quot;watermlon&quot;);</span><br><span class="line">        System.out.println(forums);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void testAddPost() throws Throwable&#123;</span><br><span class="line"></span><br><span class="line">        Topic topic = new Topic();</span><br><span class="line">        topic.setTopicId(2);</span><br><span class="line">        Post post = new Post();</span><br><span class="line">        post.setPostId(17);</span><br><span class="line">        post.setPostText(&quot;post text...&quot;);</span><br><span class="line"></span><br><span class="line">        Resource resource = new ClassPathResource(&quot;temp.jpg&quot;);</span><br><span class="line">        byte[] imgFile = FileCopyUtils.copyToByteArray(resource.getFile());</span><br><span class="line">        post.setPostAttach(imgFile);</span><br><span class="line">        post.setTopic(topic);</span><br><span class="line">        service.addPost(post);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>通过测试类便可发现已经在数据库中完成了以上操作.</p><h1 id="使用Mybatis"><a href="#使用Mybatis" class="headerlink" title="使用Mybatis"></a>使用Mybatis</h1><h2 id="配置SQLMapClient"><a href="#配置SQLMapClient" class="headerlink" title="配置SQLMapClient"></a>配置SQLMapClient</h2><p>每个Mybatis应用程序都以一个SqlSessionFactory对象的实例为核心.Mybatis同样也需要构建对个SQL映射文件,并通过一个配置文件对这些映射文件来进行装配,同时在该装配文件中进行控制属性的信息.<br>下面是一个简单的Mybatis配置文件:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE configuration</span><br><span class="line">        PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span><br><span class="line">        &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">    &lt;settings&gt;</span><br><span class="line">        &lt;setting name=&quot;lazyLoadingEnabled&quot; value=&quot;false&quot;/&gt;</span><br><span class="line">    &lt;/settings&gt;</span><br><span class="line">    &lt;typeAliases&gt;</span><br><span class="line">        &lt;typeAlias alias=&quot;Forum&quot; type=&quot;com.domain.Forum&quot;/&gt;</span><br><span class="line">        &lt;typeAlias alias=&quot;Topic&quot; type=&quot;com.domain.Topic&quot;/&gt;</span><br><span class="line">        &lt;typeAlias alias=&quot;Post&quot; type=&quot;com.domain.Post&quot;/&gt;</span><br><span class="line">    &lt;/typeAliases&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure></p><p>上述定义了Mybatis框架运行行为的属性信息,typeAlias为全限定类的别名,在映射文件中可以通过别名代替具体的类名,简化配置.<br>映射文件如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span><br><span class="line">        &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;</span><br><span class="line">&lt;mapper namespace=&quot;com.MybatisDao.ForumMybatisDao&quot;&gt;</span><br><span class="line">    &lt;select id=&quot;get&quot; resultType=&quot;Forum&quot; parameterType=&quot;int&quot;&gt;</span><br><span class="line">        SELECT</span><br><span class="line">        forum_id forumId,</span><br><span class="line">        forum_name forumName,</span><br><span class="line">        forum_desc forumDesc</span><br><span class="line">        FROM t_forum</span><br><span class="line">        WHERE forum_id = #&#123;forumId&#125;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">    &lt;select id=&quot;getNum&quot; resultType=&quot;int&quot;&gt;</span><br><span class="line">        SELECT COUNT(forum_id) FROM t_forum f</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">    &lt;select id=&quot;findForumByName&quot; resultType=&quot;Forum&quot; parameterType=&quot;string&quot;&gt;</span><br><span class="line">        SELECT</span><br><span class="line">        forum_id forumId,</span><br><span class="line">        forum_name forumName,</span><br><span class="line">        forum_desc forumDesc</span><br><span class="line">        FROM t_forum f</span><br><span class="line">        WHERE f.forum_name LIKE #&#123;forumName&#125;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">    &lt;insert id=&quot;save&quot; parameterType=&quot;Forum&quot;&gt;</span><br><span class="line">        INSERT INTO t_forum(forum_id,forum_name,forum_desc)</span><br><span class="line">        VALUES(#&#123;forumId&#125;,#&#123;forumName&#125;, #&#123;forumDesc&#125;)</span><br><span class="line">    &lt;/insert&gt;</span><br><span class="line">    &lt;update id=&quot;update&quot; parameterType=&quot;Forum&quot;&gt;</span><br><span class="line">        UPDATE t_forum f</span><br><span class="line">        SET forum_name=#&#123;forumName&#125;,forum_desc=#&#123;forumDesc&#125;</span><br><span class="line">        WHERE f.forum_id = #&#123;forumId&#125;</span><br><span class="line">    &lt;/update&gt;</span><br><span class="line">    &lt;delete id=&quot;delete&quot; parameterType=&quot;int&quot;&gt;</span><br><span class="line">        DELETE FROM t_forum</span><br><span class="line">        WHERE forum_id=#&#123;forumIf&#125;</span><br><span class="line">    &lt;/delete&gt;</span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure></p><p>该映射文件定义了对Forum实体类进行数据库操作是所需要的SQL语句,同时还定义了查询结果和对象属性的映射关系.namespace指定了映射所在的命名空间,每个具体的映射项都有一个id,可以通过命名空间和映射项的id定位到具体的映射项.映射项的parameterType指定传入参数对象,可以使全名限定类,也可以是类的别名,类的别名定义在Mybatis的配置文件中的typeAlias.如果映射项的参数是String等基本类型,可以使用int,long,string等基础类名.返回类型通过resultType指定,在映射项中通过#{xxx}绑定parameterType指定的参数类的属性,支持级联属性,如#{topic.forumId}.</p><h2 id="在Spring中配置Mybatis"><a href="#在Spring中配置Mybatis" class="headerlink" title="在Spring中配置Mybatis"></a>在Spring中配置Mybatis</h2><p>在其中可以使用mapperLocations指定配置文件.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;context:component-scan base-package=&quot;com.MybatisDao&quot;/&gt;</span><br><span class="line">&lt;context:component-scan base-package=&quot;com.MybatisService&quot;/&gt;</span><br><span class="line">&lt;context:property-placeholder location=&quot;classpath:jdbc.properties&quot;/&gt;</span><br><span class="line"></span><br><span class="line">&lt;bean id=&quot;dataSource&quot; class=&quot;org.apache.commons.dbcp.BasicDataSource&quot;</span><br><span class="line">      destroy-method=&quot;close&quot;</span><br><span class="line">      p:driverClassName=&quot;$&#123;jdbc.driverClassName&#125;&quot;</span><br><span class="line">      p:url=&quot;$&#123;jdbc.url&#125;&quot;</span><br><span class="line">      p:username=&quot;$&#123;jdbc.username&#125;&quot;</span><br><span class="line">      p:password=&quot;$&#123;jdbc.password&#125;&quot;/&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;bean id=&quot;sqlSessionFactory&quot; class=&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span><br><span class="line">      p:dataSource-ref=&quot;dataSource&quot;</span><br><span class="line">      p:configLocation=&quot;classpath:com/Mybatis/Mybatis.xml&quot;</span><br><span class="line">      p:mapperLocations=&quot;classpath:com/mybatis/*.xml&quot;/&gt;</span><br></pre></td></tr></table></figure></p><h2 id="使用映射接口编写Mybatis的Dao"><a href="#使用映射接口编写Mybatis的Dao" class="headerlink" title="使用映射接口编写Mybatis的Dao"></a>使用映射接口编写Mybatis的Dao</h2><p>下面是Forum,xml文件的映射项定义一个调用接口:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">package com.MybatisDao;</span><br><span class="line"></span><br><span class="line">import com.domain.Forum;</span><br><span class="line"></span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">public interface ForumMybatisDao&lt;Forum&gt; extends BaseDao&lt;Forum&gt; &#123;</span><br><span class="line"></span><br><span class="line">     List&lt;Forum&gt; findForumByName(String name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>该接口继承至BaseDao:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">package com.MybatisDao;</span><br><span class="line"></span><br><span class="line">import com.domain.Forum;</span><br><span class="line"></span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">public interface BaseDao&lt;T&gt; &#123;</span><br><span class="line">    void save(T entity);</span><br><span class="line">    void update(T entity);</span><br><span class="line">    Forum get(int id);</span><br><span class="line">    void delete(int id);</span><br><span class="line">    int getNum();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Mybatis-spring有一个神奇的转换器:MapperScannerConfigurer,可以将映射接口直接转换为Spring容器中的Bean,这样就可以在Service中注入接口映射的Bean:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean class=&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;</span><br><span class="line">          p:sqlSessionFactory-ref=&quot;sqlSessionFactory&quot;</span><br><span class="line">          p:basePackage=&quot;com.MybatisDao&quot;/&gt;</span><br></pre></td></tr></table></figure></p><p>MapperScannerConfigurer将扫描basepackage所指定包下的所有接口类(包括子包),如果他们在SQL映射文件中定义过,则动态的为他们生成一个bean,就可以直接在Service中注入接口映射的Bean,如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">package com.MybatisService;</span><br><span class="line"></span><br><span class="line">import com.HibrenateDao.PostHibernateDao;</span><br><span class="line">import com.MybatisDao.ForumMybatisDao;</span><br><span class="line">import com.domain.Forum;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">@Service(&quot;forumMybatisService&quot;)</span><br><span class="line">public class ForumMybatisService &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private ForumMybatisDao forumMybatisDao;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public void addForum(Forum forum)&#123;</span><br><span class="line">        forumMybatisDao.save(forum);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void updateForum(Forum forum)&#123;</span><br><span class="line">        forumMybatisDao.update(forum);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Forum getForum(int id)&#123;</span><br><span class="line">        return forumMybatisDao.get(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int getForumNum()&#123;</span><br><span class="line">        return forumMybatisDao.getNum();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public List&lt;Forum&gt; findForumByName(String name)&#123;</span><br><span class="line">        return forumMybatisDao.findForumByName(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void deleteForum(int id)&#123;</span><br><span class="line">        forumMybatisDao.delete(id);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>下面是测试代码:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">package com;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import com.MybatisService.ForumMybatisService;</span><br><span class="line">import com.domain.Forum;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.test.annotation.Rollback;</span><br><span class="line">import org.springframework.test.context.ContextConfiguration;</span><br><span class="line">import org.springframework.test.context.testng.AbstractTransactionalTestNGSpringContextTests;</span><br><span class="line">import org.springframework.transaction.annotation.Transactional;</span><br><span class="line">import org.testng.Assert;</span><br><span class="line">import org.testng.annotations.Test;</span><br><span class="line"></span><br><span class="line">import java.util.ArrayList;</span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">@ContextConfiguration(locations = &#123;&quot;classpath:com/Mybatis/applicationContext-mbatis.xml&quot;&#125;)</span><br><span class="line">@Rollback</span><br><span class="line">@Transactional</span><br><span class="line">public class MybatisTest extends AbstractTransactionalTestNGSpringContextTests &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private ForumMybatisService forumMybatisService;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void testForumMethod() &#123;</span><br><span class="line">        Forum forum = new Forum();</span><br><span class="line">        forum.setForumId(99);</span><br><span class="line">        forum.setForumName(&quot;name_99&quot;);</span><br><span class="line">        forum.setForumDesc(&quot;desc&quot;);</span><br><span class="line">        forumMybatisService.addForum(forum);</span><br><span class="line"></span><br><span class="line">        Forum forum1 = forumMybatisService.getForum(99);</span><br><span class="line">        Assert.assertEquals(&quot;name_99&quot;, forum1.getForumName());</span><br><span class="line">        forum1.setForumName(&quot;forum99&quot;);</span><br><span class="line">        forumMybatisService.updateForum(forum1);</span><br><span class="line"></span><br><span class="line">        forumMybatisService.deleteForum(123);</span><br><span class="line"></span><br><span class="line">        int count=forumMybatisService.getForumNum();</span><br><span class="line"></span><br><span class="line">        List&lt;Forum&gt; forums=new ArrayList&lt;Forum&gt;();</span><br><span class="line">        forums=forumMybatisService.findForumByName(&quot;watermelon&quot;);</span><br><span class="line">        System.out.println(forums);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;非常简单学习了一下Hibernate与Mybatis,两者给我的感受是Hibernate对于初学者上手很快,不需要自己写Sql语句,相比于Mybatis对于每一个实体类需要一个映射文件来说,它的使用十分快捷方便.但是在使用过程中出现的问题也更多,Hql语句定义问题啊,使用泛型BaseDao问题什么,自己对于Hibernate也完全不了解,出了Bug需要查阅许多博客.而使用Mybatis可以不用自己写Dao实现类,可以使用Mybatis的提供的MapperScannerConfigurer直接将映射接口转换为Spring容器的Bean.&lt;br&gt;
    
    </summary>
    
      <category term="study" scheme="https://watermelon-lee.github.io/categories/study/"/>
    
    
      <category term="Spring" scheme="https://watermelon-lee.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Spring-JDBC</title>
    <link href="https://watermelon-lee.github.io/2018/04/17/Spring-JDBC/"/>
    <id>https://watermelon-lee.github.io/2018/04/17/Spring-JDBC/</id>
    <published>2018-04-17T14:09:29.000Z</published>
    <updated>2018-04-22T03:18:27.720Z</updated>
    
    <content type="html"><![CDATA[<p>Spring JDBC是Spring所提供的持久层技术.在Spring JDBC里面只需要做那些与业务相关的事情DML操作,而将资源获取,statement创建,资源释放,异常处理的等繁杂的工作交给Spring JDBC.<br><a id="more"></a></p><h1 id="使用Spring-JDBC访问数据库"><a href="#使用Spring-JDBC访问数据库" class="headerlink" title="使用Spring JDBC访问数据库"></a>使用Spring JDBC访问数据库</h1><h2 id="JdbcTemplate尝试"><a href="#JdbcTemplate尝试" class="headerlink" title="JdbcTemplate尝试"></a>JdbcTemplate尝试</h2><p>在使用JSP/servlet时,使用JDBC连接数据库需要自己手动获取JDBC连接,处理异常,关闭连接等.而使用Spring JDBC通过模板与回调机制降低了使用JDBC的复杂性,借助JdbcTemplate,只需要一些”必不可少”的步骤就可以操作数据库.<br>代码:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">DriverManagerDataSource ds=new DriverManagerDataSource();</span><br><span class="line">        ds.setDriverClassName(&quot;com.mysql.jdbc.Driver&quot;);</span><br><span class="line">        ds.setUrl(&quot;jdbc:mysql://localhost:3306/sampledb&quot;);</span><br><span class="line">        ds.setUsername(&quot;root&quot;);</span><br><span class="line">        ds.setPassword(&quot;19970901&quot;);</span><br><span class="line">        </span><br><span class="line">        JdbcTemplate jdbcTemplate=new JdbcTemplate();</span><br><span class="line">        jdbcTemplate.setDataSource(ds);</span><br><span class="line">        </span><br><span class="line">        String sql=&quot;create table user(user_id int primary key,user_name varchar(60))&quot;;</span><br><span class="line">        jdbcTemplate.execute(sql);</span><br></pre></td></tr></table></figure></p><h2 id="在dao中使用JdbcTemplate"><a href="#在dao中使用JdbcTemplate" class="headerlink" title="在dao中使用JdbcTemplate"></a>在dao中使用JdbcTemplate</h2><p>在Dao类中可以直接使用JdbcTemplate,在XML文件中配置好后,直接在DAO中注入即可.<br>DAO类代码:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">public class ForumDao &#123;</span><br><span class="line">    private JdbcTemplate jdbcTemplate;</span><br><span class="line"></span><br><span class="line">    @Autowired//自动注入JdbcTemplate实例</span><br><span class="line">    public void setJdbcTemplate(JdbcTemplate jdbcTemplate) &#123;</span><br><span class="line">        this.jdbcTemplate = jdbcTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    //创建表格</span><br><span class="line">    public void initDb() &#123;</span><br><span class="line">        //在实际项目中,sql如果不是动态组装,需要将其定义为类级final常量</span><br><span class="line">        String sql = &quot;create table t_user(user_id int primary key,user_name varchar(60))&quot;;</span><br><span class="line">        jdbcTemplate.execute(sql);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>XML配置文件:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--扫描包以注册申明的bean--&gt;</span><br><span class="line">  &lt;context:component-scan base-package=&quot;com.dao&quot;/&gt;</span><br><span class="line"></span><br><span class="line">  &lt;!-- 配置数据源--&gt;</span><br><span class="line">  &lt;context:property-placeholder location=&quot;jdbc.properties&quot;/&gt;</span><br><span class="line">  &lt;bean id=&quot;dataSource&quot; class=&quot;org.apache.commons.dbcp.BasicDataSource&quot;</span><br><span class="line">        destroy-method=&quot;close&quot;</span><br><span class="line">        p:driverClassName=&quot;$&#123;jdbc.driverClassName&#125;&quot;</span><br><span class="line">        p:url=&quot;$&#123;jdbc.url&#125;&quot;</span><br><span class="line">        p:username=&quot;$&#123;jdbc.username&#125;&quot;</span><br><span class="line">        p:password=&quot;$&#123;jdbc.password&#125;&quot;/&gt;</span><br><span class="line">  &lt;!--声明Jdbcemplate Bean--&gt;</span><br><span class="line">  &lt;bean id=&quot;jdbcTemplate&quot; class=&quot;org.springframework.jdbc.core.JdbcTemplate&quot; p:dataSource-ref=&quot;dataSource&quot;/&gt;</span><br></pre></td></tr></table></figure></p><p>在Spring配置文件中,配置DAO一般有4个步骤:</p><ol><li>定义DataSource  </li><li>定义JdbcTemplate  </li><li>声明一个抽象的Bean,以便所有的Dao复用配置JdbcTamplate配置的属性  </li><li>配置具体的Dao</li></ol><h2 id="基本数据库操作"><a href="#基本数据库操作" class="headerlink" title="基本数据库操作"></a>基本数据库操作</h2><h3 id="更改数据"><a href="#更改数据" class="headerlink" title="更改数据"></a>更改数据</h3><p>JdbcTemplate提供了若干个Update()方法,来对数据表进行更改和删除<br>代码:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//更改数据</span><br><span class="line">    public  void addForum(Forum forum) &#123;</span><br><span class="line">        String sql = &quot;insert into t_forum(forum_name,forum_desc) values(?,?)&quot;;</span><br><span class="line">        Object[] params = &#123;forum.getForumName(), forum.getForumDesc()&#125;;</span><br><span class="line">        //jdbcTemplate.update(sql,params);</span><br><span class="line">        jdbcTemplate.update(sql, params, new int[]&#123;Types.VARCHAR, Types.VARCHAR&#125;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>JdbcTemplate在内部使用PreparedStatement执行SQL语句,可以使用绑定参数的SQL语句,使用占位符?.用Object[]args数组来定义填充占位符的参数,使用JdbcTemplate的int update(String sql,Object[] args,int[] argsTypes),int[] argsTypes数组来显式制定每个占位符对应的数据类型,以保证类型的安全.</p><h3 id="返回数据库表自增的主键"><a href="#返回数据库表自增的主键" class="headerlink" title="返回数据库表自增的主键"></a>返回数据库表自增的主键</h3><p>在开发时,我们有时候使用数据库自增字段为表的主键,主键不在应用层产生,而是在新增数据记录时产生.这样在应用层保存对象前我们不知道对象的主键值,在JDBC中,允许将数据库主键值绑定到Statement或者PrepareStatement上,利用这个技术,Spring提供了一个可以返回新增记录主键值的方法:<code>int update(PrepareStatementCreator osc,KeyHolder generatedKeyHolder)</code>.<br>代码如下:<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line">       在t_forum中使用了自增主键,则主键值不会再应用层,需要我们自己获取.</span><br><span class="line">       Spring jdbc3.0添加可回去住建的KeyHolder接口,通用实现类为GeneratedKeyHolder</span><br><span class="line">        */</span><br><span class="line">   public void addForumAndGetMainValue(final Forum forum)&#123;</span><br><span class="line"></span><br><span class="line">   KeyHolder keyHolder = new GeneratedKeyHolder();//创建一个主键持有者</span><br><span class="line">       final String  sql = &quot;insert into t_forum(forum_name,forum_desc) values(?,?)&quot;;</span><br><span class="line">       jdbcTemplate.update(new PreparedStatementCreator() &#123;</span><br><span class="line">       public PreparedStatement createPreparedStatement (Connection connection) throws SQLException &#123;</span><br><span class="line">           PreparedStatement preparedStatement=connection.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS);</span><br><span class="line">           preparedStatement.setString(1,forum.getForumName());</span><br><span class="line">           preparedStatement.setString(2,forum.getForumDesc());</span><br><span class="line">           return  preparedStatement;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;,keyHolder);</span><br><span class="line">       forum.setForumId(keyHolder.getKey().intValue());//从主键持有者中获取主键</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><p>这样在调用addForum后新增forum领域对象后,forum将拥有对应的主键,方便以后使用.</p><h3 id="批量更改数据"><a href="#批量更改数据" class="headerlink" title="批量更改数据"></a>批量更改数据</h3><p>JdbcTemplate有两个批量操作数据的方法:  </p><ul><li>public int[] batchUpdate(String[] sql):多条sql语句组成一个数组,这些sql语句不带参数,该方法以批量方式执行这些操作.</li><li>int[] batchUpdate(String sql,BatchPrepareStatementSetter pss):该方法对于同一结构带参SQL语句多次进行数据更新.通过BatchPrepareStatementSetter回调接口进行批量绑定参数.BatchPrepareStatementSetter定义了两个方法:<ol><li>int getBatchSize():指定本批次的大小</li><li>void setValues(PrepareStatement ps,int i):为给定的PrepareStatement指定参数.</li></ol></li></ul><p>加入论坛一次性新增多个板块,可如下编写:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">// 批量更改</span><br><span class="line">  public void addForums(final List&lt;Forum&gt; forums)&#123;</span><br><span class="line">      final String sql=&quot;insert into t_forum(forum_name,forum_desc) values(?,?)&quot;;</span><br><span class="line"></span><br><span class="line">      jdbcTemplate.batchUpdate(sql, new BatchPreparedStatementSetter() &#123;</span><br><span class="line">          public void setValues(PreparedStatement preparedStatement, int i) throws SQLException &#123;</span><br><span class="line">              Forum forum=forums.get(i);</span><br><span class="line">              preparedStatement.setString(1,forum.getForumName());</span><br><span class="line">              preparedStatement.setString(2,forum.getForumDesc());</span><br><span class="line">          &#125;</span><br><span class="line">          //指定该批记录的记录数</span><br><span class="line">          public int getBatchSize() &#123;</span><br><span class="line">              return forums.size();</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">      addForum(forums.get(10));</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><h3 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据"></a>查询数据</h3><h4 id="使用RowCallbackHandler"><a href="#使用RowCallbackHandler" class="headerlink" title="使用RowCallbackHandler"></a>使用RowCallbackHandler</h4><p>RowCallbackHandler接口与很简单,只有一个方法:`void processRow(ResultSet rs) throws SQLException.<br>ForumDao需要提供一个根据forumId来获取Forum对象的方法:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"> // 单次查询数据</span><br><span class="line">    public Forum getForum(final int id)&#123;</span><br><span class="line">        final String sql=&quot;select forum_name,forum_desc from t_forum where forum_id=?&quot;;</span><br><span class="line">        final Forum forum=new Forum();</span><br><span class="line">        jdbcTemplate.query(sql, new Object[]&#123;id&#125;, new RowCallbackHandler() &#123;</span><br><span class="line">            public void processRow(ResultSet resultSet) throws SQLException &#123;</span><br><span class="line">                forum.setForumId(id);</span><br><span class="line">                forum.setForumName(resultSet.getString(&quot;forum_name&quot;));</span><br><span class="line">                forum.setForumDesc(resultSet.getString(&quot;forum_desc&quot;));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        return forum;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">//批量查询</span><br><span class="line">    public List&lt;Forum&gt; getForums(final int id,final int toId)&#123;</span><br><span class="line">        String sql=&quot;select forum_name,forum_desc form t_forum where forum_id between ? and ?&quot;;</span><br><span class="line">        final List&lt;Forum&gt; forums=new ArrayList&lt;Forum&gt;();</span><br><span class="line"></span><br><span class="line">        jdbcTemplate.query(sql, new Object[]&#123;id, toId&#125;, new RowCallbackHandler() &#123;</span><br><span class="line">            public void processRow(ResultSet resultSet) throws SQLException &#123;</span><br><span class="line">                Forum forum=new Forum();</span><br><span class="line">                forum.setForumId(resultSet.getInt(&quot;forum_id&quot;));</span><br><span class="line">                forum.setForumName(resultSet.getString(&quot;forum_name&quot;));</span><br><span class="line">                forum.setForumDesc(resultSet.getString(&quot;forum_desc&quot;));</span><br><span class="line">                forums.add(forum);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        return forums;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><h4 id="使用RowMapper"><a href="#使用RowMapper" class="headerlink" title="使用RowMapper"></a>使用RowMapper<t></t></h4><p>RowMapper<t>接口只有一个方法:T mapRow(ResultSet rs,int rowNum).JJdbcTemplate提供了许多个使用RowMapper<t>的查询方法,这些方法返回List.下面使用JdbcTemplate的List query(String sql,Object[] args,RowMapper<t> rowMapper)方法:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">public List&lt;Forum&gt; getForums(final int fromId, final int toId) &#123;</span><br><span class="line">String sql = &quot;SELECT forum_id,forum_name,forum_desc FROM t_forum WHERE forum_id between ? and ?&quot;;</span><br><span class="line">// 方法1：使用RowCallbackHandler接口</span><br><span class="line">/*</span><br><span class="line"> * final List&lt;Forum&gt; forums = new ArrayList&lt;Forum&gt;();</span><br><span class="line"> * jdbcTemplate.query(sql,new Object[]&#123;fromId,toId&#125;,new</span><br><span class="line"> * RowCallbackHandler()&#123; public void processRow(ResultSet rs) throws</span><br><span class="line"> * SQLException &#123; Forum forum = new Forum();</span><br><span class="line"> * forum.setForumId(rs.getInt(&quot;forum_id&quot;));</span><br><span class="line"> * forum.setForumName(rs.getString(&quot;forum_name&quot;));</span><br><span class="line"> * forum.setForumDesc(rs.getString(&quot;forum_desc&quot;)); forums.add(forum);</span><br><span class="line"> * &#125;&#125;); return forums;</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">return jdbcTemplate.query(sql, new Object[] &#123; fromId, toId &#125;,</span><br><span class="line">new RowMapper&lt;Forum&gt;() &#123;</span><br><span class="line">public Forum mapRow(ResultSet rs, int index)</span><br><span class="line">throws SQLException &#123;</span><br><span class="line">Forum forum = new Forum();</span><br><span class="line">forum.setForumId(rs.getInt(&quot;forum_id&quot;));</span><br><span class="line">forum.setForumName(rs.getString(&quot;forum_name&quot;));</span><br><span class="line">forum.setForumDesc(rs.getString(&quot;forum_desc&quot;));</span><br><span class="line">return forum;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></t></t></t></p><p>可以看到使用RowCallbackHandler的void processRow(ResultSet rs)方法,需要自己将行数据映射到对象Forum手动添加的外部定义forums列表中,而RowMapper<t>的 T mapROw(ResultSet rs,int index)方法中,只需要简单的定义结果集和对象的映射关系,创建List,映射对象添加到List都有JdbcTemplate完成.</t></p><h4 id="RowCallbackHandler与RowMapper区别"><a href="#RowCallbackHandler与RowMapper区别" class="headerlink" title="RowCallbackHandler与RowMapper区别"></a>RowCallbackHandler与RowMapper区别</h4><p>可以看到使用RowCallbackHandler的void processRow(ResultSet rs)方法,需要自己将行数据映射到对象Forum手动添加的外部定义forums列表中,而RowMapper<t>的 T mapROw(ResultSet rs,int index)方法中,只需要简单的定义结果集和对象的映射关系,创建List,映射对象添加到List都有JdbcTemplate完成.<br>当处理大结果数据集时,使用RowMapper,采用的方式是将所有的数据集放到一个List<t>对象中,这样将占用JVM大量内存,而使用RowCallbackHandler()的 public void processRow(ResultSet resultSet)将会一边获取数据,一边完成处理,这样数据不会大量堆积在JVM中,造成大量内存占用.  </t></t></p><h3 id="调用存储过程"><a href="#调用存储过程" class="headerlink" title="调用存储过程"></a>调用存储过程</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">@Repository(value = &quot;topic&quot;)</span><br><span class="line">public class TopicDao &#123;</span><br><span class="line">    private JdbcTemplate jdbcTemplate;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    public void setJdbcTemplate(JdbcTemplate jdbcTemplate) &#123;</span><br><span class="line">        this.jdbcTemplate = jdbcTemplate;</span><br><span class="line">    &#125;</span><br><span class="line">    //调用存储过程</span><br><span class="line">    /*存储过程如下:</span><br><span class="line">    CREATE PROCEDURE P_GET_TOPIC_NUM(IN in_user_id INT,OUT out_num INT)</span><br><span class="line">BEGIN</span><br><span class="line">    SELECT COUNT(*) INTO out_num  FROM t_topic WHERE user_id = in_user_id;</span><br><span class="line">END</span><br><span class="line">     */</span><br><span class="line">    public int getUserTopicNum(final int userId)&#123;</span><br><span class="line">        String sql=&quot;&#123;call P_GET_TOPIC_NUM(?,?)&#125;&quot;;</span><br><span class="line">        Integer num=jdbcTemplate.execute(sql, new CallableStatementCallback&lt;Integer&gt;() &#123;</span><br><span class="line">            public Integer doInCallableStatement(CallableStatement callableStatement) throws SQLException, DataAccessException &#123;</span><br><span class="line">                callableStatement.setInt(1,userId);//绑定入参</span><br><span class="line">                callableStatement.registerOutParameter(2, Types.INTEGER);//注册输出参数</span><br><span class="line">                callableStatement.execute();//执行</span><br><span class="line">                return callableStatement.getInt(2);//获取输出参数值</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        return num;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="BLOB-CLOB类型数据操作"><a href="#BLOB-CLOB类型数据操作" class="headerlink" title="BLOB/ CLOB类型数据操作"></a>BLOB/ CLOB类型数据操作</h2><p>前面使用了JdbcTemplate的CRUD(create retrieve Update delete),现在了解如何对BLOB/ CLOB类型进行数据操作<br>LOB代表大对象数据,包括BLOB和CLOB.前者用于存储大块的二进制数据,如图片,视频(一般不宜存到数据库中,存至文件服务器中),后者存储长文本数据,如论坛帖子,产品详细描述.</p><h3 id="LobCreator"><a href="#LobCreator" class="headerlink" title="LobCreator"></a>LobCreator</h3><p>为了方便在 PreparedStatement 中使用 LobCreator，可以直接使用 JdbcTemplate#execute(String sql,AbstractLobCreatingPreparedStatementCallback lcpsc) 方法。下面对 LobCreator 接口中的方法进行简要说明：</p><ul><li>void close():关闭会话，并释放 LOB 资源</li><li>void setBlobAsBinaryStream(PreparedStatement ps, int paramIndex, InputStream contentStream, int contentLength) :通过流填充 BLOB 数据</li><li>void setBlobAsBytes(PreparedStatement ps, int paramIndex, byte[] content): 通过二进制数据填充 BLOB 数据</li><li>void setClobAsAsciiStream(PreparedStatement ps, int paramIndex, InputStream asciiStream, int contentLength): 通过 Ascii 字符流填充 CLOB 数据</li><li>void setClobAsCharacterStream(PreparedStatement ps, int paramIndex, Reader characterStream, int contentLength) :通过 Unicode 字符流填充 CLOB 数据</li><li>void setClobAsString(PreparedStatement ps, int paramIndex, String content):</li></ul><h3 id="LobHandler"><a href="#LobHandler" class="headerlink" title="LobHandler"></a>LobHandler</h3><p>LobHandler 接口为操作 BLOB/CLOB 提供了统一访问接口，而不管底层数据库究竟是以大对象的方式还是以一般数据类型的方式进行操作。此外，LobHandler 还充当了 LobCreator 的工厂类。实现类使用DefualtLobHandler.看一下 LobHandler 接口的几个重要方法：  </p><ul><li>InputStream getBlobAsBinaryStream(ResultSet rs, int columnIndex)    从结果集中返回 InputStream，通过 InputStream 读取 BLOB 数据</li><li>byte[] getBlobAsBytes(ResultSet rs, int columnIndex)    以二进制数据的方式获取结果集中的 BLOB 数据；</li><li>InputStream getClobAsAsciiStream(ResultSet rs, int columnIndex)    从结果集中返回 InputStream，通过 <em> </em> InputStreamn 以 Ascii 字符流方式读取 BLOB 数据</li><li>Reader getClobAsCharacterStream(ResultSet rs, int columnIndex)    从结果集中获取 Unicode 字符流 Reader，并通过 Reader以Unicode 字符流方式读取 CLOB 数据</li><li>String getClobAsString(ResultSet rs, int columnIndex)    从结果集中以字符串的方式获取 CLOB 数据</li><li>LobCreator getLobCreator()    生成一个会话相关的 LobCreator 对象</li></ul><h3 id="插入LOB类型数据"><a href="#插入LOB类型数据" class="headerlink" title="插入LOB类型数据"></a>插入LOB类型数据</h3><p>代码:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">public void addPost(final Post post)&#123;</span><br><span class="line">      String sql=&quot;insert into t_post(post_id,user_id,post_text,post_attach) values(?,?,?,?)&quot;;</span><br><span class="line">      jdbcTemplate.execute(sql, new AbstractLobCreatingPreparedStatementCallback(this.lobHandler) &#123;</span><br><span class="line">          @Override</span><br><span class="line">          protected void setValues(PreparedStatement preparedStatement, LobCreator lobCreator) throws SQLException, DataAccessException &#123;</span><br><span class="line">             // preparedStatement.setInt(1,1);</span><br><span class="line">              preparedStatement.setInt(1,incrementer.nextIntValue());//获取下一个主键值</span><br><span class="line">              preparedStatement.setInt(2,post.getUserId());</span><br><span class="line"></span><br><span class="line">              //设置CLOB字段</span><br><span class="line">              lobCreator.setClobAsString(preparedStatement,3,post.getPostText());</span><br><span class="line"></span><br><span class="line">              //设置BLOB字段</span><br><span class="line">              lobCreator.setBlobAsBytes(preparedStatement,4,post.getPostAttach());</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><p>在PostDao中引入一个LobHandler属性,通过<code>jdbcTemplate.execute(sql,  AbstractLobCreatingPreparedStatementCallback lcpsc)</code>方法插入LOB数据,然后通过匿名内部类方式定义LobCreatingPreparedStatementCallback的抽象子类,其构造函数需要一个LobHandler的入参,最后在匿名内部类中实现父类抽象方法setValues(PrepareStatement ps,LobCreator lobCreator),在该方法中通过lOBCreator操作LOB对象,分别通过字符串,二进制数组填充BLOB和CLOB.<br>使用MySQL数据库,我们可以在配置文件中如下配置:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id=&quot;lobHandler&quot; class=&quot;org.springframework.jdbc.support.lob.DefaultLobHandler&quot; lazy-init=&quot;true&quot;/&gt;</span><br></pre></td></tr></table></figure></p><h3 id="以块数据方式读取LOB数据"><a href="#以块数据方式读取LOB数据" class="headerlink" title="以块数据方式读取LOB数据"></a>以块数据方式读取LOB数据</h3><p>可以直接以数据块方式读取LOB数据:以String读取CLOB数据,以byte[]读取BLOB数据.<br>代码:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">public List getAttachs(final int userId)&#123;</span><br><span class="line">        String sql=&quot;select post_id,post_attachs from t_user where user_id=? and post_attach is not null&quot;;</span><br><span class="line">        return jdbcTemplate.query(sql, new Object[]&#123;userId&#125;, new RowMapper() &#123;</span><br><span class="line">            public Object mapRow(ResultSet resultSet, int i) throws SQLException &#123;</span><br><span class="line">                int postId=resultSet.getInt(1);</span><br><span class="line">                 // 以二进制的方式获取BLOB数据</span><br><span class="line">                byte[] attach=lobHandler.getBlobAsBytes(resultSet,2);</span><br><span class="line">                Post post=new Post();</span><br><span class="line">                post.setPostId(postId);</span><br><span class="line">                post.setPostAttach(attach);</span><br><span class="line">                return post;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>通过JdbcTemplate的List<t>query(String sql,Object[] args,RowMapper rowMapper)接口处理行数据的映射.在ROwMapper回调的mapRow()接口方法中,通过LOBHandler以byte[]获取BLOB数据.</t></p><h2 id="自增键"><a href="#自增键" class="headerlink" title="自增键"></a>自增键</h2><p>数据库都会提供自增键,如MySQL的auto_increment,Spring允许在应用层产生主键,需要使用DataFieldMaxValueIncrementer接口<br>代码:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">private DataFieldMaxValueIncrementer incrementer;//主键值产生器</span><br><span class="line"></span><br><span class="line">   @Autowired</span><br><span class="line">   public void setIncrementer(DataFieldMaxValueIncrementer incrementer)&#123;</span><br><span class="line">       this.incrementer=incrementer;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   public void addPost(final Post post)&#123;</span><br><span class="line">       String sql=&quot;insert into t_post(post_id,user_id,post_text,post_attach) values(?,?,?,?)&quot;;</span><br><span class="line">       jdbcTemplate.execute(sql, new AbstractLobCreatingPreparedStatementCallback(this.lobHandler) &#123;</span><br><span class="line">           @Override</span><br><span class="line">           protected void setValues(PreparedStatement preparedStatement, LobCreator lobCreator) throws SQLException, DataAccessException &#123;</span><br><span class="line">              // preparedStatement.setInt(1,1);</span><br><span class="line">               preparedStatement.setInt(1,incrementer.nextIntValue());//获取下一个主键值</span><br><span class="line">               preparedStatement.setInt(2,post.getUserId());</span><br><span class="line"></span><br><span class="line">               //设置CLOB字段</span><br><span class="line">               lobCreator.setClobAsString(preparedStatement,3,post.getPostText());</span><br><span class="line"></span><br><span class="line">               //设置BLOB字段</span><br><span class="line">               lobCreator.setBlobAsBytes(preparedStatement,4,post.getPostAttach());</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><p>在MySql中创建一张用于维护他_post主键的他_post_id表:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(</span><br><span class="line">   sequence_id  int</span><br><span class="line">)</span><br><span class="line"> ENGINE = MYISAM;</span><br><span class="line"> insert into t_post_id values(0);</span><br></pre></td></tr></table></figure></p><p>主键维护表的并发访问量很大,最好将其声明为<a href="https://blog.csdn.net/hu2010shuai/article/details/54907363" target="_blank" rel="noopener">MYISAM</a>类型,此外,需要为该表提供初始值,一边后续主建值在上面递增.<br>在Spirng配置文件中需要如下配置:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id=&quot;increment&quot; class=&quot;org.springframework.jdbc.support.incrementer.MySQLMaxValueIncrementer&quot;</span><br><span class="line">          p:incrementerName=&quot;t_post_id&quot;</span><br><span class="line">          p:columnName=&quot;sequence_id&quot;</span><br><span class="line">          p:cacheSize=&quot;1&quot;</span><br><span class="line">          p:dataSource-ref=&quot;dataSource&quot;/&gt;</span><br><span class="line">    &lt;!-- 属性依次为 维护主键的表名,用于生成主键值的列名,缓存大小--&gt;</span><br></pre></td></tr></table></figure></p><p>CacheSize决定一次返回的主键数,这里设置为10,第一次获取主键后,他_post_id中的Sequence_id递增10,然后后面9次都在在缓存中获取,之后在返回他_post_id获取.  </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Spring JDBC是Spring所提供的持久层技术.在Spring JDBC里面只需要做那些与业务相关的事情DML操作,而将资源获取,statement创建,资源释放,异常处理的等繁杂的工作交给Spring JDBC.&lt;br&gt;
    
    </summary>
    
      <category term="study" scheme="https://watermelon-lee.github.io/categories/study/"/>
    
    
      <category term="Spring" scheme="https://watermelon-lee.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>西瓜健身计划</title>
    <link href="https://watermelon-lee.github.io/2018/04/17/fitness-plan/"/>
    <id>https://watermelon-lee.github.io/2018/04/17/fitness-plan/</id>
    <published>2018-04-17T06:11:20.000Z</published>
    <updated>2018-04-18T01:35:49.453Z</updated>
    
    <content type="html"><![CDATA[<p>远远去健身房办卡啦,她有点害羞,不知道做什么好,给远远一份健身计划~<br><a id="more"></a></p><h1 id="one-臀腿"><a href="#one-臀腿" class="headerlink" title="one 臀腿"></a>one 臀腿</h1><h2 id="臀桥"><a href="#臀桥" class="headerlink" title="臀桥"></a>臀桥</h2><p><img src="../../../../img/fitness/1.jpg" alt="臀桥"><br>要点:</p><ul><li>仰卧,屈膝,双脚与肩膀同宽,脚跟支撑地面(脚掌支持地面容易借力,影响臀部发力)</li><li>向上发力臀收紧,身体呈一条直线</li><li>在顶端停止一秒,慢慢落下.</li><li>3*15</li></ul><h2 id="跪姿后抬腿"><a href="#跪姿后抬腿" class="headerlink" title="跪姿后抬腿"></a>跪姿后抬腿</h2><p><img src="../../../../img/fitness/2.jpg" alt="跪姿后抬腿"><br>要点:</p><ul><li>双手与肩同宽,手臂与地面垂直,双膝与髋同宽</li><li>腿向后发力,顶部静止一秒</li><li>6*10(左右腿分别做组,每边3组,交替做组)</li></ul><h2 id="哑铃箭步蹲"><a href="#哑铃箭步蹲" class="headerlink" title="哑铃箭步蹲"></a>哑铃箭步蹲</h2><p><img src="../../../../img/fitness/3.jpg" alt="哑铃箭步蹲"><br>要点:</p><ul><li>一腿在前,一腿在后,重心位于两腿中间</li><li>双手握哑铃,拳心相对</li><li>同时弯曲两个膝关节,蹲至前侧大腿与身体程90度,后侧大腿与小腿90度,下蹲最后稍微停顿,前面的脚后跟发力站起到起始动作</li><li>6*10(左右腿分别做组,每边3组,交替做组)</li></ul><h2 id="深蹲"><a href="#深蹲" class="headerlink" title="深蹲"></a>深蹲</h2><p><img src="../../../../img/fitness/4.jpg" alt="深蹲"><br>要点:</p><ul><li>双脚与肩同宽,脚尖与膝盖朝向一致</li><li>背部下蹲时不应过于前倾,停止腰背,膝盖不超过脚尖,下蹲至大腿与地面平行</li><li>3*10(瑜伽房里面有小杠铃杆,自己可以自由加哑铃片,适量即可,也可以自己拿小哑铃握在胸前深蹲)</li></ul><h2 id="跑步-单车"><a href="#跑步-单车" class="headerlink" title="跑步||单车"></a>跑步||单车</h2><p>要点:</p><ul><li>走跑交替可达到更好的效果,对膝盖的磨损也更小,可以坡度走10分钟,然后平跑15分钟,在最后平走5分钟(跑步机上分为速度档和坡度当哦)</li><li>蹬单车30分钟,可以自己加大扭矩进行爬坡(站着骑),中等扭矩长距离骑行,较小扭矩冲刺训练</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>以上均为臀部,腿部运动,并且有不小的训练量,也可减脂,锻炼完记得要充分拉伸按摩,不然容易第二天起来酸痛</p><h1 id="上肢"><a href="#上肢" class="headerlink" title="上肢"></a>上肢</h1><h2 id="开和跳"><a href="#开和跳" class="headerlink" title="开和跳"></a>开和跳</h2><p><img src="../../../../img/fitness/5.jpg" alt="开和跳"><br>要点:</p><ul><li>头部平视,收紧腰腹</li><li>3*30s</li></ul><h2 id="哑铃平举"><a href="#哑铃平举" class="headerlink" title="哑铃平举"></a>哑铃平举</h2><p><img src="../../../../img/fitness/6.jpg" alt="哑铃平举"><br>要点:</p><ul><li>自然站立,挺胸收腹,双手握住哑铃放在大腿前册</li><li>绷紧手臂,以关节为轴,举起至肘关节与肩膀同高,拳心向下</li><li>6*10(用2kg或3kg的哑铃即可,3组侧平举,3组前平举)</li></ul><h2 id="哑铃交替弯举"><a href="#哑铃交替弯举" class="headerlink" title="哑铃交替弯举"></a>哑铃交替弯举</h2><p><img src="../../../../img/fitness/7.jpg" alt="哑铃交替弯举"><br>要点:</p><ul><li>双脚与肩同宽,掌心朝向身体握住哑铃,放在身体两侧,哑铃与身体垂直.</li><li>弯举时,上臂固定夹紧,手臂外旋同时举起哑铃,弯举至最高时,哑铃与身体平行</li><li>3*12</li></ul><h2 id="哑铃划船"><a href="#哑铃划船" class="headerlink" title="哑铃划船"></a>哑铃划船</h2><p><img src="../../../../img/fitness/8.jpg" alt="哑铃划船"><br>要点:</p><ul><li>背部挺直,躯干与地面30度,屈膝,拳心朝前,手臂自然下垂</li><li>屈肘,将小哑铃向后拉,在动作顶部收缩背部,停顿1s,然后慢慢返回</li><li>3*15<h1 id="腹部"><a href="#腹部" class="headerlink" title="腹部"></a>腹部</h1><h2 id="单腿屈膝两头起"><a href="#单腿屈膝两头起" class="headerlink" title="单腿屈膝两头起"></a>单腿屈膝两头起</h2><img src="../../../../img/fitness/9.jpg" alt="单腿屈膝两头起"><br>要点:</li><li>屈膝躺在垫子上,手臂向上伸直</li><li>提膝至小腿平行地面</li><li>卷腹时双手用力向前伸</li><li>3*12(左右脚一边一次,总共每边6次)</li></ul><h2 id="屈膝收腹"><a href="#屈膝收腹" class="headerlink" title="屈膝收腹"></a>屈膝收腹</h2><p><img src="../../../../img/fitness/10.jpg" alt="屈膝收腹"><br>要点:</p><ul><li>后仰坐在地上,臀部着地,手臂后伸撑地,双腿微屈</li><li>收腿并收腹,然后慢慢还原</li><li>3*12(可以先从基本的v字支撑,即不动的版本开始练习)</li></ul><h2 id="西西里卷腹"><a href="#西西里卷腹" class="headerlink" title="西西里卷腹"></a>西西里卷腹</h2><p><img src="../../../../img/fitness/11.jpg" alt="卷腹"><br>要点:</p><ul><li>仰卧在瑜伽垫上,屈膝,手臂向上伸直,双手握紧</li><li>慢慢卷起上半身,卷腹时手臂伸直</li><li>下背部贴紧地面</li><li>3*12</li></ul><h2 id="蹬单车"><a href="#蹬单车" class="headerlink" title="蹬单车"></a>蹬单车</h2><p><img src="../../../../img/fitness/12.jpg" alt="蹬单车"><br>要点:</p><ul><li>仰卧在瑜伽垫上,双臂贴紧地面,双腿与地面30度</li><li>双脚交替屈伸,动作缓慢</li><li>3*30s</li></ul><h2 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h2><p>做这些动作都不可以过快,做到最顶点可以加上停顿,做完之后记得拉伸</p><h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>目前就想这么多啦,考虑到健身房人很多,大部分动作都是给你安排在瑜伽房中的,等以后远远慢慢入门了也可以练习更多动作~<br>既然你每天次都想做跑步或者单车这样的有氧,那么就大概一周三次,连一次臀腿加跑步或单车,上肢加跑步或单车,然后腹部加跑步或单车.当然,也可以根据自己具体想法来調整训练.<br>最后最后,有什么不懂的就来请教元老大吧!</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;远远去健身房办卡啦,她有点害羞,不知道做什么好,给远远一份健身计划~&lt;br&gt;
    
    </summary>
    
      <category term="life" scheme="https://watermelon-lee.github.io/categories/life/"/>
    
    
      <category term="fitness" scheme="https://watermelon-lee.github.io/tags/fitness/"/>
    
  </entry>
  
  <entry>
    <title>Spring事务管理</title>
    <link href="https://watermelon-lee.github.io/2018/04/16/Spring-transaction/"/>
    <id>https://watermelon-lee.github.io/2018/04/16/Spring-transaction/</id>
    <published>2018-04-16T12:42:08.000Z</published>
    <updated>2018-04-24T05:14:53.628Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数据库事务基础知识"><a href="#数据库事务基础知识" class="headerlink" title="数据库事务基础知识"></a>数据库事务基础知识</h1><p>一个数据库事务是一个被视为单一的工作单元的操作序列。这些操作应该要么完整地执行，要么完全不执行。数据库事务必须满足下列四个特性ACID（Atomic，Consistency，Isolation，Durabiliy）：</p><ul><li>原子性：组成事务的多个数据库操作是一个不可分的原子单元，只有所有的操作成功执行，事务才会提交。</li><li>一致性：事务操作成功后，数据库所处的状态是和他的业务规则是一致的，即数据不会被破坏。</li><li>隔离性：并发操作数据时，不同的事务拥有各自的空间，他们的操作不会互相干扰。</li><li>持久性：一旦事务提交成功后，事务中所有的数据操作都必须持久化到数据库中。<a id="more"></a><h1 id="ThreadLocal基础知识"><a href="#ThreadLocal基础知识" class="headerlink" title="ThreadLocal基础知识"></a>ThreadLocal基础知识</h1>ThreadLocal是一个保存线程本地化对象的容器。当运行于多线程环境的某个对象使用ThreadLocal维护变量时，ThreadLocal为每个使用该变量的线程分配一个独立的变量副本。每个线程可以独立的改变自己的副本，而不会影响到其他线程所对应的副本。<h2 id="ThreadLocal接口"><a href="#ThreadLocal接口" class="headerlink" title="ThreadLocal接口"></a>ThreadLocal接口</h2>ThreadLocal有4个方法：</li><li>void set(Object value):设置当前线程的局部变量的值。</li><li>public Object get():返回当前线程所对应的线程局部变量。</li><li>public void remove():将当前线程的局部变量的值山粗，目的是为了减少内存占用。</li><li>protected Object initialValue():返回该线程局部变量的初始值。该方法为了让子类覆盖而设计。这是一个延迟调用的方法，直到第一次调用set()或者get()时才执行，并只执行一次。默认返回一个null。</li></ul><p>一个ThreadLocal的简单实现版本：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">package com.ThreadLocal;</span><br><span class="line"></span><br><span class="line">import org.omg.PortableInterceptor.ObjectReferenceFactory;</span><br><span class="line"></span><br><span class="line">import java.util.Collections;</span><br><span class="line">import java.util.HashMap;</span><br><span class="line">import java.util.Map;</span><br><span class="line"></span><br><span class="line">public class SimpleThreadLocal &#123;</span><br><span class="line">    private Map valueMap= Collections.synchronizedMap(new HashMap());</span><br><span class="line"></span><br><span class="line">    public void set(Object newValue)&#123;</span><br><span class="line">        valueMap.put(Thread.currentThread(),newValue);//键为线程对象，值为线程的变量副本</span><br><span class="line">    &#125;</span><br><span class="line">    public Object get()&#123;</span><br><span class="line">        Thread thread=Thread.currentThread();</span><br><span class="line">        Object o=valueMap.get(thread);//返回本线程对应的变量</span><br><span class="line">        if(o==null &amp;&amp; valueMap.containsKey(thread))&#123;//如果不在map中，保存起来</span><br><span class="line">            o=initialValue();</span><br><span class="line">            valueMap.put(thread,o);</span><br><span class="line">        &#125;</span><br><span class="line">        return o;</span><br><span class="line">    &#125;</span><br><span class="line">    public void remove()&#123;</span><br><span class="line">        valueMap.remove(Thread.currentThread());</span><br><span class="line">    &#125;</span><br><span class="line">    public Object initialValue()&#123;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="一个实例"><a href="#一个实例" class="headerlink" title="一个实例"></a>一个实例</h2><p>代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">package com.ThreadLocal;</span><br><span class="line"></span><br><span class="line">import sun.awt.AWTAccessor;</span><br><span class="line"></span><br><span class="line">public class SequenceNumber &#123;</span><br><span class="line">    private static ThreadLocal&lt;Integer&gt; seqNum=new ThreadLocal&lt;Integer&gt;()&#123;</span><br><span class="line">        @Override</span><br><span class="line">        protected Integer initialValue() &#123;</span><br><span class="line">            return 0;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    /*</span><br><span class="line">    通过匿名内部类覆盖ThreadLocal的initialValue方法，制定初始值</span><br><span class="line">     */</span><br><span class="line">    public int getNextNum()&#123; //获取下一个序列值</span><br><span class="line">        seqNum.set(seqNum.get()+1);</span><br><span class="line">        return seqNum.get();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        SequenceNumber sequenceNumber=new SequenceNumber();</span><br><span class="line"></span><br><span class="line">        TestClient t1=new TestClient(sequenceNumber);</span><br><span class="line">        TestClient t2=new TestClient(sequenceNumber);</span><br><span class="line">        TestClient t3=new TestClient(sequenceNumber);</span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">        t3.start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private static class TestClient extends Thread &#123;</span><br><span class="line">        private SequenceNumber sequenceNumber;</span><br><span class="line"></span><br><span class="line">        public TestClient(SequenceNumber sequenceNumber) &#123;</span><br><span class="line">            this.sequenceNumber = sequenceNumber;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        @Override</span><br><span class="line">        public void run() &#123;</span><br><span class="line">            for(int i=0;i&lt;3;i++)&#123;//每个线程打印3个值</span><br><span class="line">                System.out.println(&quot;Thread[&quot;+Thread.currentThread().getName()+&quot;] sequenceNumber[&quot;+sequenceNumber.getNextNum()+&quot;]&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>通过内部匿名类类覆盖ThreadLocal中的initialValue（）方法来提供初始值，运行代码得到结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Thread[Thread-0] sequenceNumber[1]</span><br><span class="line">Thread[Thread-1] sequenceNumber[1]</span><br><span class="line">Thread[Thread-1] sequenceNumber[2]</span><br><span class="line">Thread[Thread-2] sequenceNumber[1]</span><br><span class="line">Thread[Thread-2] sequenceNumber[2]</span><br><span class="line">Thread[Thread-2] sequenceNumber[3]</span><br><span class="line">Thread[Thread-1] sequenceNumber[3]</span><br><span class="line">Thread[Thread-0] sequenceNumber[2]</span><br><span class="line">Thread[Thread-0] sequenceNumber[3]</span><br></pre></td></tr></table></figure></p><p>可以发现虽然三个线程公用一个SequenceNumber实例，但是并没有相互干扰，产生了独立的序列号，因为ThreadLocal为他们提供了单独的副本。</p><h1 id="使用XML配置声明事务"><a href="#使用XML配置声明事务" class="headerlink" title="使用XML配置声明事务"></a>使用XML配置声明事务</h1><p>可以让事务管理的代码完全从业务代码中移除，对代码入侵性最小。</p><p>##　基于aop/tx命名空间的配置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class="line">       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">       xmlns:p=&quot;http://www.springframework.org/schema/p&quot; xmlns:aop=&quot;http://www.springframework.org/schema/aop&quot;</span><br><span class="line">       xmlns:tx=&quot;http://www.springframework.org/schema/tx&quot;</span><br><span class="line">       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd</span><br><span class="line">     http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd&quot;&gt;</span><br><span class="line">&lt;!--引入DataSource的配置文件 --&gt;</span><br><span class="line">    &lt;import resource=&quot;classpath:applicationContext-dao.xml&quot;/&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--事务管理器 --&gt;</span><br><span class="line">    &lt;bean id=&quot;transactionManager&quot;</span><br><span class="line">          class=&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span><br><span class="line">          p:dataSource-ref=&quot;dataSource&quot;/&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--使用切点表达式语言定义切点 --&gt;</span><br><span class="line">    &lt;aop:config&gt;</span><br><span class="line">&lt;!--定义事务增强切面 --&gt;</span><br><span class="line">        &lt;aop:pointcut id=&quot;serviceMethod&quot;</span><br><span class="line">                      expression=&quot;execution(* com.smart.service.*Forum.*(..))&quot;/&gt;</span><br><span class="line">&lt;!--引用事务增强 --&gt;</span><br><span class="line">        &lt;aop:advisor pointcut-ref=&quot;serviceMethod&quot;</span><br><span class="line">                     advice-ref=&quot;txAdvice&quot;/&gt;</span><br><span class="line">    &lt;/aop:config&gt;</span><br><span class="line">&lt;!--事务增强 --&gt;</span><br><span class="line">    &lt;tx:advice id=&quot;txAdvice&quot;&gt;</span><br><span class="line">&lt;!--事务属性定义 --&gt;</span><br><span class="line">        &lt;tx:attributes&gt;</span><br><span class="line">            &lt;tx:method name=&quot;get*&quot; read-only=&quot;false&quot;/&gt;</span><br><span class="line">            &lt;tx:method name=&quot;add*&quot; rollback-for=&quot;PessimisticLockingFailureException&quot;/&gt;</span><br><span class="line">            &lt;tx:method name=&quot;update*&quot;/&gt;</span><br><span class="line">        &lt;/tx:attributes&gt;</span><br><span class="line">    &lt;/tx:advice&gt;</span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure></p><p>首先在配置文件中引入tx命名空间，aop命名空间中，通过切点表达式语言，配合<a href="tx:advise" target="_blank" rel="noopener">tx:advise</a>的<a href="aop:advisor" target="_blank" rel="noopener">aop:advisor</a>完成了事务切面的定义。<a href="aop:advisor" target="_blank" rel="noopener">aop:advisor</a>引用的txAdvice增强是在tx空间上定义的。首先，事务增强一定需要一个事务管理器的支持，<a href="tx:advice" target="_blank" rel="noopener">tx:advice</a>通过transaction-manager属性引用了定义为transactionManager的事务管理器。　　<br><a href="tx:method" target="_blank" rel="noopener">tx:method</a>的属性如下：</p><ul><li>name：必要属性，表示与事务相关的方法名。</li><li>pro[agation：事务传播行为，默认ＲＥＱＵＩＲＥＤ</li><li>isolatisosn：事务隔离级别，默认ＤＥＦＡＵＬＴ</li><li>timeout：超时时间，默认系统底层决定</li><li>read-only：是否只读，默认ｆｌａｓｅ</li><li>rollback-for：触发事务回滚的Ｅｘｃｅｐｔｉｏｎ，用于异常名片段匹配。</li></ul><h1 id="使用注解方式声明事务"><a href="#使用注解方式声明事务" class="headerlink" title="使用注解方式声明事务"></a>使用注解方式声明事务</h1><h2 id="使用-Transaction注解"><a href="#使用-Transaction注解" class="headerlink" title="使用@Transaction注解"></a>使用@Transaction注解</h2><p>业务类代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">package com.smart.service;</span><br><span class="line"></span><br><span class="line">import com.smart.dao.ForumDao;</span><br><span class="line">import com.smart.dao.PostDao;</span><br><span class="line">import com.smart.dao.TopicDao;</span><br><span class="line">import com.smart.domain.Forum;</span><br><span class="line">import com.smart.domain.Topic;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.stereotype.Service;</span><br><span class="line">import org.springframework.transaction.annotation.Transactional;</span><br><span class="line">// 对业务类进行事务增强的标注</span><br><span class="line">@Service</span><br><span class="line">@Transactional</span><br><span class="line">public class BbtForum &#123;</span><br><span class="line">    public ForumDao forumDao;</span><br><span class="line"></span><br><span class="line">    public TopicDao topicDao;</span><br><span class="line"></span><br><span class="line">    public PostDao postDao;</span><br><span class="line"></span><br><span class="line">    public void addTopic(Topic topic) throws Exception &#123;</span><br><span class="line">        topicDao.addTopic(topic);</span><br><span class="line">//if(true) throw new PessimisticLockingFailureException(&quot;fail&quot;);</span><br><span class="line">        postDao.addPost(topic.getPost());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Transactional(readOnly = true)</span><br><span class="line">    public Forum getForum(int forumId) &#123;</span><br><span class="line">        return forumDao.getForum(forumId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void updateForum(Forum forum) &#123;</span><br><span class="line">        forumDao.updateForum(forum);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int getForumNum() &#123;</span><br><span class="line">        return forumDao.getForumNum();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    public void setForumDao(ForumDao forumDao) &#123;</span><br><span class="line">        this.forumDao = forumDao;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    public void setPostDao(PostDao postDao) &#123;</span><br><span class="line">        this.postDao = postDao;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    public void setTopicDao(TopicDao topicDao) &#123;</span><br><span class="line">        this.topicDao = topicDao;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>注解本身有一组普适性的默认事务属性，可以直接只用注解完成事务配置<br>配置文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class="line">       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">       xmlns:p=&quot;http://www.springframework.org/schema/p&quot;</span><br><span class="line">       xmlns:tx=&quot;http://www.springframework.org/schema/tx&quot; xmlns:context=&quot;http://www.springframework.org/schema/context&quot;</span><br><span class="line">       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd</span><br><span class="line">     http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd&quot;&gt;</span><br><span class="line">    &lt;context:component-scan base-package=&quot;com.smart&quot;/&gt;</span><br><span class="line">    &lt;import resource=&quot;classpath:applicationContext-dao.xml&quot;/&gt;</span><br><span class="line"></span><br><span class="line">    &lt;bean id=&quot;bbtForum&quot;</span><br><span class="line">          class=&quot;com.smart.service.BbtForum&quot;</span><br><span class="line">          p:forumDao-ref=&quot;forumDao&quot;</span><br><span class="line">          p:topicDao-ref=&quot;topicDao&quot;</span><br><span class="line">          p:postDao-ref=&quot;postDao&quot;/&gt;</span><br><span class="line">&lt;!--配置事务管理器--&gt;</span><br><span class="line">    &lt;bean id=&quot;txManager&quot;</span><br><span class="line">          class=&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span><br><span class="line">          p:dataSource-ref=&quot;dataSource&quot;/&gt;</span><br><span class="line">&lt;!-- 对标志注解@Transaction的bean加工处理，以织入事务管理切面--&gt;</span><br><span class="line">    &lt;tx:annotation-driven transaction-manager=&quot;txManager&quot; proxy-target-class=&quot;true&quot;/&gt;</span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure></p><p><a href="tx:annotation-driven" target="_blank" rel="noopener">tx:annotation-driven</a>有三个属性：</p><ul><li>transaction-manager：指定事务管理器</li><li>proxy-target-class：如果位true，Spring将通过创建子类来代理业，否则基于接口代理</li><li>order：控制事务切面在目标连接点的织入顺序</li></ul><p>@Transaction注解属性：</p><ul><li>value     String     可选的限定描述符，指定使用的事务管理器</li><li>propagation     enum: Propagation     可选的事务传播行为设置</li><li>isolation     enum: Isolation     可选的事务隔离级别设置</li><li>readOnly     boolean     读写或只读事务，默认读写</li><li>timeout     int (in seconds granularity)     事务超时时间设置</li><li>rollbackFor     Class对象数组，必须继承自Throwable     导致事务回滚的异常类数组</li><li>rollbackForClassName     类名数组，必须继承自Throwable     导致事务回滚的异常类名字数组</li><li>noRollbackFor     Class对象数组，必须继承自Throwable     不会导致事务回滚的异常类数组</li><li><p>noRollbackForClassName     类名数组，必须继承自Throwable     不会导致事务回滚的异常类名字数组</p><p>@Transactional 可以作用于接口、接口方法、类以及类方法上。当作用于类上时，该类的所有 public 方法将都具有该类型的事务属性，同时，我们也可以在方法级别使用该标注来覆盖类级别的定义。<br>虽然 @Transactional 注解可以作用于接口、接口方法、类以及类方法上，但是 Spring 建议不要在接口或者接口方法上使用该注解，因为这只有在使用基于接口的代理时它才会生效。<em>建议在业务实现类上使用该注解。</em>另外， @Transactional 注解应该只被应用到 public 方法上，这是由 Spring AOP 的本质决定的。如果你在 protected、private 或者默认可见性的方法上使用 @Transactional 注解，这将被忽略，也不会抛出任何异常。<br>在方法上使用@Transaction注解会覆盖类上的注解的属性。</p></li></ul><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>Spring事务配置主要提供两方面信息：1.切点信息，用于定位实施事务切面的业务类方法。2.控制事务行为的事务属性，如事务隔离级别，传播行为等。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;数据库事务基础知识&quot;&gt;&lt;a href=&quot;#数据库事务基础知识&quot; class=&quot;headerlink&quot; title=&quot;数据库事务基础知识&quot;&gt;&lt;/a&gt;数据库事务基础知识&lt;/h1&gt;&lt;p&gt;一个数据库事务是一个被视为单一的工作单元的操作序列。这些操作应该要么完整地执行，要么完全不执行。数据库事务必须满足下列四个特性ACID（Atomic，Consistency，Isolation，Durabiliy）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;原子性：组成事务的多个数据库操作是一个不可分的原子单元，只有所有的操作成功执行，事务才会提交。&lt;/li&gt;
&lt;li&gt;一致性：事务操作成功后，数据库所处的状态是和他的业务规则是一致的，即数据不会被破坏。&lt;/li&gt;
&lt;li&gt;隔离性：并发操作数据时，不同的事务拥有各自的空间，他们的操作不会互相干扰。&lt;/li&gt;
&lt;li&gt;持久性：一旦事务提交成功后，事务中所有的数据操作都必须持久化到数据库中。
    
    </summary>
    
      <category term="study" scheme="https://watermelon-lee.github.io/categories/study/"/>
    
    
      <category term="Spring" scheme="https://watermelon-lee.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Spring-AspectJ</title>
    <link href="https://watermelon-lee.github.io/2018/04/13/Spring-AspectJ/"/>
    <id>https://watermelon-lee.github.io/2018/04/13/Spring-AspectJ/</id>
    <published>2018-04-13T06:33:17.000Z</published>
    <updated>2018-04-24T05:13:59.309Z</updated>
    
    <content type="html"><![CDATA[<h1 id="AspectJ"><a href="#AspectJ" class="headerlink" title="@AspectJ"></a>@AspectJ</h1><p>前面Spring AOP的配置十分复杂，需要在XML文件中包含许多代码，但使用@AspectJ后，可以非常容易的定义一个切面。<br><a id="more"></a></p><h2 id="AspectJ语法"><a href="#AspectJ语法" class="headerlink" title="@AspectJ语法"></a>@AspectJ语法</h2><h3 id="切点函数"><a href="#切点函数" class="headerlink" title="切点函数"></a>切点函数</h3><p>Spring支持9个切点表达式函数，分为以下4类：</p><ul><li>方法切入点函数：可以通过描述目标类方法的信息定义连接点。</li><li>方法入参切点函数：通过描述目标类方法的入参的信息定义连接点。</li><li>目标类切点函数：通过描述目标类类型的信息定义连接点。</li><li>代理类切点函数：通过描述目标类的代理类的信息来定义连接点。</li></ul><p>如下表：</p><table><br>  <tr><br>    <th width="10%," bgcolor="yellow">类别</th><br>    <th width="10%," bgcolor="yellow">函数</th><br>    <th width="10%," bgcolor="yellow">入参</th><br>    <th width="70%," bgcolor="yellow">说明</th><br>  </tr><br>  <tr><br>    <td bgcolor="red">方法切点函数 </td><br>    <td> execution  </td><br>    <td> 方法匹配模式串 </td><br>    <td>表示满足某一匹配模式的所有目标类方法连接点。如execution(<em> greetTo(..))表示所有目标类中的greetTo()方法。 </em></td><br>  </tr><br>  <tr><br>    <td bgcolor="red">方法切点函数 </td><br>    <td> @annotation()</td><br>    <td> 方法注解类名</td><br>    <td>表示标注了特定注解的目标方法连接点。如@annotation(com.baobaotao.anno.NeedTest)表示任何标注了@NeedTest注解的目标类方法.</td><br>  </tr><br>  <tr><br>    <td bgcolor="blue">方法入参切点函数</td><br>    <td>args()</td><br>    <td>类名</td><br>    <td>通过判别目标类方法运行时入参对象的类型定义指定连接点。如args(com.baobaotao.Waiter)表示所有有且仅有一个按类型匹配于Waiter的入参的方法。</td><br>  </tr><br>  <tr><br>    <td bgcolor="blue">方法入参切点函数</td><br>    <td>@args()</td><br>    <td>类型注解名</td><br>    <td>通过判别目标方法的运行时入参对象的类是否标注特定注解来指定连接点。如@args(com.baobaotao.Monitorable)表示任何这样的一个目标方法：它有一个入参且入参对象的类标注@Monitorable注解。</td><br>  </tr><br>  <tr><br>    <td bgcolor="grey">目标类切点函数 </td><br>    <td>within()</td><br>    <td>类名匹配串</td><br>    <td>表示特定域下的所有连接点。如within(com.baobaotao.service.)表示com.baobaotao.service包中的所有连接点，也即包中所有类的所有方法，而within(com.baobaotao.service.*Service)表示在com.baobaotao.service包中，所有以Service结尾的类的所有连接点。</td><br>  </tr><br>  <tr><br>    <td bgcolor="grey">目标类切点函数  </td><br>    <td>target()</td><br>    <td>类名</td><br>    <td> 假如目标类按类型匹配于指定类，则目标类的所有连接点匹配这个切点。如通过target(com.baobaotao.Waiter)定义的切点，Waiter、以及Waiter实现类NaiveWaiter中所有连接点都匹配该切点。</td><br>  </tr><br>  <tr><br>    <td bgcolor="grey">目标类切点函数 </td><br>    <td>@within()</td><br>    <td>类型注解类名</td><br>    <td> 假如目标类按类型匹配于某个类A，且类A标注了特定注解，则目标类的所有连接点匹配这个切点 如@within(com.baobaotao.Monitorable)定义的切点，假如Waiter类标注了@Monitorable注解，则Waiter以及Waiter实现类NaiveWaiter类的所有连接点都匹配。 </td><br>  </tr><br>  <tr><br>    <td bgcolor="grey">目标类切点函数  </td><br>    <td>@target()</td><br>    <td>类型注解类名</td><br>    <td>目标类标注了特定注解，则目标类所有连接点匹配该切点。如@target(com.baobaotao.Monitorable)，假如NaiveWaiter标注了@Monitorable，则NaiveWaiter所有连接点匹配切点。</td><br>  </tr><br>  <tr><br>    <td bgcolor="green">代理类切点函数  </td><br>    <td>this() </td><br>    <td>类名 </td><br>    <td>主要为this()，大多数情况使用方法与target()相同，区别在通过引介增强引入新接口方法时，新的接口方法同样会被this()定位，但target()则不会。</td><br>  </tr><br></table><h2 id="通配符"><a href="#通配符" class="headerlink" title="通配符"></a>通配符</h2><p>我们来了解下AspectJ类型匹配的通配符：</p><ul><li>*：匹配任何数量字符</li><li>..：匹配任何数量字符的重复，如在类型模式中匹配任何数量子包；而在方法参数模式中匹配任何数量参数</li><li>+：匹配指定类型的子类型；仅能作为后缀放在类型模式后边</li></ul><p>例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">java.lang.String    匹配String类型；  </span><br><span class="line">java.*.String       匹配java包下的任何“一级子包”下的String类型；  </span><br><span class="line">如匹配java.lang.String，但不匹配java.lang.ss.String  </span><br><span class="line">java..*            匹配java包及任何子包下的任何类型;  </span><br><span class="line">                  如匹配java.lang.String、java.lang.annotation.Annotation  </span><br><span class="line">java.lang.*ing      匹配任何java.lang包下的以ing结尾的类型；  </span><br><span class="line">java.lang.Number+  匹配java.lang包下的任何Number的自类型；  </span><br><span class="line">                   如匹配java.lang.Integer，也匹配java.math.BigInteger</span><br></pre></td></tr></table></figure></p><h2 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h2><ul><li>&amp;&amp;: 与操作符，等效and</li><li>||：或操作符，等效or</li><li>！：非操作符，等效not</li></ul><p>如：！winth(com.demo1.<em>)表示所有不在com.demo3包中的方法<br>   winth（com.demo1.</em>)&amp;&amp;args(String)表示在com.demo1包下所有类拥有一个String参数的方法<br>   winth(com.demo1.*)||args(String)表示在com.demo1包下或者拥有一个参数为String的所有方法</p><h2 id="不同增强类型"><a href="#不同增强类型" class="headerlink" title="不同增强类型"></a>不同增强类型</h2><ul><li>@Before：前置增强，相当于BeforeAdvice。Before注解有两个类成员。<ul><li>value：该成员用于定义切点</li><li>argNames：由于无法通过Java反射机制获取方法入参名，如果在Java编译时未启动调用信息，或者需要在运行期间解析切点，就必须通过这个成员指定注解所标注增强的方法参数名（两者名字必须相同），多个参数用逗号分离</li></ul></li><li>AfterReturning：后置增强，相当于AfterReturningAdvice。AfterReturning有四个类成员<ul><li>value：定义切点</li><li>pointcut：表示切点的信息。如果显式指定pointcut的值，将覆盖value的值，可以将pointcut看做value的近义词</li><li>returning：将目标对象方法的返回值绑定给增强的方法。<br>+argNames：同前面</li></ul></li><li>Around：环绕增强，相当于MethodInterceptor。两个类成员<ul><li>value</li><li>argNames</li></ul></li><li>AfterThrowing：抛出增强，相当于ThrowAdvice。四个类成员<ul><li>value</li><li>pointcut</li><li>throwing：将抛出的异常保绑定在增强方法中</li><li>argNames</li></ul></li><li>@After：final增强，不管是抛出异常还是正常退出，该增强都会得到执行。两个类成员。<ul><li>value</li><li>argNames</li></ul></li><li>DeclareParents：引介增强，相当于IntroductionInterceptor。两个类成员。<ul><li>value</li><li>defaultImpl：默认接口实现类</li></ul></li></ul><h2 id="一个例子"><a href="#一个例子" class="headerlink" title="一个例子"></a>一个例子</h2><p>NaiveWaiter代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">package com;</span><br><span class="line"></span><br><span class="line">public class NaiveWaiter implements Waiter &#123;</span><br><span class="line">    public void greetTo(String name) &#123;</span><br><span class="line">        System.out.println(&quot;greet to &quot;+name+&quot;!&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void serverTo(String name) &#123;</span><br><span class="line">        System.out.println(&quot;server to &quot;+name+&quot;!&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>使用@AspectJ定义一个切面PreGreetingAspect：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">package com.AspectJ;</span><br><span class="line">import org.aspectj.lang.annotation.Aspect;</span><br><span class="line">import org.aspectj.lang.annotation.Before;</span><br><span class="line">@Aspect </span><br><span class="line">public class PreGreetingAspect &#123;</span><br><span class="line">    @Before(&quot;execution(* greetTo(..))&quot;)</span><br><span class="line">    public  void beforeGreeting()&#123;</span><br><span class="line">        System.out.println(&quot;how are you~&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>@AspectJ注解表示该类是一个切面。Before注解表示该增强是前置增强,成员值表示在目标类的greetTo方法上添加增强，greetTo（）方法可以带任意的参数和返回值。PreGreetingAspect类相当于BeforeAdvice，NameMatchMethodPointcut，DefaultPointcutAdvisor三者联合表达的信息。<br>配置@Aspect切面：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class="line">       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:aop=&quot;http://www.springframework.org/schema/aop&quot;</span><br><span class="line">       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--给予@AspectJ切面的驱动器--&gt;</span><br><span class="line">    &lt;aop:aspectj-autoproxy/&gt;</span><br><span class="line">    &lt;!--目标bean--&gt;</span><br><span class="line">    &lt;bean id=&quot;waiter&quot; class=&quot;com.NaiveWaiter&quot;/&gt;</span><br><span class="line">    &lt;!-- 使用AspectJ注解的切面类--&gt;</span><br><span class="line">    &lt;bean class=&quot;com.AspectJ.PreGreetingAspect&quot;/&gt;</span><br><span class="line"></span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure></p><p><code>&lt;aop:aspectj-autoproxy/&gt;</code>自动为Spring容器中那些匹配@AspectJ切面的Bean创建代理，完成切面织入。  </p><h2 id="命名切点"><a href="#命名切点" class="headerlink" title="命名切点"></a>命名切点</h2><p>上一个例子，切点直接在增强方法处声明，这种方式称为匿名切点，匿名切点只能在声明处使用。如果需要在其他地方重用一个切点，可以通过@Pointcut注解以及切面类的方法来命名切点。<br>一个切入点有助于确定使用不同建议执行的感兴趣的连接点（即方法）。在处理基于配置的 XML 架构时，切入点的声明有两个部分：</p><ul><li>一个切入点表达式决定了我们感兴趣的哪个方法会真正被执行</li><li>一个切入点标签包含一个名称和任意数量的参数。方法的真正内容是不相干的，并且实际上它应该是空的</li></ul><p>###例子<br>一个目标POJO类Student：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">package com.PointCut;</span><br><span class="line"></span><br><span class="line">public class Student &#123;</span><br><span class="line">    private String name;</span><br><span class="line">    private int age;</span><br><span class="line"></span><br><span class="line">    public String getName() &#123;</span><br><span class="line">        System.out.println(&quot;Name:&quot;+name);</span><br><span class="line">        return name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setName(String name) &#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int getAge() &#123;</span><br><span class="line">        System.out.println(&quot;Age:&quot;+age);</span><br><span class="line">        return age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setAge(int age) &#123;</span><br><span class="line">        this.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void printThrowException()throws Exception&#123;</span><br><span class="line">        System.out.println(&quot;Exception raised&quot;);</span><br><span class="line">        throw new IllegalArgumentException();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>定义了切点的切面Logging：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">package com.PointCut;</span><br><span class="line"></span><br><span class="line">import org.aspectj.lang.annotation.*;</span><br><span class="line"></span><br><span class="line">@Aspect</span><br><span class="line">public class Logging &#123;</span><br><span class="line">    @Pointcut(&quot;execution(* com.PointCut.*.*(..))&quot;)</span><br><span class="line">    private void selectAll()&#123;&#125;//定义一个切点，定位在com.PointCut中所有类，所有方法</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Before(&quot;selectAll()&quot;)</span><br><span class="line">    public void beforeAdvice()&#123;</span><br><span class="line">        System.out.println(&quot;Going to setup Student profile&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @After(&quot;selectAll()&quot;)</span><br><span class="line">    public void afterAdvice()&#123;</span><br><span class="line">        System.out.println(&quot;Student profile has been setup&quot;);</span><br><span class="line">    &#125;//final增强，无论何时都会执行</span><br><span class="line"></span><br><span class="line">    @AfterReturning(pointcut = &quot;selectAll()&quot;,returning = &quot;returnVal&quot;)</span><br><span class="line">    public void afterReturning(Object returnVal)&#123;</span><br><span class="line">        System.out.println(&quot;Returning&quot;+returnVal.toString());</span><br><span class="line">    &#125;// 在selectAll切点定位的连接点织入后置增强，无论返回任何方式的返回值</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @AfterThrowing(pointcut = &quot;selectAll()&quot;, throwing = &quot;ex&quot;)</span><br><span class="line">    public void AfterThrowingAdvice(IllegalArgumentException ex)&#123;</span><br><span class="line">        System.out.println(&quot;There has been an exception: &quot; + ex.toString());</span><br><span class="line">    &#125;//当遇到异常抛出时，该增强被执行。</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>XML配置文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class="line">       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:aop=&quot;http://www.springframework.org/schema/aop&quot;</span><br><span class="line">       xmlns:p=&quot;http://www.springframework.org/schema/p&quot;</span><br><span class="line">       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--基于@AspectJ切面的驱动器--&gt;</span><br><span class="line">    &lt;aop:aspectj-autoproxy/&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--目标bean--&gt;</span><br><span class="line">    &lt;bean id=&quot;student&quot; class=&quot;com.PointCut.Student&quot;</span><br><span class="line">          p:name=&quot;wade&quot;</span><br><span class="line">          p:age=&quot;21&quot;/&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--使用了AspectJ的切面类 --&gt;</span><br><span class="line">    &lt;bean id=&quot;logging&quot; class=&quot;com.PointCut.Logging&quot;/&gt;</span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure></p><p>测试代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">package com;</span><br><span class="line"></span><br><span class="line">import com.PointCut.Student;</span><br><span class="line">import org.springframework.context.ApplicationContext;</span><br><span class="line">import org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line">import org.testng.annotations.Test;</span><br><span class="line"></span><br><span class="line">public class TestPointcut &#123;</span><br><span class="line">    @Test</span><br><span class="line">    public void test()throws Exception&#123;</span><br><span class="line">        ApplicationContext context=new ClassPathXmlApplicationContext(&quot;com/PointCut/PointCut.xml&quot;);</span><br><span class="line">        Student student=(Student)context.getBean(&quot;student&quot;);</span><br><span class="line">        student.getAge();</span><br><span class="line">        student.getName();</span><br><span class="line">        student.printThrowException();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>输出结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Going to setup Student profile</span><br><span class="line">Age:21</span><br><span class="line">Student profile has been setup</span><br><span class="line">Returning21</span><br><span class="line">Going to setup Student profile</span><br><span class="line">Name:wade</span><br><span class="line">Student profile has been setup</span><br><span class="line">Returningwade</span><br><span class="line">Going to setup Student profile</span><br><span class="line">Exception raised</span><br><span class="line">Student profile has been setup</span><br><span class="line">There has been an exception: java.lang.IllegalArgumentException</span><br><span class="line">..............</span><br></pre></td></tr></table></figure></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>使用@AspectJ注解可以简化Spring AOP，需要自己记住那些复杂的切点函数。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;AspectJ&quot;&gt;&lt;a href=&quot;#AspectJ&quot; class=&quot;headerlink&quot; title=&quot;@AspectJ&quot;&gt;&lt;/a&gt;@AspectJ&lt;/h1&gt;&lt;p&gt;前面Spring AOP的配置十分复杂，需要在XML文件中包含许多代码，但使用@AspectJ后，可以非常容易的定义一个切面。&lt;br&gt;
    
    </summary>
    
      <category term="study" scheme="https://watermelon-lee.github.io/categories/study/"/>
    
    
      <category term="Spring" scheme="https://watermelon-lee.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>bike</title>
    <link href="https://watermelon-lee.github.io/2018/04/11/bike/"/>
    <id>https://watermelon-lee.github.io/2018/04/11/bike/</id>
    <published>2018-04-11T15:06:05.000Z</published>
    <updated>2018-04-11T15:23:33.483Z</updated>
    
    <content type="html"><![CDATA[<h1 id="NEW-CAR-—-小圆子"><a href="#NEW-CAR-—-小圆子" class="headerlink" title="NEW CAR!!—-小圆子"></a>NEW CAR!!—-小圆子</h1><p>4.9小窝中又加了新的成员啦=!=<br>他叫小圆子，我们的新车，和远远一起拐到我们家啦，也算是完成了上学期的小目标  </p><h2 id="DIY-Time"><a href="#DIY-Time" class="headerlink" title="DIY Time"></a>DIY Time</h2><p>刚收到小圆子的话他被装在一个大大的长方形盒子，安静的躺好了。然后两个人一起装了大概两节课吧，第一次体验组装单车，还好远远心灵手巧～<br><img src="../../../../img/bike/bike3.jpg" alt="bike3"><br><a id="more"></a><br><img src="../../../../img/bike/bike1.jpg" alt="bike1"><br><img src="../../../../img/bike/bike4.jpg" alt="bike4"><br><img src="../../../../img/bike/bike2.jpg" alt="bike2"></p><h2 id="表现"><a href="#表现" class="headerlink" title="表现"></a>表现</h2><p>谈一下小圆子这几天的表现吧。任劳任怨，每天一大早就背着我们吃饭上课去图书馆，晚上还得送我们回家。虽然他一开始一直拉肚子，不过在换了一个胎盖之后就好啦。不过可能是对于我们一天到晚一直骑着它有些生气，骑着的时候有时候会哼哼的叫&gt;!&lt;<br>当然，小圆子还是很不错的，很喜欢。以后好好表现咯～</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;NEW-CAR-—-小圆子&quot;&gt;&lt;a href=&quot;#NEW-CAR-—-小圆子&quot; class=&quot;headerlink&quot; title=&quot;NEW CAR!!—-小圆子&quot;&gt;&lt;/a&gt;NEW CAR!!—-小圆子&lt;/h1&gt;&lt;p&gt;4.9小窝中又加了新的成员啦=!=&lt;br&gt;他叫小圆子，我们的新车，和远远一起拐到我们家啦，也算是完成了上学期的小目标  &lt;/p&gt;
&lt;h2 id=&quot;DIY-Time&quot;&gt;&lt;a href=&quot;#DIY-Time&quot; class=&quot;headerlink&quot; title=&quot;DIY Time&quot;&gt;&lt;/a&gt;DIY Time&lt;/h2&gt;&lt;p&gt;刚收到小圆子的话他被装在一个大大的长方形盒子，安静的躺好了。然后两个人一起装了大概两节课吧，第一次体验组装单车，还好远远心灵手巧～&lt;br&gt;&lt;img src=&quot;../../../../img/bike/bike3.jpg&quot; alt=&quot;bike3&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="home" scheme="https://watermelon-lee.github.io/categories/home/"/>
    
    
      <category term="car" scheme="https://watermelon-lee.github.io/tags/car/"/>
    
  </entry>
  
  <entry>
    <title>Spring-AOP基础</title>
    <link href="https://watermelon-lee.github.io/2018/04/11/Spring-AOP/"/>
    <id>https://watermelon-lee.github.io/2018/04/11/Spring-AOP/</id>
    <published>2018-04-11T03:00:41.000Z</published>
    <updated>2018-04-24T05:13:38.276Z</updated>
    
    <content type="html"><![CDATA[<h1 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h1><p>AOP是aspect oriented programing的简称，意为面向切面编程。有时候我们无法通过抽象父类消除重复性的横切代码，因为这些横切逻辑依赖在业务流程中，无法转移到另外的地方。AOP希望将这些分散在各个业务逻辑中的相同代码通过横向切割的方式抽取到独立的模块中，还业务逻辑类一个清新的世界。</p><h2 id="术语"><a href="#术语" class="headerlink" title="术语"></a>术语</h2><ul><li>连接点（Joinpoint）：特定点是程序执行的某个位置，如类的开始初始化前，初始化后，类的某个方法调用前后，方法抛出异常后。一个类或者一段程序代码拥有的一些具有边界性质的特定点被成为连接点。Spring仅支持方法的连接点。使用切点对执行点定义，而方位则在增强类中定义。</li><li>切点（Pointcut）：每个程序都有众多的连接点，连接点是客观存在的事务。在众多连接点中定位到我们需要的连接点就是切点。连接点相当于数据库中的记录，切点就是相当于条件查询。切点用过org.springframework.aop.Pointcut接口进行描述，使用类和方法进行作为连接点的查询条件，切点只定位到某方法上，如果需要确定到某连接点，还需要提供方位信息。</li><li>增强（Advice）：增强是织入目标类连接点上的一段程序代码。增强除了用于描述一段代码外，还拥有一个和连接点相关的信息，这便是执行点的方位。所以增强接口都是带方位名的，如：BeforeAdvice，AfterReturningAdvice，ThThrowsAdvice等。只有结合切点增强，才能确定特定连接点的位置，并实施增强逻辑。</li><li>目标对象（Target）：增强织入的目标类。</li><li>引介（Introduction）：引介是一种特殊的增强，它可以为类添加属性和方法。</li><li>织入（Weaving）:织入是将增强添加到目标类的具体连接点上。</li><li>代理（Proxy）：一个类被AOP织入增强后，就产生了一个结果类，他是融合了原类和增强逻辑的代理类。</li></ul><a id="more"></a><h2 id="底层工作机理"><a href="#底层工作机理" class="headerlink" title="底层工作机理"></a>底层工作机理</h2><p>Spring AOP使用了两种代理机制：一种是基于JDK的动态代理；另一种是基于GGLib的动态代理。</p><h3 id="带有横切逻辑的实例"><a href="#带有横切逻辑的实例" class="headerlink" title="带有横切逻辑的实例"></a>带有横切逻辑的实例</h3><p>forumService接口<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">package com.JDK_Proxy;</span><br><span class="line"></span><br><span class="line">public interface ForumService &#123;</span><br><span class="line">void removeTopic(int topicId);</span><br><span class="line">void removeForum(int forumId);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>实现forumService的类，其中包含了性能监视的横切逻辑：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">package com.JDK_Proxy;</span><br><span class="line"></span><br><span class="line">public class ForumServiceImpl implements ForumService &#123;</span><br><span class="line"></span><br><span class="line">public void removeTopic(int topicId) &#123;</span><br><span class="line">PerformanceMonitor.begin(&quot;com.smart.proxy.ForumServiceImpl.removeTopic&quot;);//开始对方法进行性能监视</span><br><span class="line">System.out.println(&quot;模拟删除Topic记录:&quot;+topicId);</span><br><span class="line">try &#123;</span><br><span class="line">Thread.currentThread().sleep(20);</span><br><span class="line">&#125; catch (Exception e) &#123;</span><br><span class="line">throw new RuntimeException(e);</span><br><span class="line">&#125;</span><br><span class="line">PerformanceMonitor.end();//结束监视</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void removeForum(int forumId) &#123;</span><br><span class="line">PerformanceMonitor.begin(&quot;com.smart.proxy.ForumServiceImpl.removeForum&quot;);//开始监视</span><br><span class="line">System.out.println(&quot;模拟删除Forum记录:&quot;+forumId);</span><br><span class="line">try &#123;</span><br><span class="line">Thread.currentThread().sleep(40);</span><br><span class="line">&#125; catch (Exception e) &#123;</span><br><span class="line">throw new RuntimeException(e);</span><br><span class="line">&#125;</span><br><span class="line">PerformanceMonitor.end();//结束监视</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在该类中，每个业务方法都有执行相同的逻辑代码，启动与结束监视。  </p><p>PerformanceMonitor：性能监视类<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">package com.JDK_Proxy;</span><br><span class="line"></span><br><span class="line">public class PerformanceMonitor &#123;</span><br><span class="line">private static ThreadLocal&lt;MethodPerformace&gt; performaceRecord = new ThreadLocal&lt;MethodPerformace&gt;();</span><br><span class="line"></span><br><span class="line">public static void begin(String method) &#123;</span><br><span class="line">System.out.println(&quot;begin monitor...&quot;);</span><br><span class="line">MethodPerformace mp = performaceRecord.get();</span><br><span class="line">if(mp == null)&#123;</span><br><span class="line">mp = new MethodPerformace(method);</span><br><span class="line">performaceRecord.set(mp);</span><br><span class="line">&#125;else&#123;</span><br><span class="line">    mp.reset(method);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">public static void end() &#123;</span><br><span class="line">System.out.println(&quot;end monitor...&quot;);</span><br><span class="line">MethodPerformace mp = performaceRecord.get();</span><br><span class="line">mp.printPerformace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>MethodPerformance：记录性能监视的信息<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">package com.JDK_Proxy;</span><br><span class="line"></span><br><span class="line">public class MethodPerformace &#123;</span><br><span class="line">private long begin;</span><br><span class="line">private long end;</span><br><span class="line">private String serviceMethod;</span><br><span class="line">    public MethodPerformace(String serviceMethod)&#123;</span><br><span class="line">    reset(serviceMethod);</span><br><span class="line">    &#125;</span><br><span class="line">    public void printPerformace()&#123;</span><br><span class="line">        end = System.currentTimeMillis();</span><br><span class="line">        long elapse = end - begin;</span><br><span class="line">        System.out.println(serviceMethod+&quot;花费&quot;+elapse+&quot;毫秒。&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    public void reset(String serviceMethod)&#123;</span><br><span class="line">    this.serviceMethod = serviceMethod;</span><br><span class="line">    this.begin = System.currentTimeMillis();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>运行测试代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">package com.JDK_Proxy;</span><br><span class="line"></span><br><span class="line">public class Main &#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        ForumService forumService=new ForumServiceImpl();</span><br><span class="line">        forumService.removeTopic(12);</span><br><span class="line">        forumService.removeForum(21);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>输出结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">begin monitor...</span><br><span class="line">模拟删除Topic记录:12</span><br><span class="line">end monitor...</span><br><span class="line">com.smart.proxy.ForumServiceImpl.removeTopic花费20毫秒。</span><br><span class="line">begin monitor...</span><br><span class="line">模拟删除Forum记录:21</span><br><span class="line">end monitor...</span><br><span class="line">com.smart.proxy.ForumServiceImpl.removeForum花费43毫秒。</span><br></pre></td></tr></table></figure></p><p>在以上例子中，在forumServiceImpl业务逻辑代码中都加入了开启，关闭性能监视的代码，破坏了编程的纯粹性。通过代理的方式可以将业务类方法中开启和结束性能监视的横切代码抽象出来，通过JDK动态代理的方式将横切代码动态的织入目标方法的相应位置。</p><h3 id="JDK动态代理"><a href="#JDK动态代理" class="headerlink" title="JDK动态代理"></a>JDK动态代理</h3><p>JDK动态代理主要涉及java.lang.reflect包中的两类：Proxy和InvocationHandler。其中InvocationHandler是一个接口，通过实现该接口定义横切逻辑，并通过反射机制调用目标类的代码，动态的将横切逻辑与业务编制到一起。</p><p>首先从forumServiceImpl中移除性能监视的代码，使其只负责具体的业务逻辑：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">package com.JDK_Proxy;</span><br><span class="line"></span><br><span class="line">public class ForumServiceImpl implements ForumService &#123;</span><br><span class="line"></span><br><span class="line">public void removeTopic(int topicId) &#123;</span><br><span class="line">//PerformanceMonitor.begin(&quot;com.smart.proxy.ForumServiceImpl.removeTopic&quot;);</span><br><span class="line">System.out.println(&quot;模拟删除Topic记录:&quot;+topicId);</span><br><span class="line">try &#123;</span><br><span class="line">Thread.currentThread().sleep(20);</span><br><span class="line">&#125; catch (Exception e) &#123;</span><br><span class="line">throw new RuntimeException(e);</span><br><span class="line">&#125;</span><br><span class="line">//PerformanceMonitor.end();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void removeForum(int forumId) &#123;</span><br><span class="line">//PerformanceMonitor.begin(&quot;com.smart.proxy.ForumServiceImpl.removeForum&quot;);</span><br><span class="line">System.out.println(&quot;模拟删除Forum记录:&quot;+forumId);</span><br><span class="line">try &#123;</span><br><span class="line">Thread.currentThread().sleep(40);</span><br><span class="line">&#125; catch (Exception e) &#123;</span><br><span class="line">throw new RuntimeException(e);</span><br><span class="line">&#125;</span><br><span class="line">//PerformanceMonitor.end();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在业务类中移除了性能监视的代码后，InvocationHandler是其安身的好地方，可将性能监视的代码放在实现了InvocationHandler的PerformanceHandler中：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">package com.JDK_Proxy;</span><br><span class="line"></span><br><span class="line">import java.lang.reflect.InvocationHandler;</span><br><span class="line">import java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line">public class PerformanceHandler implements InvocationHandler &#123;//实现InvocationHandler类</span><br><span class="line">    private Object target;</span><br><span class="line"></span><br><span class="line">    public PerformanceHandler(Object target) &#123;</span><br><span class="line">        this.target = target;</span><br><span class="line">    &#125;//target为业务目标</span><br><span class="line"></span><br><span class="line">    public Object invoke(Object o, Method method, Object[] objects) throws Throwable &#123;//o是最终生产的代理类，method是被代理的目标实例的某个方法，通过它可以发起目标实例方法的反射调用。objects是被代理实例某个方法的入参，在方法反射调用时使用。</span><br><span class="line">        PerformanceMonitor.begin(target.getClass().getName()+&quot;.&quot;+method.getName());</span><br><span class="line">        Object o1=method.invoke(target,objects);//通过反射方法调用业务类的目标方法</span><br><span class="line">        PerformanceMonitor.end();</span><br><span class="line">        return o1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>通过Proxy结合PerformanceHandler创建ForumService接口代理实例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">package com.JDK_Proxy;</span><br><span class="line">        import org.testng.annotations.Test;</span><br><span class="line">        import java.lang.reflect.Proxy;</span><br><span class="line">public class ForumServiceTest &#123;</span><br><span class="line">    @Test</span><br><span class="line">    public void proxy()&#123;</span><br><span class="line">        ForumService target=new ForumServiceImpl();</span><br><span class="line">        PerformanceHandler handler=new PerformanceHandler(target);</span><br><span class="line">        ForumService proxy=(ForumService) Proxy.newProxyInstance(target.getClass().getClassLoader(),target.getClass().getInterfaces(),handler);</span><br><span class="line">        proxy.removeForum(10);</span><br><span class="line">        proxy.removeTopic(11);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>调用代理实例，得到结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">begin monitor...</span><br><span class="line">模拟删除Forum记录:10</span><br><span class="line">end monitor...</span><br><span class="line">com.JDK_Proxy.ForumServiceImpl.removeForum花费40毫秒。</span><br><span class="line">begin monitor...</span><br><span class="line">模拟删除Topic记录:11</span><br><span class="line">end monitor...</span><br><span class="line">com.JDK_Proxy.ForumServiceImpl.removeTopic花费20毫秒。</span><br></pre></td></tr></table></figure></p><p>时序图中的整体逻辑：<br><img src="../../../../img/Spring/ForumService.jpg" alt="ForumService"></p><h2 id="创建增强类"><a href="#创建增强类" class="headerlink" title="创建增强类"></a>创建增强类</h2><p>Spring增强总共分为5种：</p><ul><li>前置增强（BeforeAdvice）</li><li>后置增强（AfterReturningAdvice）</li><li>环绕增强（MethodInterceptor）</li><li>异常抛出增强（ThrowAdvice）</li><li>引介增强（IntroductionInterceptor)</li></ul><h3 id="前置增强与后置增强"><a href="#前置增强与后置增强" class="headerlink" title="前置增强与后置增强"></a>前置增强与后置增强</h3><p>一个服务生应当对客户进行招呼和服务，Waiter接口：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">package com.Advice;</span><br><span class="line"></span><br><span class="line">public interface Waiter &#123;</span><br><span class="line">    void greetTo(String name);</span><br><span class="line">    void serverTo(String name);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>一个训练不足的服务生在招呼客户时不使用礼貌用语，在服务后不使用礼貌用语，NaiveWaiter类：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">package com.Advice;</span><br><span class="line"></span><br><span class="line">public class NaiveWaiter implements Waiter &#123;</span><br><span class="line">    public void greetTo(String name) &#123;</span><br><span class="line">        System.out.println(&quot;greet to &quot;+name+&quot;!&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void serverTo(String name) &#123;</span><br><span class="line">        System.out.println(&quot;server to &quot;+name+&quot;!&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>让服务生在打招呼前使用的服务用语，GreetingBeforeAdvice类：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">package com.Advice;</span><br><span class="line"></span><br><span class="line">import org.springframework.aop.MethodBeforeAdvice;</span><br><span class="line"></span><br><span class="line">import java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line">public class GreetingBeforeAdvice implements MethodBeforeAdvice &#123;</span><br><span class="line">    public void before(Method method, Object[] objects, Object o) throws Throwable &#123; //method为目标类方法,objects为目标方法的入参  o为目标类实例</span><br><span class="line">        String name=(String)objects[0];</span><br><span class="line">        System.out.println(&quot;How are you! Mr&quot;+name+&quot;!&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>让服务生在服务后使用的礼貌用语，GreetingAfterAdvice类：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">package com.Advice;</span><br><span class="line"></span><br><span class="line">import org.springframework.aop.AfterReturningAdvice;</span><br><span class="line"></span><br><span class="line">import java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line">public class GreetingAfterAdvice implements AfterReturningAdvice &#123;</span><br><span class="line">    public void afterReturning(Object o, Method method, Object[] objects, Object o1) throws Throwable &#123;</span><br><span class="line">        String name=(String)objects[0];</span><br><span class="line">        System.out.println(&quot;Please enjoy!&quot;+name+&quot;~&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在XML中使用Spring的ProxyFactory来配置代理，将增强织入到目标类中：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class="line">       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:p=&quot;http://www.springframework.org/schema/p&quot;</span><br><span class="line">       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;bean id=&quot;greetingBeforeAdvice&quot; class=&quot;com.Advice.GreetingBeforeAdvice&quot;/&gt;</span><br><span class="line">    &lt;bean id=&quot;greatingAfterAdvice&quot; class=&quot;com.Advice.GreetingAfterAdvice&quot;/&gt;</span><br><span class="line">    &lt;bean id=&quot;target&quot; class=&quot;com.Advice.NaiveWaiter&quot;/&gt;</span><br><span class="line">    &lt;bean id=&quot;waiter&quot; class=&quot;org.springframework.aop.framework.ProxyFactoryBean&quot;</span><br><span class="line">          p:proxyInterfaces=&quot;com.Advice.Waiter&quot;</span><br><span class="line">          p:interceptorNames=&quot;greetingBeforeAdvice,greatingAfterAdvice&quot;</span><br><span class="line">          p:target-ref=&quot;target&quot;/&gt;</span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure></p><p>ProxyFactoryBean是FactoryBean接口的实现类,负责为其他Bean创建代理实例,在内部使用ProxyFactory来实现<br>        ProxyFactoryBean属性:<br>            target:代理的目标对象<br>            proxyInterfaces:代理所需要实现的接口,可以是多个接口<br>            interceptorNames:需要织入的目标对象<br>            singleton:返回的代理是否为单实例,默认是<br>            optimize:当设置为True时,使用GGlib动态代理,对于singleton的代理,推荐使用.其他作用域的代理使用JDK动态代理<br>            proxyTargetClass:是否对类进行代理,而不是对接口代理.设置为True时,使用GGLib代理  </p><h3 id="环绕增强"><a href="#环绕增强" class="headerlink" title="环绕增强"></a>环绕增强</h3><p>环绕增强可在目标类方法调用前后织入横切逻辑，使用环绕增强实现前后礼貌用语，GreetingInterceptor类：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">package com.Advice;</span><br><span class="line"></span><br><span class="line">import org.aopalliance.intercept.MethodInterceptor;</span><br><span class="line">import org.aopalliance.intercept.MethodInvocation;</span><br><span class="line"></span><br><span class="line">public class GreetingInterceptor implements MethodInterceptor &#123;</span><br><span class="line">    public Object invoke(MethodInvocation methodInvocation) throws Throwable &#123;</span><br><span class="line">        Object[] objects=methodInvocation.getArguments();//获得目标方法的参数</span><br><span class="line">        String name=(String)objects[0];</span><br><span class="line">        System.out.println(&quot;How are you,Mr.&quot;+name+&quot;!&quot;);//在执行目标方法前调用</span><br><span class="line">        Object obj=methodInvocation.proceed();//通过通过反射机制调用目标方法</span><br><span class="line">        System.out.println(&quot;please enjoy&quot;);//在目标方法执行后调用</span><br><span class="line">        return obj;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Spring直接使用MethodInterceptor作为环绕增强的接口,该接口有唯一的方法：<br>public Object invoke(MethodInvocation methodInvocation) throws Throwable。MethodInvocation不但封装了目标方法及其参数组,还封装了目标方法所在的实力对象,通过MethodInterceptor的getArguments()方法可以获取目标方法的参数组,通过proceed()方法反射调用目标实例相应方法。  </p><p>XML配置文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class="line">       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:p=&quot;http://www.springframework.org/schema/p&quot;</span><br><span class="line">       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;bean id=&quot;greetingInterceptor&quot; class=&quot;com.Advice.GreetingInterceptor&quot;/&gt;</span><br><span class="line">    &lt;bean id=&quot;target&quot; class=&quot;com.Advice.NaiveWaiter&quot;/&gt;</span><br><span class="line">    &lt;bean id=&quot;waiter&quot; class=&quot;org.springframework.aop.framework.ProxyFactoryBean&quot;</span><br><span class="line">          p:target-ref=&quot;target&quot;</span><br><span class="line">          p:interceptorNames=&quot;greetingInterceptor&quot;</span><br><span class="line">          p:proxyInterfaces=&quot;com.Advice.Waiter&quot;/&gt;</span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure></p><h2 id="创建切面"><a href="#创建切面" class="headerlink" title="创建切面"></a>创建切面</h2><p>增强提供了连接点方位，如织入到方法前后，而切点进一步描述了织入哪些类的哪些方法上。<br>PointcutAdvisor包含Advice和Pointcut两类，这样就可以通过上面两类定位到类，方法，方法方位，提供合适的切面。<br>PointcutAdvisor主要有一下几个实现类：</p><ul><li>DefaultPointcutAdvisor：最常用的切面类型，通过任意的Pointcut和Advice定义一个切面，仅不支持引介切面。</li><li>NameMatchMethodPointAdvisor：通过该类可以定义按方法名定义切点的切面。</li><li>StaticMethodMatcherPointcutAdvisor：静态方法匹配切点定义的切面，默认情况下匹配所有目标类。</li></ul><h3 id="静态普通方法名匹配"><a href="#静态普通方法名匹配" class="headerlink" title="静态普通方法名匹配"></a>静态普通方法名匹配</h3><p>StaticMethodMatcherPointcutAdvisor代表一个静态方法匹配切面，通过StaticMethodMatcherPointcut来定义切点，通过类过滤和方法名匹配来定义切点。<br>代码Waiter：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">package com.Advisor;</span><br><span class="line"></span><br><span class="line">public class Waiter &#123;</span><br><span class="line">           public void greetTo(String name) &#123;</span><br><span class="line">            System.out.println(&quot;greet to &quot;+name+&quot;!&quot;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public void serverTo(String name) &#123;</span><br><span class="line">            System.out.println(&quot;server to &quot;+name+&quot;!&quot;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>代码Seller：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">package com.Advisor;</span><br><span class="line"></span><br><span class="line">public class Seller &#123;</span><br><span class="line">    public void greetTo(String name)&#123;</span><br><span class="line">        System.out.println(&quot;seller greet to&quot;+name+&quot;!&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Seller和Waiter有相同的方法greetTo（），使用StaticMethodMatcherPointcutAdvisor定义一个切面，在Waiter#greetTo（）方法调用前织入一个增强。<br>切面类GreetingAdvisor：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">package com.Advisor.StaticMethod;</span><br><span class="line"></span><br><span class="line">import com.Advisor.Waiter;</span><br><span class="line">import org.springframework.aop.ClassFilter;</span><br><span class="line">import org.springframework.aop.support.StaticMethodMatcherPointcutAdvisor;</span><br><span class="line"></span><br><span class="line">import java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line">public class greetAdvisor extends StaticMethodMatcherPointcutAdvisor &#123;</span><br><span class="line">    public boolean matches(Method method, Class&lt;?&gt; aClass) &#123;</span><br><span class="line">        return &quot;greetTo&quot;.equals(method.getName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public ClassFilter getClassFilter() &#123;//类别过滤器</span><br><span class="line">        return new ClassFilter() &#123;</span><br><span class="line">            public boolean matches(Class&lt;?&gt; aClass) &#123;</span><br><span class="line">                return Waiter.class.isAssignableFrom(aClass);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>StaticMethodMatcherPointcutAdvisor抽象类唯一需要实现的是matches（）方法。在默认的情况下匹配所有类，这里通过覆盖getClassFilter（）方法匹配Waiter类。<br>class1.isAssignableFrom(class2) 判定此 Class 对象所表示的类或接口与指定的 Class 参数所表示的类或接口是否相同，或是否是其超类或超接口。如果是则返回 true；否则返回 false。如果该 Class 表示一个基本类型，且指定的 Class 参数正是该 Class 对象，则该方法返回 true；否则返回 false。</p><p>配合Advisor的增强类GreeetingBeforeAdvice：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">package com.Advisor.StaticMethod;</span><br><span class="line"></span><br><span class="line">import org.springframework.aop.MethodBeforeAdvice;</span><br><span class="line"></span><br><span class="line">import java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line">public class greetBeforeAdvice implements MethodBeforeAdvice &#123;</span><br><span class="line">    public void before(Method method, Object[] objects, Object o) throws Throwable &#123;</span><br><span class="line">        System.out.println(o.getClass().getName()+&quot;.&quot;+method.getName()); //输出切点</span><br><span class="line">        String name=(String)objects[0];</span><br><span class="line">        System.out.println(&quot;How are you ! Mr&quot;+name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>使用Spring配置来定义切面：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class="line">       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:p=&quot;http://www.springframework.org/schema/p&quot;</span><br><span class="line">       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;!-- 普通方法名匹配切面 --&gt;</span><br><span class="line">    &lt;bean id=&quot;waiterTarget&quot; class=&quot;com.Advisor.Waiter&quot; /&gt;</span><br><span class="line">    &lt;bean id=&quot;sellerTarget&quot; class=&quot;com.Advisor.Seller&quot; /&gt;</span><br><span class="line">    &lt;bean id=&quot;greetingAdvice&quot; class=&quot;com.Advisor.StaticMethod.greetBeforeAdvice&quot; /&gt; &lt;!--注入一个前置增强--&gt;</span><br><span class="line"></span><br><span class="line">    &lt;bean id=&quot;greetingAdvisor&quot; class=&quot;com.Advisor.StaticMethod.greetAdvisor&quot;</span><br><span class="line">          p:advice-ref=&quot;greetingAdvice&quot; /&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--通过一个父bean定义公共信息--&gt;</span><br><span class="line"></span><br><span class="line">    &lt;bean id=&quot;parent&quot; abstract=&quot;true&quot;</span><br><span class="line">          class=&quot;org.springframework.aop.framework.ProxyFactoryBean&quot;</span><br><span class="line">          p:interceptorNames=&quot;greetingAdvisor&quot; p:proxyTargetClass=&quot;true&quot; /&gt;</span><br><span class="line">    &lt;bean id=&quot;waiter&quot; parent=&quot;parent&quot; p:target-ref=&quot;waiterTarget&quot; /&gt;</span><br><span class="line">    &lt;bean id=&quot;seller&quot; parent=&quot;parent&quot; p:target-ref=&quot;sellerTarget&quot; /&gt;</span><br><span class="line"></span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure></p><p>测试代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">package com.Advisor;</span><br><span class="line"></span><br><span class="line">import org.springframework.context.ApplicationContext;</span><br><span class="line">import org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line">import org.testng.annotations.Test;</span><br><span class="line"></span><br><span class="line">public class StaticMethod &#123;</span><br><span class="line">    @Test</span><br><span class="line">    public void start()&#123;</span><br><span class="line">        ApplicationContext context=new ClassPathXmlApplicationContext(&quot;com/Advisor/StaticMethod.xml&quot;);</span><br><span class="line">        Waiter waiter=(Waiter) context.getBean(&quot;waiter&quot;);</span><br><span class="line">        Seller seller=(Seller)context.getBean(&quot;seller&quot;);</span><br><span class="line">        waiter.greetTo(&quot;wade0&quot;);</span><br><span class="line">        waiter.serverTo(&quot;wade&quot;);</span><br><span class="line">        seller.greetTo(&quot;wade&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>输出结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">com.Advisor.Waiter.greetTo</span><br><span class="line">How are you ! Mrwade0</span><br><span class="line">greet to wade0!</span><br><span class="line">server to wade!</span><br><span class="line">seller greet towade!</span><br></pre></td></tr></table></figure></p><p>可以发现Waiter.GreetTo（）方法被织入了增强，而Seller.GreetTo()方法没有织入增强。  </p><h3 id="流程切面"><a href="#流程切面" class="headerlink" title="流程切面"></a>流程切面</h3><p>Spring的流程切面由DefaultPointcutAdvisor和ControlFlowPointcut实现，流程切点代表某个方法直接或间接发起调用其他的方法。通过一个WaiterDelegate类代理Waiter所有方法.<br>代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">package com.Advisor;</span><br><span class="line"></span><br><span class="line">public class WaiterDelegate &#123;</span><br><span class="line">    private Waiter waiter;</span><br><span class="line"></span><br><span class="line">    public void service(String name)&#123;</span><br><span class="line">        waiter.greetTo(name);</span><br><span class="line">        waiter.serverTo(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setWaiter(Waiter waiter) &#123;</span><br><span class="line">        this.waiter = waiter;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>如果希望WaiterDelegate#Service（）方法发起调用的其他方法都织入了GreetingBeforeAdvice增强，就必须使用流程切面来完成。</p><p>配置控制流程切面的代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class="line">       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:p=&quot;http://www.springframework.org/schema/p&quot;</span><br><span class="line">       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;bean id=&quot;greetingAdvice&quot; class=&quot;com.Advice.GreetingBeforeAdvice&quot;/&gt;</span><br><span class="line">    &lt;bean id=&quot;waiterTarget&quot; class=&quot;com.Advisor.Waiter&quot;/&gt;</span><br><span class="line">    &lt;bean id=&quot;controlFlowPointcut&quot; class=&quot;org.springframework.aop.support.ControlFlowPointcut&quot;&gt;</span><br><span class="line">        &lt;constructor-arg type=&quot;java.lang.Class&quot; value=&quot;com.Advisor.WaiterDelegate&quot;/&gt;</span><br><span class="line">        &lt;constructor-arg type=&quot;java.lang.String&quot; value=&quot;service&quot;/&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line">    &lt;bean id=&quot;controlFlowAdvisor&quot; class=&quot;org.springframework.aop.support.DefaultPointcutAdvisor&quot;</span><br><span class="line">          p:pointcut-ref=&quot;controlFlowPointcut&quot;</span><br><span class="line">          p:advice-ref=&quot;greetingAdvice&quot;/&gt;</span><br><span class="line">    &lt;bean id=&quot;waiter3&quot; class=&quot;org.springframework.aop.framework.ProxyFactoryBean&quot;</span><br><span class="line">          p:proxyTargetClass=&quot;true&quot;</span><br><span class="line">          p:target-ref=&quot;waiterTarget&quot;</span><br><span class="line">          p:interceptorNames=&quot;controlFlowAdvisor&quot;/&gt;</span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure></p><p>ControlFlowPointcut有两个构造函数，分别是ControlFlowPointcut（Class clazz）和ControlFlowPointcut（Class clazz，String methodName），第一个构造函数制定一个类作为流程切点，第二个构造函数指定一个类和一个方法作为流程切点。<br>测试代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">package com.Advisor;</span><br><span class="line"></span><br><span class="line">import org.springframework.context.ApplicationContext;</span><br><span class="line">import org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line">import org.testng.annotations.Test;</span><br><span class="line"></span><br><span class="line">public class ControlFlow &#123;</span><br><span class="line">    @Test</span><br><span class="line">    public void control() &#123;</span><br><span class="line">        String configPath = &quot;com/Advisor/ControlFlow.xml&quot;;</span><br><span class="line">        ApplicationContext ctx = new ClassPathXmlApplicationContext(configPath);</span><br><span class="line">        Waiter waiter = (Waiter) ctx.getBean(&quot;waiter3&quot;);</span><br><span class="line">        WaiterDelegate wd = new WaiterDelegate();</span><br><span class="line">        wd.setWaiter(waiter);</span><br><span class="line">        waiter.serverTo(&quot;Peter&quot;);</span><br><span class="line">        waiter.greetTo(&quot;Peter&quot;);</span><br><span class="line">        wd.service(&quot;Peter&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">server to Peter!</span><br><span class="line">greet to Peter!</span><br><span class="line">How are you! MrPeter!</span><br><span class="line">greet to Peter!</span><br><span class="line">How are you! MrPeter!</span><br><span class="line">server to Peter!</span><br></pre></td></tr></table></figure></p><p>可以看到一开始直接使用waiter的serverTo和greetTo方法都没有增强，而通过waiterDelegate中service方法调用waiter中的serverTo和greetTo即可。</p><h3 id="复合切点切面"><a href="#复合切点切面" class="headerlink" title="复合切点切面"></a>复合切点切面</h3><p>加入我们希望WaiterDelegate#service（）发起的调用且调用方法是greetTo时才织入增强，则这个切点就是复合切点，它由两个单独的切点确定。我们可以使用Spring提供的ComposablePointcut把两个切点组合起来。<br>Composable本身也是一个切点，实现了Pointcut接口。了解一下其构造函数：<br>ComposablePointcut() 构造一个匹配所有类所有方法的复合切点<br>ComposablePointcut(ClassFilter classFilter) 匹配特定类所有方法的复合切点<br>ComposablePointcut(MethodMatcher methodMatcher) 匹配所有类特定方法的切点<br>ComposablePointcut(ClassFilter classFilter,MethodMatcher methodMatcher) 匹配特定类特定方法的切点<br>交集复合的方法是：<br>ComposablePointcut intersection(ClassFilter classFilter) 将复合切点和一个ClassFilter对象进行交集运算，得到一个符合切点<br>ComposablePointcut intersection(MethodMatcher methodMatcher)  将复合切点和一个MethodMatcher对象进行交集运算，得到一个复合切点<br>ComposablePointcut intersection(Pointcut pointcut) 将复合切点和一个切点对象进行交集运算，得到一个复合切点<br>并集复合的方法是：<br>ComposablePointcut union(ClassFilter classFilter) 将复合切点和一个ClassFilter对象进行并集运算，得到一个符合切点<br>ComposablePointcut union(MethodMatcher methodMatcher) 将复合切点和一个MethodMatcher对象进行并集运算，得到一个符合切点<br>ComposablePointcut没有提供一个参数为Pointcut的union方法，可以使org.springframework.aop.support.Pointcuts工具类，有两个静态方法可以返回一个Pointcut这个Pointcut 正是ComposablePointcut。<br>Pointcut intersection(Pointcut a,Pointcut b) 两个切点交集运算<br>Pointcut union(Pointcut a,Pointcut b) 并集运算<br>代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">package com.Advisor.Composable;</span><br><span class="line"></span><br><span class="line">import com.Advisor.WaiterDelegate;</span><br><span class="line">import org.springframework.aop.Pointcut;</span><br><span class="line">import org.springframework.aop.support.ComposablePointcut;</span><br><span class="line">import org.springframework.aop.support.ControlFlowPointcut;</span><br><span class="line">import org.springframework.aop.support.NameMatchMethodPointcut;</span><br><span class="line"></span><br><span class="line">public class GreetingComposablePointcut &#123;</span><br><span class="line">    public Pointcut getIntersectionPointcut()&#123;</span><br><span class="line">        ComposablePointcut composablePointcut=new ComposablePointcut();//创建一个复合切点</span><br><span class="line"></span><br><span class="line">        Pointcut pointcut1=new ControlFlowPointcut(WaiterDelegate.class,&quot;service&quot;);//创建一个流程切点</span><br><span class="line"></span><br><span class="line">        NameMatchMethodPointcut pointcut2 =new NameMatchMethodPointcut();//创建一个方法名切点</span><br><span class="line"></span><br><span class="line">        pointcut2.addMethodName(&quot;greetTo&quot;);</span><br><span class="line"></span><br><span class="line">        return composablePointcut.intersection(pointcut1).intersection((Pointcut)pointcut2);//将两个切点进行交操作</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>配置文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class="line">       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:p=&quot;http://www.springframework.org/schema/p&quot;</span><br><span class="line">       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;bean id=&quot;waiterTaget&quot; class=&quot;com.Advisor.Waiter&quot;/&gt;</span><br><span class="line">    &lt;bean id=&quot;greetingAdvice&quot; class=&quot;com.Advice.GreetingBeforeAdvice&quot;/&gt;</span><br><span class="line">    &lt;bean id=&quot;gcp&quot; class=&quot;com.Advisor.Composable.GreetingComposablePointcut&quot;/&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 复合切点切面--&gt;</span><br><span class="line">    &lt;bean id=&quot;composableAdvisor&quot; class=&quot;org.springframework.aop.support.DefaultPointcutAdvisor&quot;</span><br><span class="line">          p:pointcut=&quot;#&#123;gcp.intersectionPointcut&#125;&quot;</span><br><span class="line">          p:advice-ref=&quot;greetingAdvice&quot;/&gt; &lt;!--调用gcp中的getIntersectionPointcut()方法的到复合切点--&gt;</span><br><span class="line"></span><br><span class="line">    &lt;bean id=&quot;waiter4&quot; class=&quot;org.springframework.aop.framework.ProxyFactoryBean&quot;</span><br><span class="line">          p:interceptorNames=&quot;composableAdvisor&quot;</span><br><span class="line">          p:target-ref=&quot;waiterTaget&quot;</span><br><span class="line">          p:proxyTargetClass=&quot;true&quot;/&gt;</span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure></p><p>测试代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">package com.Advisor;</span><br><span class="line"></span><br><span class="line">import org.springframework.context.ApplicationContext;</span><br><span class="line">import org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line">import org.testng.annotations.Test;</span><br><span class="line"></span><br><span class="line">public class Composable &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void composable()&#123;</span><br><span class="line">        String configPath = &quot;com/Advisor/Composable.xml&quot;;</span><br><span class="line">        ApplicationContext ctx = new ClassPathXmlApplicationContext(configPath);</span><br><span class="line">        Waiter waiter = (Waiter) ctx.getBean(&quot;waiter4&quot;);</span><br><span class="line">        WaiterDelegate wd = new WaiterDelegate();</span><br><span class="line">        wd.setWaiter(waiter);</span><br><span class="line">        waiter.serverTo(&quot;Peter&quot;);</span><br><span class="line">        waiter.greetTo(&quot;Peter&quot;);</span><br><span class="line">        wd.service(&quot;Peter&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">server to Peter!</span><br><span class="line">greet to Peter!</span><br><span class="line">How are you! MrPeter!</span><br><span class="line">greet to Peter!</span><br><span class="line">server to Peter!</span><br></pre></td></tr></table></figure></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>Spring底层使用的JDK动态代理和GGLib动态代理，使用JDK动态代理目标类必须实现接口，而GGLib动态代理则不做任何要求，它通过动态生成目标子类的方式提供代理。<br>Spring只能在方法级别上织入增强，Spring提供了4种级别的方法增强，前置增强，后置增强，环绕增强，异常抛出增强。增强其实就是最简单的一种切面，既包括横切代码，有包括切点信息。只不过他的切点位置是最简单的方法相对位置信息，所以一般需要和切点联合才可以表示一个更具实用性的切面。<br>切点一般通过目标类名和方法名来定位连接点信息。需要通过切点的交叉合并可以使用CompasablePiontcut的复合切点。<br>切面是增强和切点的联合，可以通过Spring提供的ProxyBeanFactory将切面织入不同的目标类中。<br>往往在配置时先定义目标对象的Bean，即Target。然后定义增强类（Advice），在定义切点（pointcut），之后定义切面，织入切点与增强，然后创建ProxyFactoryBean代理的代理类Bean。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;AOP&quot;&gt;&lt;a href=&quot;#AOP&quot; class=&quot;headerlink&quot; title=&quot;AOP&quot;&gt;&lt;/a&gt;AOP&lt;/h1&gt;&lt;p&gt;AOP是aspect oriented programing的简称，意为面向切面编程。有时候我们无法通过抽象父类消除重复性的横切代码，因为这些横切逻辑依赖在业务流程中，无法转移到另外的地方。AOP希望将这些分散在各个业务逻辑中的相同代码通过横向切割的方式抽取到独立的模块中，还业务逻辑类一个清新的世界。&lt;/p&gt;
&lt;h2 id=&quot;术语&quot;&gt;&lt;a href=&quot;#术语&quot; class=&quot;headerlink&quot; title=&quot;术语&quot;&gt;&lt;/a&gt;术语&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;连接点（Joinpoint）：特定点是程序执行的某个位置，如类的开始初始化前，初始化后，类的某个方法调用前后，方法抛出异常后。一个类或者一段程序代码拥有的一些具有边界性质的特定点被成为连接点。Spring仅支持方法的连接点。使用切点对执行点定义，而方位则在增强类中定义。&lt;/li&gt;
&lt;li&gt;切点（Pointcut）：每个程序都有众多的连接点，连接点是客观存在的事务。在众多连接点中定位到我们需要的连接点就是切点。连接点相当于数据库中的记录，切点就是相当于条件查询。切点用过org.springframework.aop.Pointcut接口进行描述，使用类和方法进行作为连接点的查询条件，切点只定位到某方法上，如果需要确定到某连接点，还需要提供方位信息。&lt;/li&gt;
&lt;li&gt;增强（Advice）：增强是织入目标类连接点上的一段程序代码。增强除了用于描述一段代码外，还拥有一个和连接点相关的信息，这便是执行点的方位。所以增强接口都是带方位名的，如：BeforeAdvice，AfterReturningAdvice，ThThrowsAdvice等。只有结合切点增强，才能确定特定连接点的位置，并实施增强逻辑。&lt;/li&gt;
&lt;li&gt;目标对象（Target）：增强织入的目标类。&lt;/li&gt;
&lt;li&gt;引介（Introduction）：引介是一种特殊的增强，它可以为类添加属性和方法。&lt;/li&gt;
&lt;li&gt;织入（Weaving）:织入是将增强添加到目标类的具体连接点上。&lt;/li&gt;
&lt;li&gt;代理（Proxy）：一个类被AOP织入增强后，就产生了一个结果类，他是融合了原类和增强逻辑的代理类。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="study" scheme="https://watermelon-lee.github.io/categories/study/"/>
    
    
      <category term="Spring" scheme="https://watermelon-lee.github.io/tags/Spring/"/>
    
  </entry>
  
</feed>
