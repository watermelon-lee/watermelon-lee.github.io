<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Watermelon</title>
  
  <subtitle>远远和元老大的小窝</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://watermelon-lee.github.io/"/>
  <updated>2018-06-19T15:59:26.734Z</updated>
  <id>https://watermelon-lee.github.io/</id>
  
  <author>
    <name>watermelon-lee</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>两个排序数组的中位数</title>
    <link href="https://watermelon-lee.github.io/2018/06/19/leetcode3/"/>
    <id>https://watermelon-lee.github.io/2018/06/19/leetcode3/</id>
    <published>2018-06-19T15:32:07.000Z</published>
    <updated>2018-06-19T15:59:26.734Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>给定两个大小为 m 和 n 的有序数组 nums1 和 nums2 。<br>请找出这两个有序数组的中位数。要求算法的时间复杂度为 O(log (m+n)) 。<br>示例 1:<br>nums1 = [1, 3]<br>nums2 = [2]<br>中位数是 2.0<br>示例 2:<br>nums1 = [1, 2]<br>nums2 = [3, 4]<br>中位数是 (2 + 3)/2 = 2.5<br><a id="more"></a></p><h1 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h1><p>这道题自己没能想出来,毕竟也被标记为困难.自己刚开始,没想出来也很正常吧.</p><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>我们需要在两个有序长分别为m,n的数组中找到一个中位数,那么,在m+n为奇数的时候,我们需要找第(m+n)/2+1小的数字.而当m+n为偶数的时候我们需要找(m+n)/2和(m+n)/2+1小的两个数的平均数.那么这样问题就变为了找第k小的数字了.<br>假如m,n&gt;k/2,首先找两个数组的k/2小的数字,比较大小,若’M[k/2-1]&gt;N[k/2-]’,则可以删除N数组中前k/2个数字,应为可以得知他们必定比第k小的数字小.反之则删掉M数组中的钱K/2个数字.这样一直到最后,K=1时,两个数组均只含有一个数,我们只需要找出第1小的数字即可.<br>假若两个数组中数组M长度小于k/2,那么我们就可直接拿该数组中间最大的和另一个’N[(k-M.length())-1]’相比较,然后选择删除较小的那个数组中前面的数字.<br>所以,我们可以采用递归的方式,然后考虑元素的边界值:</p><ul><li>当两个数组其中一个为空,直接返回另一个的中位数.</li><li>当k=1,返回’min(M[0],N[0])’;</li></ul><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">class Solution4 &#123;</span><br><span class="line">    public double findMedianSortedArrays(int[] nums1, int[] nums2) &#123;</span><br><span class="line">        int m=nums1.length;</span><br><span class="line">        int n=nums2.length;</span><br><span class="line">        int k=(m+n)/2+1;</span><br><span class="line">        if((m+n)%2==1)&#123;</span><br><span class="line">            return findKth(nums1,nums2,k);</span><br><span class="line">        &#125;else &#123;</span><br><span class="line">            return (findKth(nums1,nums2,k-1)+findKth(nums1,nums2,k))/2;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public double findKth(int nums1[],int nums2[],int k)&#123;</span><br><span class="line">        //使得第一个长度总是小于第二个</span><br><span class="line">        if(nums1.length&gt;nums2.length)&#123;</span><br><span class="line">            return findKth(nums2,nums1,k);</span><br><span class="line">        &#125;</span><br><span class="line">        if(nums1.length==0)&#123;</span><br><span class="line">            return nums2[k-1];</span><br><span class="line">        &#125;else if (k==1)&#123;</span><br><span class="line">            return Math.min(nums1[0],nums2[0]);</span><br><span class="line">        &#125;else &#123;</span><br><span class="line">            int m=Math.min(nums1.length,k/2);</span><br><span class="line">            int n=k-m;</span><br><span class="line">            if(nums1[m-1]&gt;nums2[n-1])&#123;</span><br><span class="line">                return findKth(nums1, Arrays.copyOfRange(nums2,n,nums2.length),k-n);</span><br><span class="line">            &#125;else &#123;</span><br><span class="line">                return findKth(Arrays.copyOfRange(nums1,m,nums1.length),nums2,k-m);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h1&gt;&lt;p&gt;给定两个大小为 m 和 n 的有序数组 nums1 和 nums2 。&lt;br&gt;请找出这两个有序数组的中位数。要求算法的时间复杂度为 O(log (m+n)) 。&lt;br&gt;示例 1:&lt;br&gt;nums1 = [1, 3]&lt;br&gt;nums2 = [2]&lt;br&gt;中位数是 2.0&lt;br&gt;示例 2:&lt;br&gt;nums1 = [1, 2]&lt;br&gt;nums2 = [3, 4]&lt;br&gt;中位数是 (2 + 3)/2 = 2.5&lt;br&gt;
    
    </summary>
    
      <category term="study" scheme="https://watermelon-lee.github.io/categories/study/"/>
    
    
      <category term="LeetCode" scheme="https://watermelon-lee.github.io/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>无重复字符最长的子串</title>
    <link href="https://watermelon-lee.github.io/2018/06/19/leetcode2/"/>
    <id>https://watermelon-lee.github.io/2018/06/19/leetcode2/</id>
    <published>2018-06-19T02:59:45.000Z</published>
    <updated>2018-06-19T03:47:22.085Z</updated>
    
    <content type="html"><![CDATA[<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>给定一个字符串，找出不含有重复字符的最长子串的长度。<br>示例：<br>给定 “abcabcbb” ，没有重复字符的最长子串是 “abc” ，那么长度就是3。<br>给定 “bbbbb” ，最长的子串就是 “b” ，长度是1。<br>给定 “pwwkew” ，最长子串是 “wke” ，长度是3。请注意答案必须是一个子串，”pwke” 是 子序列  而不是子串<br><a id="more"></a></p><h1 id="自己的解答"><a href="#自己的解答" class="headerlink" title="自己的解答"></a>自己的解答</h1><p>经过以前刷题的检验，自己当然不会再想着暴力的解法，想着使用什么数据结构封装，使得的时间复杂度最低。<br>一开始尝试使用HashMap，但没搞定。后来转为ArrayList。在其中get()与add()的复杂度为o(1).<br>代码如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">public int lengthOfLongestSubstring(String s) &#123;</span><br><span class="line">        int length = 0;</span><br><span class="line">        int start = 0;</span><br><span class="line">        List&lt;Character&gt; characterList = new ArrayList&lt;&gt;();</span><br><span class="line">        char[] list = s.toCharArray();</span><br><span class="line">        for (int i = 0; i &lt; list.length; ) &#123;</span><br><span class="line">            if (characterList.contains(list[i])&amp;&amp;characterList.lastIndexOf(list[i])&gt;=start) &#123;</span><br><span class="line">                length = (i - start) &gt; length ? i - start : length;</span><br><span class="line">                start=start&gt;characterList.lastIndexOf(list[i])+1?start:characterList.lastIndexOf(list[i])+1;</span><br><span class="line">            &#125;else &#123;</span><br><span class="line">                length = (i - start + 1) &gt; length ? i - start + 1 : length;</span><br><span class="line">            &#125;</span><br><span class="line">            characterList.add(list[i]);</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        return length;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>总体思想就是没有重复就往里面放,修改长度,然后重复了就把开始位置改变到重复字符后一个,然后接着添加,在比较长度,进行修改.</p><blockquote><p>看起来一遍for循环,以为复杂度为o(n).后开查看了一下ArrayList的源码,主要看一下其lastIndexOf的实现居然连二分查找都不是,直接for循环遍历.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">//逆向查找，返回返回ArrayList中元素Object(o)的索引位置</span><br><span class="line">    public int lastIndexOf(Object o) &#123;</span><br><span class="line">        if (o == null) &#123;</span><br><span class="line">            for (int i = size-1; i &gt;= 0; i--)</span><br><span class="line">                if (elementData[i]==null)</span><br><span class="line">                    return i;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            for (int i = size-1; i &gt;= 0; i--)</span><br><span class="line">                if (o.equals(elementData[i]))</span><br><span class="line">                    return i;</span><br><span class="line">        &#125;</span><br><span class="line">        return -1;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p></blockquote><p>哈哈,这岂不是和暴力o(n2)没有区别.果然就是只是自己看起来美好而已.</p><h1 id="标准解答"><a href="#标准解答" class="headerlink" title="标准解答"></a>标准解答</h1><h2 id="方法二：滑动窗口"><a href="#方法二：滑动窗口" class="headerlink" title="方法二：滑动窗口"></a>方法二：滑动窗口</h2><p>暴力法非常简单。但它太慢了。那么我们该如何优化它呢？<br>在暴力法中，我们会反复检查一个子字符串是否含有有重复的字符，但这是没有必要的。如果从索引 iii 到 j−1j - 1j−1 之间的子字符串 sijs_{ij}s​ij​​ 已经被检查为没有重复字符。我们只需要检查 s[j]s[j]s[j] 对应的字符是否已经存在于子字符串 sijs_{ij}s​ij​​ 中。<br>要检查一个字符是否已经在子字符串中，我们可以检查整个子字符串，这将产生一个复杂度为 O(n2)O(n^2)O(n​2​​) 的算法，但我们可以做得更好。<br>通过使用 HashSet 作为滑动窗口，我们可以用 O(1)O(1)O(1) 的时间来完成对字符是否在当前的子字符串中的检查。<br>滑动窗口是数组/字符串问题中常用的抽象概念。 窗口通常是在数组/字符串中由开始和结束索引定义的一系列元素的集合，即 [i,j)[i, j)[i,j)（左闭，右开）。而滑动窗口是可以将两个边界向某一方向“滑动”的窗口。例如，我们将 [i,j)[i, j)[i,j) 向右滑动 111 个元素，则它将变为 [i+1,j+1)[i+1, j+1)[i+1,j+1)（左闭，右开）。<br>回到我们的问题，我们使用 HashSet 将字符存储在当前窗口 [i,j)[i, j)[i,j)（最初 j=ij = ij=i）中。 然后我们向右侧滑动索引 jjj，如果它不在 HashSet 中，我们会继续滑动 jjj。直到 s[j] 已经存在于 HashSet 中。此时，我们找到的没有重复字符的最长子字符串将会以索引 iii 开头。如果我们对所有的 iii 这样做，就可以得到答案。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">public class Solution &#123;</span><br><span class="line">    public int lengthOfLongestSubstring(String s) &#123;</span><br><span class="line">        int n = s.length();</span><br><span class="line">        Set&lt;Character&gt; set = new HashSet&lt;&gt;();</span><br><span class="line">        int ans = 0, i = 0, j = 0;</span><br><span class="line">        while (i &lt; n &amp;&amp; j &lt; n) &#123;</span><br><span class="line">            // try to extend the range [i, j]</span><br><span class="line">            if (!set.contains(s.charAt(j)))&#123;</span><br><span class="line">                set.add(s.charAt(j++));</span><br><span class="line">                ans = Math.max(ans, j - i);</span><br><span class="line">            &#125;</span><br><span class="line">            else &#123;</span><br><span class="line">                set.remove(s.charAt(i++));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>复杂度分析:</p><ul><li>时间复杂度：O(2n)=O(n)，在最糟糕的情况下，每个字符将被 i 和 j 访问两次。</li><li>空间复杂度：O(min(m,n)，与之前的方法相同。滑动窗口法需要 O(k) 的空间，其中 k 表示 Set 的大小。而Set的大小取决于字符串 n 的大小以及字符集/字母 m 的大小。 </li></ul><p>方法大概是读一个字符,不包含放进去,然后长度改变.重复则从第一个开始滑动删除,知道删除了重复字符,在往里面添加.重复以上步骤.</p><h2 id="方法三：优化的滑动窗口"><a href="#方法三：优化的滑动窗口" class="headerlink" title="方法三：优化的滑动窗口"></a>方法三：优化的滑动窗口</h2><p>上述的方法最多需要执行 2n 个步骤。事实上，它可以被进一步优化为仅需要 n 个步骤。我们可以定义字符到索引的映射，而不是使用集合来判断一个字符是否存在。 当我们找到重复的字符时，我们可以立即跳过该窗口。</p><p>也就是说，如果 s[j]s[j]s[j] 在 [i,j)[i, j)[i,j) 范围内有与 j′j’j​′​​ 重复的字符，我们不需要逐渐增加 iii 。 我们可以直接跳过 [i，j′]<br>范围内的所有元素，并将 iii 变为 j′+1j’ + 1j​′​​+1。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">public class Solution &#123;</span><br><span class="line">    public int lengthOfLongestSubstring(String s) &#123;</span><br><span class="line">        int n = s.length(), ans = 0;</span><br><span class="line">        Map&lt;Character, Integer&gt; map = new HashMap&lt;&gt;(); // current index of character</span><br><span class="line">        // try to extend the range [i, j]</span><br><span class="line">        for (int j = 0, i = 0; j &lt; n; j++) &#123;</span><br><span class="line">            if (map.containsKey(s.charAt(j))) &#123;</span><br><span class="line">                i = Math.max(map.get(s.charAt(j)), i);</span><br><span class="line">            &#125;</span><br><span class="line">            ans = Math.max(ans, j - i + 1);</span><br><span class="line">            map.put(s.charAt(j), j + 1);</span><br><span class="line">        &#125;</span><br><span class="line">        return ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这个方法的思想与自己使用ArrayList其实是一致的,但是使用HashMap查找的复杂度为o(1),而ArrayList的indexOf内部使用的for循环,那么负责度为o(n).</p><blockquote><p>Map&lt;Character, Integer&gt; map = new HashMap&lt;&gt;(); 需要注意这个,是用字符为键,数字下标为value.这样使用get取出来的便是下标来计算长度了.</p></blockquote><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>需要研究一下map与Set的原理与实现了,对与他们的了解需要更加深入,不能只是会用.</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h1&gt;&lt;p&gt;给定一个字符串，找出不含有重复字符的最长子串的长度。&lt;br&gt;示例：&lt;br&gt;给定 “abcabcbb” ，没有重复字符的最长子串是 “abc” ，那么长度就是3。&lt;br&gt;给定 “bbbbb” ，最长的子串就是 “b” ，长度是1。&lt;br&gt;给定 “pwwkew” ，最长子串是 “wke” ，长度是3。请注意答案必须是一个子串，”pwke” 是 子序列  而不是子串&lt;br&gt;
    
    </summary>
    
      <category term="study" scheme="https://watermelon-lee.github.io/categories/study/"/>
    
    
      <category term="LeetCode" scheme="https://watermelon-lee.github.io/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>两数之和</title>
    <link href="https://watermelon-lee.github.io/2018/06/18/leetcode1/"/>
    <id>https://watermelon-lee.github.io/2018/06/18/leetcode1/</id>
    <published>2018-06-18T10:13:19.000Z</published>
    <updated>2018-06-19T03:47:48.278Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>给定一个整数数组和一个目标值，找出数组中和为目标值的两个数。<br>可以假设每个输入只对应一种答案，且同样的元素不能被重复利用。<br>示例:<br>给定 nums = [2, 7, 11, 15], target = 9<br>因为 nums[0] + nums[1] = 2 + 7 = 9<br>所以返回 [0, 1]<br><a id="more"></a></p><h1 id="解答："><a href="#解答：" class="headerlink" title="解答："></a>解答：</h1><p>为了对运行时间复杂度进行优化，我们需要一种更有效的方法来检查数组中是否存在目标元素。如果存在，我们需要找出它的索引。保持数组中的每个元素与其索引相互对应的最好方法是什么？哈希表。<br>通过以空间换取速度的方式，我们可以将查找时间从 O(n) 降低到 O(1)。哈希表正是为此目的而构建的，它支持以 近似 恒定的时间进行快速查找。我用“近似”来描述，是因为一旦出现冲突，查找用时可能会退化到 O(n)O(n)O(n)。但只要你仔细地挑选哈希函数，在哈希表中进行查找的用时应当被摊销为 O(1)。  </p><p>最有方法：一边哈希表：<br>进行迭代并将元素插入到表中的同时，我们还会回过头来检查表中是否已经存在当前元素所对应的目标元素。如果它存在，那我们已经找到了对应解，并立即将其返回。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public int[] twoSum(int[] nums, int target) &#123;</span><br><span class="line">    Map&lt;Integer, Integer&gt; map = new HashMap&lt;&gt;();</span><br><span class="line">    for (int i = 0; i &lt; nums.length; i++) &#123;</span><br><span class="line">        int complement = target - nums[i];</span><br><span class="line">        if (map.containsKey(complement)) &#123;</span><br><span class="line">            return new int[] &#123; map.get(complement), i &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        map.put(nums[i], i);</span><br><span class="line">    &#125;</span><br><span class="line">    throw new IllegalArgumentException(&quot;No two sum solution&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>复杂度分析：</p><ul><li>时间复杂度：O(n)， 我们只遍历了包含有 nnn 个元素的列表一次。在表中进行的每次查找只花费 O(1) 的时间。</li><li>空间复杂度：O(n)， 所需的额外空间取决于哈希表中存储的元素数量，该表最多需要存储 n 个元素。<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1>这是自己第一次上leetcode刷题，自己对于数据结构还需要多多了解，不能每次都暴力解&gt;!&lt;</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h1&gt;&lt;p&gt;给定一个整数数组和一个目标值，找出数组中和为目标值的两个数。&lt;br&gt;可以假设每个输入只对应一种答案，且同样的元素不能被重复利用。&lt;br&gt;示例:&lt;br&gt;给定 nums = [2, 7, 11, 15], target = 9&lt;br&gt;因为 nums[0] + nums[1] = 2 + 7 = 9&lt;br&gt;所以返回 [0, 1]&lt;br&gt;
    
    </summary>
    
      <category term="study" scheme="https://watermelon-lee.github.io/categories/study/"/>
    
    
      <category term="LeetCode" scheme="https://watermelon-lee.github.io/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>Spring整合Mybatis问题</title>
    <link href="https://watermelon-lee.github.io/2018/06/14/MybatisProblem1/"/>
    <id>https://watermelon-lee.github.io/2018/06/14/MybatisProblem1/</id>
    <published>2018-06-14T02:22:51.000Z</published>
    <updated>2018-06-14T02:39:19.906Z</updated>
    
    <content type="html"><![CDATA[<p>在Spring整合Mybatis,完成一个简单的登录.一直遇到问题Could not load driverClass ${jdbc.driverClassName}.但是我Mysql连接驱动也导入了.后来将表达式${jdbc.driverClassName}改为com.mysql.jdbc.Driver却可以了.<br><a id="more"></a></p><h1 id="产生原因"><a href="#产生原因" class="headerlink" title="产生原因"></a>产生原因</h1><blockquote><p> 在spring里使用org.mybatis.spring.mapper.MapperScannerConfigurer 进行自动扫描的时候，设置了sqlSessionFactory 的话，可能会导致PropertyPlaceholderConfigurer失效，也就是用${jdbc.username}这样之类的表达式，将无法获取到properties文件里的内容。 导致这一原因是因为，MapperScannerConigurer实际是在解析加载bean定义阶段的，这个时候要是设置sqlSessionFactory的话，会导致提前初始化一些类，这个时候，PropertyPlaceholderConfigurer还没来得及替换定义中的变量，导致把表达式当作字符串复制了。</p></blockquote><h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><ol><li>Mybatis自动扫描映射接口 (扫描dao 中的接口相当于给service类的引用进行注入)<br>使用<code>&lt;mybatis:scan base-package=&quot;com.mapper&quot;/&gt;</code>不使用MapperScannerConfiger</li><li>通过注入 sqlsessionFactory 的方式来获取一个SqlsessionTemplate<br>将<code>&lt;property name=&quot;sqlSessionFactory&quot; ref=&quot;sqlSessionFactory&quot;/&gt;</code>改成<code>&lt;property name=&quot;sqlSessionFactoryBeanName&quot; value=&quot;sqlSessionFactory&quot;/&gt;</code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean class=&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;&gt;</span><br><span class="line">       // 1. 自动扫描 set 注入</span><br><span class="line">       &lt;property name=&quot;sqlSessionFactoryBeanName&quot; value=&quot;sqlSessionFactory&quot;&gt;&lt;/property&gt;</span><br><span class="line">       &lt;property name=&quot;basePackage&quot; value=&quot;com.feng.dao&quot;&gt;&lt;/property&gt;</span><br><span class="line">   &lt;/bean&gt;</span><br></pre></td></tr></table></figure></li></ol><p>改用sqlSessionFactoryBeanName注入就没有问题(不要使用sqlSessionFactory属性注入，使用sqlSessionFactoryBeanName注入)，因为这时不会立即初始化sqlSessionFactory,传入的只是名字，非bean，所以不会引发提前初始化问题</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在Spring整合Mybatis,完成一个简单的登录.一直遇到问题Could not load driverClass ${jdbc.driverClassName}.但是我Mysql连接驱动也导入了.后来将表达式${jdbc.driverClassName}改为com.mysql.jdbc.Driver却可以了.&lt;br&gt;
    
    </summary>
    
      <category term="study" scheme="https://watermelon-lee.github.io/categories/study/"/>
    
    
      <category term="Spring" scheme="https://watermelon-lee.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>观察者模式</title>
    <link href="https://watermelon-lee.github.io/2018/06/12/DesignPattern4/"/>
    <id>https://watermelon-lee.github.io/2018/06/12/DesignPattern4/</id>
    <published>2018-06-12T07:43:59.000Z</published>
    <updated>2018-06-17T07:25:57.572Z</updated>
    
    <content type="html"><![CDATA[<h1 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h1><blockquote><p>观察者模式是对象的行为模式,又叫做发布-订阅(Publish/Subscribe)模式.<br>观察者模式定义了一种一对多的依赖关系,让多个观察者对象同时监听某一个主题对象.这个主体对象在状态发生变化时,会通知所有观察者对象,使他们能够自动更新自己.</p></blockquote><a id="more"></a><h2 id="观察者模式结构"><a href="#观察者模式结构" class="headerlink" title="观察者模式结构"></a>观察者模式结构</h2><p><img src="../../../../img/Design/observer.png" alt="观察者模式"></p><ul><li>抽象主题角色(Subject):抽象主题角色吧所有对观察者对象的引用保存在一个聚集(比如ArrayList)里,每个主题可以有任意数量的观察者.抽象主题提供一个接口,可以增加和删除观察者对象,抽象主题角色有叫做抽象被观察者角色(Observable).</li><li>具体主题角色(ConcreteSubject):将有关状态存入具体观察者对象;在具体主题内部状态改变时,给所有登记过的观察者发出通知.具体主题又叫做具体被观察者(ConcreteSubject)角色.</li><li>抽乡观察者角色(Observer):为所有观察者定义一个接口,得到主题的通知时更新自己，这个接口叫做更新接口。</li><li>具体观察者(ConcreteObserver)角色：具体观察者角色实现抽象观察者角色所要求的更新接口，以便使本身的状态与主题的状态 像协调。如果需要，具体观察者角色可以保持一个指向具体主题对象的引用。</li></ul><p><img src="../../../../img/Design/Observer-Time.png" alt="时序图"></p><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>老板出去了,员工们就偷偷看球,要秘书负责通知他们,老板回来<br>Subject:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">package Observer;</span><br><span class="line"></span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">public interface Subject &#123;</span><br><span class="line"></span><br><span class="line">    void attach(Observer observer);</span><br><span class="line">    void remove(Observer observer);</span><br><span class="line">    void notifyObservers();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Secretary:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">package Observer;</span><br><span class="line"></span><br><span class="line">import java.util.ArrayList;</span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">public class Secretary implements Subject &#123;</span><br><span class="line"></span><br><span class="line">    private String message;</span><br><span class="line"></span><br><span class="line">    private List&lt;Observer&gt; observers=new ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    public void setMessage(String message) &#123;</span><br><span class="line">        this.message = message;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void attach(Observer observer) &#123;</span><br><span class="line">        observers.add(observer);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void remove(Observer observer) &#123;</span><br><span class="line">        observers.remove(observer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void notifyObservers() &#123;</span><br><span class="line">        for (Observer o :</span><br><span class="line">                observers) &#123;</span><br><span class="line">            o.update(message);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">       </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Observer:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">package Observer;</span><br><span class="line"></span><br><span class="line">public interface Observer &#123;</span><br><span class="line"></span><br><span class="line">    void update(String message);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Worker:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">package Observer;</span><br><span class="line"></span><br><span class="line">import java.util.Observable;</span><br><span class="line"></span><br><span class="line">public class Worker implements Observer&#123;</span><br><span class="line"></span><br><span class="line">    private String message;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void update(String message) &#123;</span><br><span class="line">        this.message=message;</span><br><span class="line">        System.out.println(message+&quot;继续工作&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;观察者模式&quot;&gt;&lt;a href=&quot;#观察者模式&quot; class=&quot;headerlink&quot; title=&quot;观察者模式&quot;&gt;&lt;/a&gt;观察者模式&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;观察者模式是对象的行为模式,又叫做发布-订阅(Publish/Subscribe)模式.&lt;br&gt;观察者模式定义了一种一对多的依赖关系,让多个观察者对象同时监听某一个主题对象.这个主体对象在状态发生变化时,会通知所有观察者对象,使他们能够自动更新自己.&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="study" scheme="https://watermelon-lee.github.io/categories/study/"/>
    
    
      <category term="DesignPattern" scheme="https://watermelon-lee.github.io/tags/DesignPattern/"/>
    
  </entry>
  
  <entry>
    <title>代理模式</title>
    <link href="https://watermelon-lee.github.io/2018/06/11/DesignPattern3/"/>
    <id>https://watermelon-lee.github.io/2018/06/11/DesignPattern3/</id>
    <published>2018-06-11T11:51:19.000Z</published>
    <updated>2018-06-11T12:45:53.743Z</updated>
    
    <content type="html"><![CDATA[<h1 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h1><blockquote><p>代理模式(Proxy)为其他对象提供了一种代理以控制对这个对象的访问<br><a id="more"></a></p></blockquote><h2 id="代理模式结构"><a href="#代理模式结构" class="headerlink" title="代理模式结构"></a>代理模式结构</h2><p>在一些情况下,客户不可以直接引用到一个对象,而代理对象就可以在客户端和目标之间起到一个中介的作用.<br><img src="../../../../img/Design/proxy.png" alt="代理模式"><br>以打官司为例子.我们需要一个代理,就是律师来表达我们的想法.<br>首先创建一个公共接口:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">package Proxy;</span><br><span class="line"></span><br><span class="line">public interface Subject &#123;</span><br><span class="line">    void express();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>然后是代理类律师:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">package Proxy;</span><br><span class="line"></span><br><span class="line">public class Lawyer implements Subject &#123;</span><br><span class="line">    Person person;</span><br><span class="line"></span><br><span class="line">    public Lawyer() &#123;</span><br><span class="line">        this.person = new Person();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void express() &#123;</span><br><span class="line">        System.out.println(&quot;我的受理人情况如下:&quot;);</span><br><span class="line">        person.express();</span><br><span class="line">        System.out.println(&quot;发言完毕&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>然后是受理人:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">package Proxy;</span><br><span class="line"></span><br><span class="line">public class Person implements Subject &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void express() &#123;</span><br><span class="line">        System.out.println(&quot;当时不在场,没有犯罪&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>测试类Court:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">package Proxy;</span><br><span class="line"></span><br><span class="line">public class Court &#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        Lawyer lawyer=new Lawyer();</span><br><span class="line">        lawyer.express();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>可以发现,在法庭上并没有访问到受理人,有代理类律师为他发言.代理类就是真实对象的代表.  </p><p>代理模式的应用场景：<br>如果已有的方法在使用的时候需要对原有的方法进行改进，此时有两种办法：  </p><p>1、修改原有的方法来适应。这样违反了“对扩展开放，对修改关闭”的原则。</p><p>2、就是采用一个代理类调用原有的方法，且对产生的结果进行控制。这种方法就是代理模式。</p><p>使用代理模式，可以将功能划分的更加清晰，有助于后期维护.</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;代理模式&quot;&gt;&lt;a href=&quot;#代理模式&quot; class=&quot;headerlink&quot; title=&quot;代理模式&quot;&gt;&lt;/a&gt;代理模式&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;代理模式(Proxy)为其他对象提供了一种代理以控制对这个对象的访问&lt;br&gt;
    
    </summary>
    
      <category term="study" scheme="https://watermelon-lee.github.io/categories/study/"/>
    
    
      <category term="DesignPattern" scheme="https://watermelon-lee.github.io/tags/DesignPattern/"/>
    
  </entry>
  
  <entry>
    <title>策略模式</title>
    <link href="https://watermelon-lee.github.io/2018/06/10/DesignPattern2/"/>
    <id>https://watermelon-lee.github.io/2018/06/10/DesignPattern2/</id>
    <published>2018-06-10T02:14:41.000Z</published>
    <updated>2018-06-10T03:49:40.134Z</updated>
    
    <content type="html"><![CDATA[<h1 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h1><p>它定义了算法家族,分别封装起来,让他们之间可以相互替换,此模式让算法的变化,不会影响到使用算法的客户.<br><a id="more"></a><br><img src="../../../../img/Design/strategy.png" alt="策略模式"><br>这个模式涉及到三个角色：</p><p>　　●　　环境(Context)角色：持有一个Strategy的引用。</p><p>　　●　　抽象策略(Strategy)角色：这是一个抽象角色，通常由一个接口或抽象类实现。此角色给出所有的具体策略类所需的接口。</p><p>　　●　　具体策略(ConcreteStrategy)角色：包装了相关的算法或行为。<br>以商场购物为例子,有三种收费方式,一种是正常原价,一种是打8折,一种是每满300-100.</p><h2 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h2><p>策略接口:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">package Strategy;</span><br><span class="line"></span><br><span class="line">public interface Strategy &#123;</span><br><span class="line">    double acceptCash(double money);//收取现金,参数为原价,返回为折后价</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>子类:<br>8折:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">package Strategy;</span><br><span class="line"></span><br><span class="line">public class DiscountStrategy implements Strategy&#123;</span><br><span class="line">    @Override</span><br><span class="line">    public double acceptCash(double money) &#123;</span><br><span class="line">        return money*0.8;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>满减:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">package Strategy;</span><br><span class="line"></span><br><span class="line">public class MinusStrategy implements Strategy &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public double acceptCash(double money) &#123;</span><br><span class="line">        return money-((int)money/300)*100;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>原价:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">package Strategy;</span><br><span class="line"></span><br><span class="line">public class NormalStrategy implements Strategy&#123;</span><br><span class="line">    @Override</span><br><span class="line">    public double acceptCash(double money) &#123;</span><br><span class="line">        return money;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Context:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">package Strategy;</span><br><span class="line"></span><br><span class="line">public class Context &#123;</span><br><span class="line">    private Strategy strategy;</span><br><span class="line"></span><br><span class="line">    public Context(Strategy strategy) &#123;</span><br><span class="line">        this.strategy = strategy;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public double getResult(double money)&#123;</span><br><span class="line">        return strategy.acceptCash(money);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>编写客户端:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">package Strategy;</span><br><span class="line"></span><br><span class="line">import java.util.Scanner;</span><br><span class="line"></span><br><span class="line">public class Client &#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        System.out.println(&quot;请输入需要的折扣方式:8折,满300-100或原价&quot;);</span><br><span class="line">        Scanner scanner=new Scanner(System.in);</span><br><span class="line">        String strategy=scanner.nextLine();</span><br><span class="line">        Context context=null;</span><br><span class="line">        switch (strategy)&#123;</span><br><span class="line">            case &quot;8折&quot;:</span><br><span class="line">                context=new Context(new DiscountStrategy());</span><br><span class="line">                break;</span><br><span class="line">            case &quot;满300-100&quot;:</span><br><span class="line">                context=new Context(new MinusStrategy());</span><br><span class="line">                break;</span><br><span class="line">            case &quot;原价&quot;:</span><br><span class="line">                context=new Context(new NormalStrategy());</span><br><span class="line">                break;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(&quot;请输入金额&quot;);</span><br><span class="line">        double price=scanner.nextDouble();</span><br><span class="line">        scanner.nextLine();</span><br><span class="line">        double result=context.getResult(price);</span><br><span class="line">        System.out.println(result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>输入:8折<br>    100<br>输出:80.0  </p><p>但是这样子客户端十分庞大冗杂,在客户端进行判断,以后每次改变折扣还需要对客户端进行修改,所以我们使用使用策略与简单工厂结合.改进Context类.<br>CashContext:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">package Strategy;</span><br><span class="line"></span><br><span class="line">public class CashContext &#123;</span><br><span class="line">    private Strategy concreteStrategy;</span><br><span class="line"></span><br><span class="line">    public CashContext(String strategy)&#123;</span><br><span class="line">        switch (strategy)&#123;</span><br><span class="line">            case &quot;8折&quot;:</span><br><span class="line">                concreteStrategy=new DiscountStrategy();</span><br><span class="line">                break;</span><br><span class="line">            case &quot;满300-100&quot;:</span><br><span class="line">                concreteStrategy=new MinusStrategy();</span><br><span class="line">                break;</span><br><span class="line">            case &quot;原价&quot;:</span><br><span class="line">                concreteStrategy=new NormalStrategy();</span><br><span class="line">                break;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    public double getResult(double money)&#123;</span><br><span class="line">        return concreteStrategy.acceptCash(money);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>NewClient:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">package Strategy;</span><br><span class="line"></span><br><span class="line">import java.util.Scanner;</span><br><span class="line"></span><br><span class="line">public class NewClient &#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        System.out.println(&quot;请输入需要的折扣方式:8折,满300-100或原价&quot;);</span><br><span class="line">        Scanner scanner=new Scanner(System.in);</span><br><span class="line">        String strategy=scanner.nextLine();</span><br><span class="line">        CashContext cashContext=new CashContext(strategy);</span><br><span class="line">        System.out.println(&quot;请输入金额&quot;);</span><br><span class="line">        double price=scanner.nextDouble();</span><br><span class="line">        scanner.nextLine();</span><br><span class="line">        double result=cashContext.getResult(price);</span><br><span class="line">        System.out.println(result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>使用两者结合之后,客户端只需调用一个CashContext类即可,相比之前需要调用多个类,是客户端与收费算法彻底分离,降低了耦合.</p><h1 id="认识策略模式"><a href="#认识策略模式" class="headerlink" title="认识策略模式:"></a>认识策略模式:</h1><ul><li>策略模式的重心不是如何实现算法，而是如何组织、调用这些算法，从而让程序结构更灵活，具有更好的维护性和扩展性。</li><li>策略模式一个很大的特点就是各个策略算法的平等性。对于一系列具体的策略算法，大家的地位是完全一样的，正因为这个平等性，才能实现算法之间可以相互替换。所有的策略算法在实现上也是相互独立的，相互之间是没有依赖的。所以可以这样描述这一系列策略算法：策略算法是相同行为的不同实现</li><li>运行期间，策略模式在每一个时刻只能使用一个具体的策略实现对象，虽然可以动态地在不同的策略实现中切换，但是同时只能使用一个。</li><li>经常见到的是，所有的具体策略类都有一些公有的行为。这时候，就应当把这些公有的行为放到共同的抽象策略角色Strategy类里面。当然这时候抽象策略角色必须要用Java抽象类实现，而不能使用接口。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;策略模式&quot;&gt;&lt;a href=&quot;#策略模式&quot; class=&quot;headerlink&quot; title=&quot;策略模式&quot;&gt;&lt;/a&gt;策略模式&lt;/h1&gt;&lt;p&gt;它定义了算法家族,分别封装起来,让他们之间可以相互替换,此模式让算法的变化,不会影响到使用算法的客户.&lt;br&gt;
    
    </summary>
    
      <category term="study" scheme="https://watermelon-lee.github.io/categories/study/"/>
    
    
      <category term="DesignPattern" scheme="https://watermelon-lee.github.io/tags/DesignPattern/"/>
    
  </entry>
  
  <entry>
    <title>设计模式</title>
    <link href="https://watermelon-lee.github.io/2018/06/09/DesignPattern/"/>
    <id>https://watermelon-lee.github.io/2018/06/09/DesignPattern/</id>
    <published>2018-06-09T13:16:36.000Z</published>
    <updated>2018-06-10T02:18:44.189Z</updated>
    
    <content type="html"><![CDATA[<p>最近学习了体系结构这门课程,主要学习了一些设计模式.期末考试快到了,做一个学习总结.<br>所写的部分参照了&lt;大话设计模式&gt;,&lt;Java与模式&gt;与<a href="https://blog.csdn.net/zhangerqing/article/details/8194653" target="_blank" rel="noopener">博客Java之美之设计模式</a><br><a id="more"></a></p><h1 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h1><p>设计模式（Design pattern）是一套被反复使用、多数人知晓的、经过分类编目的、代码设计经验的总结.重要的不是将来需不需要用到这些模式,而是通过这些模式找到”封装变化”,”对象间松散耦合”,”针对接口编程”的感觉,设计出易维护,易扩展,易复用,灵活性好的程序.  </p><h2 id="设计模式分类"><a href="#设计模式分类" class="headerlink" title="设计模式分类"></a>设计模式分类</h2><p>总体来说设计模式分为三大类：  </p><p>创建型模式，共五种：工厂方法模式、抽象工厂模式、单例模式、建造者模式、原型模式。  </p><p>结构型模式，共七种：适配器模式、装饰器模式、代理模式、外观模式、桥接模式、组合模式、享元模式。  </p><p>行为型模式，共十一种：策略模式、模板方法模式、观察者模式、迭代子模式、责任链模式、命令模式、备忘录模式、状态模式、访问者模式、中介者模式、解释器模式。  </p><p>其实还有两类：并发型模式和线程池模式。  </p><h2 id="6大设计原则"><a href="#6大设计原则" class="headerlink" title="6大设计原则"></a>6大设计原则</h2><p>1、开闭原则（Open Close Principle）<br>开闭原则就是说对扩展开放，对修改关闭。在程序需要进行拓展的时候，不能去修改原有的代码，实现一个热插拔的效果。所以一句话概括就是：为了使程序的扩展性好，易于维护和升级。想要达到这样的效果，我们需要使用接口和抽象类.<br>2、里氏代换原则（Liskov Substitution Principle）<br>里氏代换原则(Liskov Substitution Principle LSP)面向对象设计的基本原则之一。 里氏代换原则中说，任何基类可以出现的地方，子类一定可以出现。 LSP是继承复用的基石，只有当衍生类可以替换掉基类，软件单位的功能不受到影响时，基类才能真正被复用，而衍生类也能够在基类的基础上增加新的行为。里氏代换原则是对“开-闭”原则的补充。实现“开-闭”原则的关键步骤就是抽象化。而基类与子类的继承关系就是抽象化的具体实现，所以里氏代换原则是对实现抽象化的具体步骤的规范.<br>3、依赖倒转原则（Dependence Inversion Principle）<br>这个是开闭原则的基础，具体内容：真对接口编程，依赖于抽象而不依赖于具体。<br>4、接口隔离原则（Interface Segregation Principle）<br>使用多个隔离的接口，比使用单个接口要好。还是一个降低类之间的耦合度的意思，从这儿我们看出，其实设计模式就是一个软件的设计思想，从大型软件架构出发，为了升级和维护方便。所以上文中多次出现：降低依赖，降低耦合。<br>5、迪米特法则（最少知道原则）（Demeter Principle）<br>为什么叫最少知道原则，就是说：一个实体应当尽量少的与其他实体之间发生相互作用，使得系统功能模块相对独立。<br>6、合成复用原则（Composite Reuse Principle）<br>原则是尽量使用合成/聚合的方式，而不是使用继承。<br>聚合表示一种弱拥有关系,体现A可以包含对象B,B对象不是A对象的一部分.<br>合成是一种强拥有关系,体现了严格的整体与部分关系,部分和整体的生命周期一样.  </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近学习了体系结构这门课程,主要学习了一些设计模式.期末考试快到了,做一个学习总结.&lt;br&gt;所写的部分参照了&amp;lt;大话设计模式&amp;gt;,&amp;lt;Java与模式&amp;gt;与&lt;a href=&quot;https://blog.csdn.net/zhangerqing/article/details/8194653&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;博客Java之美之设计模式&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
      <category term="study" scheme="https://watermelon-lee.github.io/categories/study/"/>
    
    
      <category term="DesignPattern" scheme="https://watermelon-lee.github.io/tags/DesignPattern/"/>
    
  </entry>
  
  <entry>
    <title>简单工厂模式</title>
    <link href="https://watermelon-lee.github.io/2018/06/09/DesignPattern1/"/>
    <id>https://watermelon-lee.github.io/2018/06/09/DesignPattern1/</id>
    <published>2018-06-09T12:56:19.000Z</published>
    <updated>2018-06-10T02:41:41.968Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简单工厂模式"><a href="#简单工厂模式" class="headerlink" title="简单工厂模式"></a>简单工厂模式</h1><h2 id="普通工厂模式"><a href="#普通工厂模式" class="headerlink" title="普通工厂模式"></a>普通工厂模式</h2><p>建立一个工厂类,对实现了同一个接口或类的类进行实例创建.<br><a id="more"></a><br>以计算器为例子.<br><img src="../../../../img/Design/factory.png" alt="工厂模式"><br>父类:Operate:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">package SimpleFactory;</span><br><span class="line"></span><br><span class="line">public class OperateClass &#123;</span><br><span class="line">    private double number1;</span><br><span class="line">    private double number2;</span><br><span class="line"></span><br><span class="line">    public double getNumber1() &#123;</span><br><span class="line">        return number1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setNumber1(double number1) &#123;</span><br><span class="line">        this.number1 = number1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public double getNumber2() &#123;</span><br><span class="line">        return number2;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setNumber2(double number2) &#123;</span><br><span class="line">        this.number2 = number2;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public double getResult()&#123;return 0;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>子类:<br>Plus:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">package SimpleFactory;</span><br><span class="line"></span><br><span class="line">public class Plus extends OperateClass &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public double getResult() &#123;</span><br><span class="line">        return getNumber1()+getNumber2();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Minus:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">package SimpleFactory;</span><br><span class="line"></span><br><span class="line">public class Minus extends OperateClass &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public double getResult() &#123;</span><br><span class="line">        return getNumber1()-getNumber2();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Multiply:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">package SimpleFactory;</span><br><span class="line"></span><br><span class="line">public class Multiply extends OperateClass &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public double getResult() &#123;</span><br><span class="line">        return getNumber1()*getNumber2();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>工厂类:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">package SimpleFactory;</span><br><span class="line"></span><br><span class="line">public class OperateFactory &#123;</span><br><span class="line">    public OperateClass createOperate(String type)&#123;</span><br><span class="line">        if(type.equals(&quot;plus&quot;))&#123;</span><br><span class="line">            return new Plus();</span><br><span class="line">        &#125;else if (type.equals(&quot;minus&quot;))&#123;</span><br><span class="line">            return new Minus();</span><br><span class="line">        &#125;else if(type.equals(&quot;multiply&quot;))&#123;</span><br><span class="line">            return new Multiply();</span><br><span class="line">        &#125;else &#123;</span><br><span class="line">            return new OperateClass();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>测试:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">package SimpleFactory;</span><br><span class="line"></span><br><span class="line">import java.util.Scanner;</span><br><span class="line"></span><br><span class="line">public class Test &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        System.out.println(&quot;请输入符号:plus,minus,multiply&quot;);</span><br><span class="line">        Scanner scanner=new Scanner(System.in);</span><br><span class="line">        String type=scanner.nextLine();</span><br><span class="line">        OperateClass operate=new OperateFactory().createOperate(type);</span><br><span class="line">        operate.setNumber1(scanner.nextInt());</span><br><span class="line">        scanner.nextLine();</span><br><span class="line">        operate.setNumber2(scanner.nextInt());</span><br><span class="line">        System.out.println(operate.getResult());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>输入:plus<br>    15<br>    20<br>输出:35  </p><h2 id="多个工厂方法模式"><a href="#多个工厂方法模式" class="headerlink" title="多个工厂方法模式:"></a>多个工厂方法模式:</h2><p>上面的普通工厂模式,如传入错误的Type,则无法创建正确的对象.工厂模式则提供多个工厂方法,分别创建对象.<br>工厂类:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">package SimpleFactory;</span><br><span class="line"></span><br><span class="line">public class MethodOperateFactory &#123;</span><br><span class="line">    public OperateClass createPlus() &#123;</span><br><span class="line">        return new Plus();</span><br><span class="line">    &#125;</span><br><span class="line">    public OperateClass createMinus()&#123;</span><br><span class="line">        return new Minus();</span><br><span class="line">    &#125;</span><br><span class="line">    public OperateClass createMultiply()&#123;</span><br><span class="line">        return new Multiply();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="静态工厂方法模式"><a href="#静态工厂方法模式" class="headerlink" title="静态工厂方法模式"></a>静态工厂方法模式</h3><p>将上面的工厂中的方法设置为静态,即可不需要创建实例,直接调用.</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>工厂模式适合出现了大量产品需要创建,并且有共同的接口或者父类的场景.</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;简单工厂模式&quot;&gt;&lt;a href=&quot;#简单工厂模式&quot; class=&quot;headerlink&quot; title=&quot;简单工厂模式&quot;&gt;&lt;/a&gt;简单工厂模式&lt;/h1&gt;&lt;h2 id=&quot;普通工厂模式&quot;&gt;&lt;a href=&quot;#普通工厂模式&quot; class=&quot;headerlink&quot; title=&quot;普通工厂模式&quot;&gt;&lt;/a&gt;普通工厂模式&lt;/h2&gt;&lt;p&gt;建立一个工厂类,对实现了同一个接口或类的类进行实例创建.&lt;br&gt;
    
    </summary>
    
      <category term="study" scheme="https://watermelon-lee.github.io/categories/study/"/>
    
    
      <category term="DesignPattern" scheme="https://watermelon-lee.github.io/tags/DesignPattern/"/>
    
  </entry>
  
  <entry>
    <title>Mybatis学习总结3</title>
    <link href="https://watermelon-lee.github.io/2018/06/08/Mybatis3/"/>
    <id>https://watermelon-lee.github.io/2018/06/08/Mybatis3/</id>
    <published>2018-06-08T13:04:52.000Z</published>
    <updated>2018-06-09T03:14:48.605Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Mybatis事务管理与缓存机制"><a href="#Mybatis事务管理与缓存机制" class="headerlink" title="Mybatis事务管理与缓存机制"></a>Mybatis事务管理与缓存机制</h1><p>数据库的事务管理是一个重要的点,合理的利用缓存可以加快查询速度,提升性能<br><a id="more"></a></p><p>#Mybaits事务管理</p><h3 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h3><p>事务是一步或者几步操作组成的逻辑执行单元,这些基本操作作为一个整体的执行单元,要么全部执行,要么全部不执行.<br>事务具有4个特性(ACID)</p><ul><li>原子性(Atomicity)事务应用中的最小执行单位,具有不可分割的特征.</li><li>一致性(Consustency)事务执行的结果必须是数据库从一种状态变为另一种一致性状态.</li><li>隔离性(Isolation)各个事务的执行互不干扰,任意事物的内部操作对其他并发的事务都是隔离的.</li><li>持久性(Durability)事务一旦提交,对数据所做的改变需要要永久的记录到永久存储器中,即保存到物理数据库.</li></ul><h3 id="Transaction接口"><a href="#Transaction接口" class="headerlink" title="Transaction接口"></a>Transaction接口</h3><p>Mybatis事务transaction接口有两个实现类,分别是org.apache.ibatis.transaction.jdbc.JdbcTransaction与org.apache.ibatis.transaction.managed.ManagedTransaction.还设计了TransactionFactory与其两个实现类JdbcTransactionFactory与ManagedTransactionFactory用来获取事务的实例对象.<br>对于事务而言,有以下具体动作:创建(Create),提交(Commit),回滚(Rollback),关闭(Close).对应的Mybatis将事务抽象成为Transaction接口(源码):<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">package org.apache.ibatis.transaction;</span><br><span class="line"></span><br><span class="line">import java.sql.Connection;</span><br><span class="line">import java.sql.SQLException;</span><br><span class="line"></span><br><span class="line">public interface Transaction &#123;</span><br><span class="line">    Connection getConnection() throws SQLException;</span><br><span class="line"></span><br><span class="line">    void commit() throws SQLException;</span><br><span class="line"></span><br><span class="line">    void rollback() throws SQLException;</span><br><span class="line"></span><br><span class="line">    void close() throws SQLException;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Mybatis事务管理有两种方式:</p><ul><li>使用JDBC事务管理机制:即利用java,sql.Connection对象完成事务的提交(commit),回滚(rollback)和关闭(close)</li><li>使用MANAGED的事务管理机制:对于这种机制,Mybatis自身不会去实现事务管理,而是让容器例如JBOSS等来实现事务管理.</li></ul><h3 id="事务的配置与使用"><a href="#事务的配置与使用" class="headerlink" title="事务的配置与使用"></a>事务的配置与使用</h3><h4 id="事务的配置"><a href="#事务的配置" class="headerlink" title="事务的配置"></a>事务的配置</h4><p>在使用Mybatis时,需要在Mybatis根配置文件Mybatis-Config.xml中配置:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;environments default=&quot;development&quot;&gt;</span><br><span class="line">       &lt;environment id=&quot;development&quot;&gt;</span><br><span class="line">           &lt;!-- 配置事务管理 ，采用JDBC管理事务--&gt;</span><br><span class="line">           &lt;transactionManager type=&quot;JDBC&quot;/&gt;</span><br><span class="line">           &lt;!-- POOLED是mybatis的 数据源 --&gt;</span><br><span class="line">           &lt;!-- JNDI是基于tomcat的数据源 --&gt;</span><br><span class="line">           &lt;dataSource type=&quot;POOLED&quot;&gt;</span><br><span class="line">               &lt;property name=&quot;driver&quot; value=&quot;$&#123;jdbc.driverClassName&#125;&quot;/&gt;</span><br><span class="line">               &lt;property name=&quot;url&quot; value=&quot;$&#123;jdbc.url&#125;&quot;/&gt;</span><br><span class="line">               &lt;property name=&quot;username&quot; value=&quot;$&#123;jdbc.username&#125;&quot;/&gt;</span><br><span class="line">               &lt;property name=&quot;password&quot; value=&quot;$&#123;jdbc.password&#125;&quot;/&gt;</span><br><span class="line">           &lt;/dataSource&gt;</span><br><span class="line">       &lt;/environment&gt;</span><br><span class="line">   &lt;/environments&gt;</span><br></pre></td></tr></table></figure></p><p><environment>元素定义了连接数据库的类型,而<transactionmanager>子元素的type属性决定了我们使用什么事务管理机制.</transactionmanager></environment></p><h3 id="JdbcTransaction"><a href="#JdbcTransaction" class="headerlink" title="JdbcTransaction"></a>JdbcTransaction</h3><p>JdbcTransaction可以直接使用JDBC的提交和回滚事务管理机制.即使用java.sql.Connection上的commit与rollback功能来完成实务操作,相当于对java.sql.Connection的再次封装.JdbcTransaction源码:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line">//</span><br><span class="line">// Source code recreated from a .class file by IntelliJ IDEA</span><br><span class="line">// (powered by Fernflower decompiler)</span><br><span class="line">//</span><br><span class="line"></span><br><span class="line">package org.apache.ibatis.transaction.jdbc;</span><br><span class="line"></span><br><span class="line">import java.sql.Connection;</span><br><span class="line">import java.sql.SQLException;</span><br><span class="line">import javax.sql.DataSource;</span><br><span class="line">import org.apache.ibatis.logging.Log;</span><br><span class="line">import org.apache.ibatis.logging.LogFactory;</span><br><span class="line">import org.apache.ibatis.session.TransactionIsolationLevel;</span><br><span class="line">import org.apache.ibatis.transaction.Transaction;</span><br><span class="line">import org.apache.ibatis.transaction.TransactionException;</span><br><span class="line"></span><br><span class="line">public class JdbcTransaction implements Transaction &#123;</span><br><span class="line">    private static final Log log = LogFactory.getLog(JdbcTransaction.class);</span><br><span class="line">    protected Connection connection;//获取数据库连接</span><br><span class="line">    protected DataSource dataSource;//获取数据源</span><br><span class="line">    protected TransactionIsolationLevel level;//隔离级别</span><br><span class="line">    protected boolean autoCommmit;//是否自动提交</span><br><span class="line"></span><br><span class="line">    public JdbcTransaction(DataSource ds, TransactionIsolationLevel desiredLevel, boolean desiredAutoCommit) &#123;</span><br><span class="line">        this.dataSource = ds;</span><br><span class="line">        this.level = desiredLevel;</span><br><span class="line">        this.autoCommmit = desiredAutoCommit;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public JdbcTransaction(Connection connection) &#123;</span><br><span class="line">        this.connection = connection;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Connection getConnection() throws SQLException &#123;</span><br><span class="line">        if (this.connection == null) &#123;</span><br><span class="line">            this.openConnection();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return this.connection;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void commit() throws SQLException &#123;</span><br><span class="line">        if (this.connection != null &amp;&amp; !this.connection.getAutoCommit()) &#123;</span><br><span class="line">            if (log.isDebugEnabled()) &#123;</span><br><span class="line">                log.debug(&quot;Committing JDBC Connection [&quot; + this.connection + &quot;]&quot;);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            this.connection.commit();//提交</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void rollback() throws SQLException &#123;</span><br><span class="line">        if (this.connection != null &amp;&amp; !this.connection.getAutoCommit()) &#123;</span><br><span class="line">            if (log.isDebugEnabled()) &#123;</span><br><span class="line">                log.debug(&quot;Rolling back JDBC Connection [&quot; + this.connection + &quot;]&quot;);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            this.connection.rollback();//回滚</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void close() throws SQLException &#123;</span><br><span class="line">        if (this.connection != null) &#123;</span><br><span class="line">            this.resetAutoCommit();</span><br><span class="line">            if (log.isDebugEnabled()) &#123;</span><br><span class="line">                log.debug(&quot;Closing JDBC Connection [&quot; + this.connection + &quot;]&quot;);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            this.connection.close();//关闭</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    .......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>从上面可以发现JdbcTransaction就是使用java.sql.Connection的commit与rollback等完成实务操作.<br>采用JDBC访问数据库的基本步骤：<br>    A.载入JDBC驱动程序<br>    B.定义连接URL<br>    C.建立连接<br>    D.创建Statement对象<br>    E.执行查询或更新<br>    F.结果处理<br>    G.关闭连接<br>以前写的项目中JDBC使用env配置(在context.xml中配置好数据源,然后在listener中初始化DadaSource读取该数据源文件,完成了连接信息的隔离,可以不用上面的A,B步骤使用DriverManager.getConnection(url,username,password))的操作:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">Connection conn = null;</span><br><span class="line">        PreparedStatement stmt = null;</span><br><span class="line">        SQLException ex = null;</span><br><span class="line">        boolean exist = false;</span><br><span class="line">        try &#123;</span><br><span class="line">            conn = dataSource.getConnection();</span><br><span class="line">            stmt = conn.prepareStatement(&quot;SELECT COUNT(1) FROM  account WHERE name=?&quot;);</span><br><span class="line">            stmt.setString(1, account.getName());</span><br><span class="line">            ResultSet rs = stmt.executeQuery();</span><br><span class="line">            if (rs.next()) &#123;</span><br><span class="line">                exist = (rs.getInt(1) == 1);//确认有无查询结果</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (SQLException e) &#123;</span><br><span class="line">            ex = e;</span><br><span class="line">        &#125; finally &#123;//最后记得关闭连接</span><br><span class="line">            if (stmt != null) &#123;</span><br><span class="line">                try &#123;</span><br><span class="line">                    stmt.close();</span><br><span class="line">                &#125; catch (SQLException e) &#123;</span><br><span class="line">                    if (ex == null) &#123;</span><br><span class="line">                        ex = e;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            if (conn != null) &#123;</span><br><span class="line">                try &#123;</span><br><span class="line">                    conn.close();</span><br><span class="line">                &#125; catch (SQLException e) &#123;</span><br><span class="line">                    if (ex == null) &#123;</span><br><span class="line">                        ex = e;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            if (ex != null) &#123;</span><br><span class="line">                throw new RuntimeException(ex);</span><br><span class="line">            &#125;</span><br><span class="line">            return exist;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></p><h4 id="ManagedTransaction"><a href="#ManagedTransaction" class="headerlink" title="ManagedTransaction"></a>ManagedTransaction</h4><p>源码:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">//</span><br><span class="line">// Source code recreated from a .class file by IntelliJ IDEA</span><br><span class="line">// (powered by Fernflower decompiler)</span><br><span class="line">//</span><br><span class="line"></span><br><span class="line">package org.apache.ibatis.transaction.managed;</span><br><span class="line"></span><br><span class="line">import java.sql.Connection;</span><br><span class="line">import java.sql.SQLException;</span><br><span class="line">import javax.sql.DataSource;</span><br><span class="line">import org.apache.ibatis.logging.Log;</span><br><span class="line">import org.apache.ibatis.logging.LogFactory;</span><br><span class="line">import org.apache.ibatis.session.TransactionIsolationLevel;</span><br><span class="line">import org.apache.ibatis.transaction.Transaction;</span><br><span class="line"></span><br><span class="line">public class ManagedTransaction implements Transaction &#123;</span><br><span class="line">    private static final Log log = LogFactory.getLog(ManagedTransaction.class);</span><br><span class="line">    private DataSource dataSource;</span><br><span class="line">    private TransactionIsolationLevel level;</span><br><span class="line">    private Connection connection;</span><br><span class="line">    private boolean closeConnection;</span><br><span class="line"></span><br><span class="line">    public ManagedTransaction(Connection connection, boolean closeConnection) &#123;</span><br><span class="line">        this.connection = connection;</span><br><span class="line">        this.closeConnection = closeConnection;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public ManagedTransaction(DataSource ds, TransactionIsolationLevel level, boolean closeConnection) &#123;</span><br><span class="line">        this.dataSource = ds;</span><br><span class="line">        this.level = level;</span><br><span class="line">        this.closeConnection = closeConnection;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Connection getConnection() throws SQLException &#123;</span><br><span class="line">        if (this.connection == null) &#123;</span><br><span class="line">            this.openConnection();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return this.connection;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void commit() throws SQLException &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void rollback() throws SQLException &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void close() throws SQLException &#123;</span><br><span class="line">        if (this.closeConnection &amp;&amp; this.connection != null) &#123;</span><br><span class="line">            if (log.isDebugEnabled()) &#123;</span><br><span class="line">                log.debug(&quot;Closing JDBC Connection [&quot; + this.connection + &quot;]&quot;);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            this.connection.close();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    ......</span><br></pre></td></tr></table></figure></p><p>可以看到在提交与回滚的时候,函数总没有任何操作,即什么都不做,交给容器来操作管理.</p><p>##　Mybatis缓存机制<br>Mybatis缓存为两个级别,一级缓存是SqlSession级别的缓存,二级缓存是mapper级别的缓存,可以多个SqlSession共享.</p><h3 id="一级缓存"><a href="#一级缓存" class="headerlink" title="一级缓存"></a>一级缓存</h3><p>在操作数据库时就需要构造SqlSession对象,在其中有一个HashMap用于存储缓存数据.<br>一级缓存的作用域是SqlSession范围的,当在同一个SqlSession中执行两次相同sql语句是,第一次执行会将数据库查询到的语句写入到缓存,第二次就会直接从缓存中获取,不再去数据库底层查询,提高查询效率.如果数据库执行了DML操作(insert,update,delete),并且提交到了数据库(SqlSession.commit()),Mybatis会清空SqlSession中的一级缓存,目的是为了保证缓存中都是最新的信息,避免脏读.<br>当一个SqlSession结束之后(close),其中的一级缓存就不存在了.Mybatis默认开启一级缓存.</p><h3 id="二级缓存"><a href="#二级缓存" class="headerlink" title="二级缓存"></a>二级缓存</h3><p>二级缓存是mapper级别的缓存.使用二级缓存是,多个SqlSession使用同一个mapper的sql语句操作数据库.得到的数据会在二级缓存区域,也是使用HashMap存储.<br>二级缓存有多个SqlSession共享,作用域是mapper的同一个namespace,不同的SqlSession执行相同namespace中的sql语句,第一次会将数据库中查询的语句写到缓存中,第二次会直接在缓存中获取.当同样的执行insert,update与delete之后,缓存会清空.<br>Mybatis没有默认开启二级缓存,需要在setting全局参数中配置开启二级缓存.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;setting name=&quot;cacheEnabled&quot; value=&quot;true&quot;/&gt;</span><br></pre></td></tr></table></figure></p><p>然后在Mapper.xml中创建缓存:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;cache eviction=&quot;LRU&quot; flushInterval=&quot;6000&quot; size=&quot;512&quot; readOnly=&quot;true&quot;/&gt;</span><br></pre></td></tr></table></figure></p><p>以上配置创建了一个LRU(最近最少使用策略)缓存,每隔60s刷新,最大存储512个对象,返回的对象是只读.<br>cache元素用来开启当前mapper的namespace下的二级缓存.元素有以下属性:</p><ul><li>flushInterval:刷新间隔,毫秒为单位.默认不设置,没有刷新间隔,只有当调用调用语句时刷新.</li><li>size:缓存数目.默认为1024</li><li>readOnly:只读.只读缓存会给所有调用者返回缓存对象的实例,因此这些对象不可修改.可读写的缓存会返回缓存对象的拷贝(通过序列化),这会降低速度,但是更为安全.默认为false.</li><li>eviction:收回策略,默认为LRU:<br>  1.LRU:最经最少使用策略,移除最长时间不被使用的<br>  2.FIFI:先进先出策略.按对象进入的缓存顺序来移除他们.<br>  3.SOFT:软引用策略.移除基于垃圾收集器状态和软引用规则的对象.<br>  4.WEAK:弱引用策略,g更积极的移除垃圾收集器状态与弱引用规则的对象.<br>最重要的是readonly=ture， 说明cache对象只读，update的时候，cache不会更新！那么换个角度来说，其实代表了发生任何insert，update，delete操作的时候，会全量清理cache数据，确保一致性。如果readonly=false的时候，就比较好玩了，更新数据会写入新的cache，并且DO对象要实现序列化.<br>使用二级缓存是注意与查询结果映射的Java对象必须实现序列化,yi应为二级缓存数据不一定只在内存中,还有可能放在硬盘或者远程服务器上.  .<br>还可以在select语句中设置userCache=”false”来禁止使用二级缓存,保证每次查询都是最新结果.  </li></ul><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>在实验的时候,发现每次控制台每次输出都是 Cache Hit Ratio [com.mapper.EmployeeDao]: 0.0.表示缓存中命中几率为0.原来是我在每次查询完之后没有进行提交(session.commit().),而是在最后才提交.导致缓存中一开始并没有写入查询出来的数据,而是到最后总提交之后缓存中才有数据.以后记得每次操作完之后马上提交.</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Mybatis事务管理与缓存机制&quot;&gt;&lt;a href=&quot;#Mybatis事务管理与缓存机制&quot; class=&quot;headerlink&quot; title=&quot;Mybatis事务管理与缓存机制&quot;&gt;&lt;/a&gt;Mybatis事务管理与缓存机制&lt;/h1&gt;&lt;p&gt;数据库的事务管理是一个重要的点,合理的利用缓存可以加快查询速度,提升性能&lt;br&gt;
    
    </summary>
    
      <category term="study" scheme="https://watermelon-lee.github.io/categories/study/"/>
    
    
      <category term="Mybatis" scheme="https://watermelon-lee.github.io/tags/Mybatis/"/>
    
  </entry>
  
  <entry>
    <title>Mybatis学习总结2</title>
    <link href="https://watermelon-lee.github.io/2018/06/07/Mybatis2/"/>
    <id>https://watermelon-lee.github.io/2018/06/07/Mybatis2/</id>
    <published>2018-06-07T13:59:58.000Z</published>
    <updated>2018-06-08T14:29:40.900Z</updated>
    
    <content type="html"><![CDATA[<h1 id="动态SQL"><a href="#动态SQL" class="headerlink" title="动态SQL"></a>动态SQL</h1><p>Mybaits的一个强大特性,可以根据不同的条件来拼接SQL语句.<br><a id="more"></a><br>创建一个数据表<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">#employee</span><br><span class="line">CREATE TABLE employee(</span><br><span class="line">  id INT(11) PRIMARY KEY AUTO_INCREMENT,</span><br><span class="line">  loginName VARCHAR(18),</span><br><span class="line">  password VARCHAR(18),</span><br><span class="line">  name VARCHAR(18) DEFAULT NULL,</span><br><span class="line">  sex VARCHAR(4) DEFAULT&apos;男&apos;,</span><br><span class="line">  age INT(11) DEFAULT NULL ,</span><br><span class="line">  phone VARCHAR(19),</span><br><span class="line">  sal DOUBLE,</span><br><span class="line">  state VARCHAR(12)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">INSERT INTO employee(loginName, password, name, sex, age, phone, sal, state) VALUES (&apos;jack&apos;,&apos;123&apos;,&apos;杰克&apos;,&apos;nv&apos;,12,&apos;123456789&apos;,9041.22,&apos;active&apos;);</span><br><span class="line">INSERT INTO employee(loginName, password, name, sex, age, phone, sal, state) VALUES (&apos;wade&apos;,&apos;123&apos;,&apos;韦德&apos;,&apos;男&apos;,32,&apos;786868686&apos;,123.22,&apos;active&apos;);</span><br><span class="line">INSERT INTO employee(loginName, password, name, sex, age, phone, sal, state) VALUES (&apos;kobe&apos;,&apos;123&apos;,&apos;科比&apos;,&apos;男&apos;,124,&apos;123411223&apos;,234.22,&apos;active&apos;);</span><br><span class="line">INSERT INTO employee(loginName, password, name, sex, age, phone, sal, state) VALUES (&apos;james&apos;,&apos;123&apos;,&apos;詹姆斯&apos;,&apos;男&apos;,54,&apos;123444312&apos;,9041.22,&apos;Inactive&apos;);</span><br></pre></td></tr></table></figure></p><p>创建对应的实体类:Employee<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">package com.domain;</span><br><span class="line"></span><br><span class="line">public class Employee &#123;</span><br><span class="line">    private int id;</span><br><span class="line">    private String loginName;</span><br><span class="line">    private String password;</span><br><span class="line">    private String name;</span><br><span class="line">    private String sex;</span><br><span class="line">    private int age;</span><br><span class="line">    private String phone;</span><br><span class="line">    private double sal;</span><br><span class="line">    private String state;</span><br><span class="line">    //省略setter与getter</span><br></pre></td></tr></table></figure></p><h2 id="if"><a href="#if" class="headerlink" title="if"></a>if</h2><p>使用if可动态的包含where子句的条件的一部分,如:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;select id=&quot;selectWithIf1&quot; resultType=&quot;employee&quot;&gt;</span><br><span class="line">        SELECT * FROM employee WHERE state=&apos;active&apos;</span><br><span class="line">        &lt;!--加上选择条件,如果传来的参数有id,则加上id条件查询--&gt;</span><br><span class="line">        &lt;if test=&quot;id!=null&quot;&gt;AND id=#&#123;id&#125;&lt;/if&gt;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure></p><p>如果有多个搜索条件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;select id=&quot;selectWithIf2&quot; resultType=&quot;employee&quot;&gt;</span><br><span class="line">        SELECT * FROM employee WHERE state=&apos;active&apos;</span><br><span class="line">        &lt;if test=&quot;loginName!=null and password !=null&quot;&gt;</span><br><span class="line">            AND loginName=#&#123;loginName&#125; AND password=#&#123;password&#125;</span><br><span class="line">        &lt;/if&gt;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure></p><h2 id="choose-when-otherwise"><a href="#choose-when-otherwise" class="headerlink" title="choose(when,otherwise)"></a>choose(when,otherwise)</h2><p>从我们想用的条件中选择其中一个,注意只会选择一个,先满足的先选择<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--Choose,when,otherwise 只会选择一个,先符合的先选择--&gt;</span><br><span class="line">    &lt;select id=&quot;selectWithChoose&quot; resultType=&quot;employee&quot;&gt;</span><br><span class="line">        SELECT * FROM employee WHERE state=&apos;active&apos;</span><br><span class="line">        &lt;choose&gt;</span><br><span class="line">            &lt;when test=&quot;id!=null&quot;&gt;</span><br><span class="line">                AND id=#&#123;id&#125;</span><br><span class="line">            &lt;/when&gt;</span><br><span class="line">            &lt;when test=&quot;loginName!=null and password!=null&quot;&gt;</span><br><span class="line">                and loginName=#&#123;loginName&#125; AND password=#&#123;password&#125;</span><br><span class="line">            &lt;/when&gt;</span><br><span class="line">            &lt;otherwise&gt;</span><br><span class="line">                AND sex=&apos;男&apos;</span><br><span class="line">            &lt;/otherwise&gt;</span><br><span class="line">        &lt;/choose&gt;</span><br><span class="line">    &lt;/select&gt;</span><br></pre></td></tr></table></figure></p><h2 id="where"><a href="#where" class="headerlink" title="where"></a>where</h2><p>当where的条件不一定会有一个满足时,则可能会执行sql语句如:select * from employee where,这样显然是错误的句子.我么需要使用where元素解决.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--where 在不确定是否一定有条件传入,使用where,若有,则加上条件,如没有,则不加入--&gt;</span><br><span class="line">   &lt;select id=&quot;selectWithWhere&quot; resultType=&quot;employee&quot;&gt;</span><br><span class="line">       SELECT * FROM employee</span><br><span class="line">       &lt;where&gt;</span><br><span class="line">           &lt;if test=&quot;state!=null&quot;&gt;</span><br><span class="line">               SELECT state=#&#123;state&#125;</span><br><span class="line">           &lt;/if&gt;</span><br><span class="line">           &lt;if test=&quot;sex!=null&quot;&gt;</span><br><span class="line">               SELECT sex=#&#123;sex&#125;</span><br><span class="line">           &lt;/if&gt;</span><br><span class="line">       &lt;/where&gt;</span><br><span class="line">   &lt;/select&gt;</span><br></pre></td></tr></table></figure></p><p>这样,只有当有一个即以上的if条件成立时,才会插入where子句,否则执行select * from employee.</p><h2 id="set"><a href="#set" class="headerlink" title="set"></a>set</h2><p>使用set关键字动态包含需要跟新的列.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--使用set动态更新语句--&gt;</span><br><span class="line">    &lt;update id=&quot;updateWithSet&quot; parameterType=&quot;employee&quot;&gt;</span><br><span class="line">        UPDATE employee</span><br><span class="line">        &lt;set&gt;</span><br><span class="line">            &lt;if test=&quot;loginName!=null&quot;&gt;loginName=#&#123;loginName&#125;,&lt;/if&gt;</span><br><span class="line">            &lt;if test=&quot;password!=null&quot;&gt;password=#&#123;password&#125;,&lt;/if&gt;</span><br><span class="line">            &lt;if test=&quot;name!=null&quot;&gt;name=#&#123;name&#125;,&lt;/if&gt;</span><br><span class="line">            &lt;if test=&quot;sex!=null&quot;&gt;sex=#&#123;sex&#125;,&lt;/if&gt;</span><br><span class="line">            &lt;if test=&quot;age!=null&quot;&gt;age=#&#123;age&#125;,&lt;/if&gt;</span><br><span class="line">            &lt;if test=&quot;sal!=null&quot;&gt;sal=#&#123;sal&#125;,&lt;/if&gt;</span><br><span class="line">            &lt;if test=&quot;phone!=null&quot;&gt;phone=#&#123;phone&#125;,&lt;/if&gt;</span><br><span class="line">            &lt;if test=&quot;state!=null&quot;&gt;state=#&#123;state&#125;&lt;/if&gt;</span><br><span class="line">        &lt;/set&gt;</span><br><span class="line"></span><br><span class="line">        WHERE id=#&#123;id&#125;</span><br><span class="line">    &lt;/update&gt;</span><br></pre></td></tr></table></figure></p><p>set元素会自动前置SET关键字,并且去除无关的逗号.</p><h2 id="foreach"><a href="#foreach" class="headerlink" title="foreach"></a>foreach</h2><p>在SQL查询时,通常需要惊进行集合便利,通常发生在构建IN条件语句的时候.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--foreach遍历集合--&gt;</span><br><span class="line">   &lt;!--sql语句为SELECT * FROM employee WHERE id IN ( ? , ? , ? )--&gt;</span><br><span class="line">   &lt;select id=&quot;selectWithForeach&quot; resultType=&quot;employee&quot;&gt;</span><br><span class="line">       SELECT * FROM employee WHERE id IN</span><br><span class="line">       &lt;foreach collection=&quot;list&quot; index=&quot;index&quot; item=&quot;item&quot; open=&quot;(&quot; separator=&quot;,&quot; close=&quot;)&quot;&gt;</span><br><span class="line">           #&#123;item&#125;</span><br><span class="line">       &lt;/foreach&gt;</span><br><span class="line">   &lt;/select&gt;</span><br></pre></td></tr></table></figure></p><p>注意定义open,separator,close属性,否则生成sql语句为<code>SELECT * FROM employee WHERE id IN ? ? ?</code>,而我们需要的是<code>SELECT * FROM employee WHERE id IN ( ? , ? , ? )</code>.</p><h2 id="bind"><a href="#bind" class="headerlink" title="bind"></a>bind</h2><p>bind元素可以创建一个变量,并绑定到上下文中.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;select id=&quot;selectWithBind&quot; resultType=&quot;employee&quot;&gt;</span><br><span class="line">       &lt;bind name=&quot;var&quot; value=&quot;&apos;%&apos;+_parameter.getName()+&apos;%&apos;&quot;/&gt;</span><br><span class="line">       SELECT * FROM employee WHERE loginName LIKE  #&#123;var&#125;</span><br><span class="line">   &lt;/select&gt;</span><br></pre></td></tr></table></figure></p><p>使用_parameter可以获取你传入的javabean对象.然后调用getName()获取名字.生成sql语句<code>SELECT * FROM employee WHERE loginName LIKE ?</code> 查询参数为`Parameters: %a%(String)’,则可进行模糊查询.<br>自己也尝试了一下之间传参来进行模糊查询<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;select id=&quot;selectWithBind2&quot; resultType=&quot;employee&quot;&gt;</span><br><span class="line">        SELECT * FROM employee WHERE loginName like #&#123;name&#125;</span><br><span class="line">    &lt;/select&gt;</span><br></pre></td></tr></table></figure></p><p>这样在调用方法传参之前需要自己对模糊查询处理一下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String name=&quot;o&quot;;</span><br><span class="line">List&lt;Employee&gt;employeeList1=employeeDao.selectWithBind2(&apos;%&apos;+name+&apos;%&apos;);</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;动态SQL&quot;&gt;&lt;a href=&quot;#动态SQL&quot; class=&quot;headerlink&quot; title=&quot;动态SQL&quot;&gt;&lt;/a&gt;动态SQL&lt;/h1&gt;&lt;p&gt;Mybaits的一个强大特性,可以根据不同的条件来拼接SQL语句.&lt;br&gt;
    
    </summary>
    
      <category term="study" scheme="https://watermelon-lee.github.io/categories/study/"/>
    
    
      <category term="Mybatis" scheme="https://watermelon-lee.github.io/tags/Mybatis/"/>
    
  </entry>
  
  <entry>
    <title>Mybatis学习总结1</title>
    <link href="https://watermelon-lee.github.io/2018/06/05/Mybatis/"/>
    <id>https://watermelon-lee.github.io/2018/06/05/Mybatis/</id>
    <published>2018-06-05T12:32:11.000Z</published>
    <updated>2018-06-07T13:15:00.931Z</updated>
    
    <content type="html"><![CDATA[<p>最近在细学Mybatis,写一下总结,一边日后回顾.<br><a id="more"></a></p><h1 id="Mybatis关系映射"><a href="#Mybatis关系映射" class="headerlink" title="Mybatis关系映射"></a>Mybatis关系映射</h1><h2 id="一对一"><a href="#一对一" class="headerlink" title="一对一"></a>一对一</h2><p>一对一映射比如每个学生对应与一个学生卡,使用外键来关联.以学生与班级来示例.<br>创建两个表:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">CREATE TABLE card(</span><br><span class="line">  id INT PRIMARY KEY AUTO_INCREMENT,</span><br><span class="line">  code VARCHAR(19),</span><br><span class="line">  name VARCHAR(19)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">CREATE table student(</span><br><span class="line">  id INT PRIMARY KEY AUTO_INCREMENT,</span><br><span class="line">  name VARCHAR(10),</span><br><span class="line">  age int,</span><br><span class="line">  class_id int,</span><br><span class="line">  FOREIGN KEY (class_id) REFERENCES class(id)</span><br><span class="line">);</span><br></pre></td></tr></table></figure></p><p>然后创建两个实体类:<br>Card:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">package com.domain;</span><br><span class="line"></span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">public class Card &#123;</span><br><span class="line">    private int id;</span><br><span class="line">    private String code;</span><br><span class="line">    private String name;</span><br><span class="line"></span><br><span class="line">   </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        return &quot;Card&#123;&quot; +</span><br><span class="line">                &quot;id=&quot; + id +</span><br><span class="line">                &quot;, code=&apos;&quot; + code + &apos;\&apos;&apos; +</span><br><span class="line">                &quot;, name=&apos;&quot; + name + &apos;\&apos;&apos; +</span><br><span class="line">                &apos;&#125;&apos;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Card() &#123;</span><br><span class="line">        super();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Card(String code, String name) &#123;</span><br><span class="line">        this.code = code;</span><br><span class="line">        this.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int getId() &#123;</span><br><span class="line">        return id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setId(int id) &#123;</span><br><span class="line">        this.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getCode() &#123;</span><br><span class="line">        return code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setCode(String code) &#123;</span><br><span class="line">        this.code = code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getName() &#123;</span><br><span class="line">        return name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setName(String name) &#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Student:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">package com.domain;</span><br><span class="line"></span><br><span class="line">public class Student &#123;</span><br><span class="line">    private int id;</span><br><span class="line">    private String name;</span><br><span class="line">    private int age;</span><br><span class="line">    //测试一对一</span><br><span class="line">    private Card card;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        return &quot;Student&#123;&quot; +</span><br><span class="line">                &quot;id=&quot; + id +</span><br><span class="line">                &quot;, name=&apos;&quot; + name + &apos;\&apos;&apos; +</span><br><span class="line">                &quot;, age=&quot; + age +</span><br><span class="line">                &quot;, card=&quot; + card +</span><br><span class="line">                &apos;&#125;&apos;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Student() &#123;</span><br><span class="line">        super();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Student(String name, int age, Card card) &#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">        this.age = age;</span><br><span class="line">        this.card = card;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int getId() &#123;</span><br><span class="line">        return id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setId(int id) &#123;</span><br><span class="line">        this.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getName() &#123;</span><br><span class="line">        return name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setName(String name) &#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int getAge() &#123;</span><br><span class="line">        return age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setAge(int age) &#123;</span><br><span class="line">        this.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public card getCard() &#123;</span><br><span class="line">        return card;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setCard(Card card) &#123;</span><br><span class="line">        this.card = card;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在Student中定义了一个Card类,用来表示该学生的班级.<br>然后创建Mybatis配置文件:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE configuration</span><br><span class="line">        PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span><br><span class="line">        &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;</span><br><span class="line">&lt;!--通过这个配置文件，完成mybatis与数据库的连接  --&gt;</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">    &lt;!-- 注意此配置文件内的元素的  --&gt;</span><br><span class="line">    &lt;!-- 引入database.properties文件 --&gt;</span><br><span class="line">    &lt;properties resource=&quot;jdbc.properties&quot;/&gt;</span><br><span class="line">    &lt;!-- 从target中的classes文件夹中读取文件,不用classpath--&gt;</span><br><span class="line">    &lt;!--配置mybatis的log实现为LOG4J  --&gt;</span><br><span class="line">    &lt;!-- 配置后，后台就会有sql语句的输出 --&gt;</span><br><span class="line">    &lt;settings&gt;</span><br><span class="line">        &lt;setting name=&quot;logImpl&quot; value=&quot;LOG4J&quot;/&gt;</span><br><span class="line">    &lt;/settings&gt;</span><br><span class="line">    &lt;!-- 设置类的别名 --&gt;</span><br><span class="line">    &lt;typeAliases&gt;</span><br><span class="line">        &lt;!-- &lt;typeAlias alias=&quot;User&quot; type=&quot;com.wu.pojo.User&quot;/&gt; --&gt;</span><br><span class="line">        &lt;!-- 根据包取别名，把包下面的所有类都按类名来取别名 --&gt;</span><br><span class="line">        &lt;!-- 这用可以简化代码量 但是使用的是类名的小写 --&gt;</span><br><span class="line">        &lt;package name=&quot;com.domain&quot;/&gt;</span><br><span class="line">    &lt;/typeAliases&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;environments default=&quot;development&quot;&gt;</span><br><span class="line">        &lt;environment id=&quot;development&quot;&gt;</span><br><span class="line">            &lt;!-- 配置事务管理 ，采用JDBC管理事务--&gt;</span><br><span class="line">            &lt;transactionManager type=&quot;JDBC&quot;/&gt;</span><br><span class="line">            &lt;!-- POOLED是mybatis的 数据源 --&gt;</span><br><span class="line">            &lt;!-- JNDI是基于tomcat的数据源 --&gt;</span><br><span class="line">            &lt;dataSource type=&quot;POOLED&quot;&gt;</span><br><span class="line">                &lt;property name=&quot;driver&quot; value=&quot;$&#123;jdbc.driverClassName&#125;&quot;/&gt;</span><br><span class="line">                &lt;property name=&quot;url&quot; value=&quot;$&#123;jdbc.url&#125;&quot;/&gt;</span><br><span class="line">                &lt;property name=&quot;username&quot; value=&quot;$&#123;jdbc.username&#125;&quot;/&gt;</span><br><span class="line">                &lt;property name=&quot;password&quot; value=&quot;$&#123;jdbc.password&#125;&quot;/&gt;</span><br><span class="line">            &lt;/dataSource&gt;</span><br><span class="line">        &lt;/environment&gt;</span><br><span class="line">    &lt;/environments&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;!-- pojo的映射文件UserMapper引入到配入到配置文件中 --&gt;</span><br><span class="line">    &lt;mappers&gt;</span><br><span class="line">        &lt;!-- resource要写成路径 --&gt;</span><br><span class="line">        &lt;mapper resource=&quot;mapper/UserMapper.xml&quot;/&gt;</span><br><span class="line">        &lt;mapper resource=&quot;mapper/StudentMapper.xml&quot;/&gt;</span><br><span class="line">        &lt;mapper resource=&quot;mapper/CardMapper.xml&quot;/&gt;</span><br><span class="line">        &lt;!--&lt;package name=&quot;mapper&quot;/&gt;&amp;lt;!&amp;ndash; ???用处？？？ &amp;ndash;&amp;gt;--&gt;</span><br><span class="line">    &lt;/mappers&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure></p><p>在创建两个实体类对应的映射文件:<br>CardMapper:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span><br><span class="line">        &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;</span><br><span class="line">&lt;mapper namespace=&quot;com.mapper.CardDao&quot;&gt;</span><br><span class="line">    &lt;select id=&quot;select&quot; parameterType=&quot;int&quot; resultType=&quot;Card&quot;&gt;</span><br><span class="line">        SELECT * FROM card WHERE id = #&#123;id&#125;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure></p><p>StudentMapper:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span><br><span class="line">        &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;</span><br><span class="line">&lt;mapper namespace=&quot;com.mapper.StudentDao&quot;&gt;</span><br><span class="line">    &lt;!--定义用于映射的student的resultMap--&gt;</span><br><span class="line">   &lt;resultMap id=&quot;studentMap&quot; type=&quot;student&quot;&gt;</span><br><span class="line">       &lt;id property=&quot;id&quot; column=&quot;id&quot;/&gt;</span><br><span class="line">       &lt;result property=&quot;name&quot; column=&quot;name&quot;/&gt;</span><br><span class="line">       &lt;result property=&quot;age&quot; column=&quot;age&quot;/&gt;</span><br><span class="line">       &lt;!--定义一对一的映射关系--&gt;</span><br><span class="line">       &lt;association property=&quot;card&quot; column=&quot;card_id&quot;</span><br><span class="line">                    javaType=&quot;com.domain.Card&quot; select=&quot;com.mapper.CardDao.select&quot;/&gt;</span><br><span class="line">   &lt;/resultMap&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--&lt;select id=&quot;selectCard&quot; parameterType=&quot;int&quot; resultType=&quot;card&quot;&gt;--&gt;</span><br><span class="line">        &lt;!--SELECT * FROM card WHERE id = #&#123;id&#125;--&gt;</span><br><span class="line">    &lt;!--&lt;/select&gt;--&gt;</span><br><span class="line"></span><br><span class="line">    &lt;select id=&quot;select&quot; resultMap=&quot;studentMap&quot; parameterType=&quot;int&quot;&gt;</span><br><span class="line">        SELECT * FROM student WHERE id=#&#123;id&#125;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure></p><p>应为Student中包含了Card对象,所以执行select时候返回的不只是Student对象,所以需要自己定义一个resultMap来映射返回类型.<br>关联映射使用<association>标签,其中的属性如下:</association></p><ul><li>property:返回类型Student中的Card属性名,对应于实体类Student中的Card</li><li>column:对应数据库中的列名,映射到id上.</li><li>JavaType:属性的类型名称,即Student实体类中card对应的类,即com.domain.Card</li><li>select:执行的查询语句,将使用column对应的id作为参数来进行查询,将数据封装到property所代表的类型对象中.<br>使用Dao接口代理对象访问Mybatis,该对象关联了SqlSession对象,可以直接通过该对象操作数据库.对应映射文件中的namespace.Dao接口的类名需要与mapper映射文件中namespace中定义的名字一致,此外Dao接口中的方法名与参数也要与mapper映射文件中定义的SQL操作语句的id名与parameterTpe一致.<br>StudentDao:<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">package com.mapper;</span><br><span class="line"></span><br><span class="line">import com.domain.Student;</span><br><span class="line"></span><br><span class="line">public interface StudentDao &#123;</span><br><span class="line">    Student select(Integer id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>这样便完成了Student到Card的一对一映射.<br>测试:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">    </span><br><span class="line">    @Test</span><br><span class="line">    public void OneToOne() &#123;</span><br><span class="line">    private SqlSession sqlSession;</span><br><span class="line">        InputStream inputStream=this.getClass().getResourceAsStream(&quot;mybatis/Mybatis-config.xml&quot;);//从target中的classes文件夹中读取文件</span><br><span class="line"></span><br><span class="line">        //初始化mybatis,创建SqlsessionFactory实例</span><br><span class="line">        private SqlSessionFactory sqlSessionFactory=new SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line">        //创建Session实例</span><br><span class="line">        sqlSession = sqlSessionFactory.openSession();</span><br><span class="line">        //获得mapper接口的代理</span><br><span class="line">        StudentDao studentDao = sqlSession.getMapper(StudentDao.class);</span><br><span class="line">        CardDao cardDao=sqlSession.getMapper(CardDao.class);</span><br><span class="line">        Card card=cardDao.select(1);</span><br><span class="line">        System.out.println(card);</span><br><span class="line">        //直接调用接口查询</span><br><span class="line">        Student student=studentDao.select(1);</span><br><span class="line">        System.out.println(student);</span><br><span class="line">        sqlSession.commit();</span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="一对多"><a href="#一对多" class="headerlink" title="一对多"></a>一对多</h2><p>一个班级可以有许多学生,一个学生也只属于一个班级,则班级与学生就是一对多的关系.我们在数据库中使用主外键关联,外键应该在多的一方,也就是学生中,即多方维护关系.<br>创建学生student与班级clazz数据表,然后创建对应的实体类:<br>Clazz:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">package com.domain;</span><br><span class="line"></span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">public class Clazz &#123;</span><br><span class="line">    private int id;</span><br><span class="line">    private String code;</span><br><span class="line">    private String name;</span><br><span class="line"></span><br><span class="line">    //测试一对多</span><br><span class="line">    private List&lt;Student&gt; studentList;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public List&lt;Student&gt; getStudentList() &#123;</span><br><span class="line">        return studentList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setStudentList(List&lt;Student&gt; studentList) &#123;</span><br><span class="line">        this.studentList = studentList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        return &quot;Clazz&#123;&quot; +</span><br><span class="line">                &quot;id=&quot; + id +</span><br><span class="line">                &quot;, code=&apos;&quot; + code + &apos;\&apos;&apos; +</span><br><span class="line">                &quot;, name=&apos;&quot; + name + &apos;\&apos;&apos; +</span><br><span class="line">                &quot;, studentList=&quot; + studentList +</span><br><span class="line">                &apos;&#125;&apos;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public Clazz() &#123;</span><br><span class="line">        super();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Clazz(String code, String name) &#123;</span><br><span class="line">        this.code = code;</span><br><span class="line">        this.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int getId() &#123;</span><br><span class="line">        return id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setId(int id) &#123;</span><br><span class="line">        this.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getCode() &#123;</span><br><span class="line">        return code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setCode(String code) &#123;</span><br><span class="line">        this.code = code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getName() &#123;</span><br><span class="line">        return name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setName(String name) &#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Student:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">package com.domain;</span><br><span class="line"></span><br><span class="line">public class Student &#123;</span><br><span class="line">    private int id;</span><br><span class="line">    private String name;</span><br><span class="line">    private int age;</span><br><span class="line">    //测试一对一</span><br><span class="line">    private Clazz clazz;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        return &quot;Student&#123;&quot; +</span><br><span class="line">                &quot;id=&quot; + id +</span><br><span class="line">                &quot;, name=&apos;&quot; + name + &apos;\&apos;&apos; +</span><br><span class="line">                &quot;, age=&quot; + age +</span><br><span class="line">                &quot;, clazz=&quot; + clazz +</span><br><span class="line">                &apos;&#125;&apos;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Student() &#123;</span><br><span class="line">        super();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Student(String name, int age, Clazz clazz) &#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">        this.age = age;</span><br><span class="line">        this.clazz = clazz;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int getId() &#123;</span><br><span class="line">        return id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setId(int id) &#123;</span><br><span class="line">        this.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getName() &#123;</span><br><span class="line">        return name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setName(String name) &#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int getAge() &#123;</span><br><span class="line">        return age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setAge(int age) &#123;</span><br><span class="line">        this.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Clazz getClazz() &#123;</span><br><span class="line">        return clazz;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setClazz(Clazz clazz) &#123;</span><br><span class="line">        this.clazz = clazz;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>然后创建对应的映射文件,ClazzMapper:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span><br><span class="line">        &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;</span><br><span class="line">&lt;mapper namespace=&quot;com.mapper.ClazzDao&quot;&gt;</span><br><span class="line">    &lt;select id=&quot;select&quot; parameterType=&quot;int&quot; resultType=&quot;clazz&quot;&gt;</span><br><span class="line">        SELECT * FROM clazz WHERE id = #&#123;id&#125;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line"></span><br><span class="line">    &lt;resultMap id=&quot;clazzMap&quot; type=&quot;clazz&quot;&gt;</span><br><span class="line">        &lt;id property=&quot;id&quot; column=&quot;id&quot;/&gt;</span><br><span class="line">        &lt;result property=&quot;name&quot; column=&quot;name&quot;/&gt;</span><br><span class="line">        &lt;result property=&quot;code&quot; column=&quot;code&quot;/&gt;</span><br><span class="line">        &lt;!--映射多对一 使用懒加载--&gt;</span><br><span class="line">        &lt;collection property=&quot;studentList&quot; column=&quot;id&quot;</span><br><span class="line">                    javaType=&quot;ArrayList&quot; ofType=&quot;student&quot;</span><br><span class="line">                    select=&quot;selectStudentWithClazzId&quot; fetchType=&quot;lazy&quot;&gt;</span><br><span class="line">            &lt;id property=&quot;id&quot; column=&quot;id&quot;/&gt;</span><br><span class="line">            &lt;result property=&quot;name&quot; column=&quot;name&quot;/&gt;</span><br><span class="line">            &lt;result property=&quot;age&quot; column=&quot;age&quot;/&gt;</span><br><span class="line">        &lt;/collection&gt;</span><br><span class="line">    &lt;/resultMap&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--根据班级Id查询学生--&gt;</span><br><span class="line"></span><br><span class="line">    &lt;select id=&quot;selectStudentWithClazzId&quot; parameterType=&quot;int&quot; resultType=&quot;student&quot;&gt;</span><br><span class="line">        SELECT * FROM student WHERE clazz_id=#&#123;id&#125;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--查询所有班级信息--&gt;</span><br><span class="line">    &lt;select id=&quot;selectAll&quot; resultMap=&quot;clazzMap&quot;&gt;</span><br><span class="line">        SELECT * FROM clazz</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line"></span><br><span class="line">    &lt;select id=&quot;selectClazzById&quot; parameterType=&quot;int&quot; resultMap=&quot;clazzMap&quot;&gt;</span><br><span class="line">        SELECT * FROM clazz WHERE id=#&#123;id&#125;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure></p><p>使用<collection>元素映射一对多的关联关系,其中select表示使用Column属性的id作为查询参数进行selectStudentWithClazzId查询.查询对象将封装到property对应的studentList对象中.<br>fetchType表示加载策略,有eager与lazy(急加载与懒加载).使用懒加载是,查询班级时候,不会立即查询其中所有学生,而是需要时在进行加载.fetch机制更多的是为了考虑性能,一般情况下,一对多集合对象,使用懒加载.<br>需要在Mybatis-config中配置:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;setting name=&quot;lazyLoadingEnabled&quot; value=&quot;true&quot;/&gt;</span><br><span class="line">&lt;setting name=&quot;aggressiveLazyLoading&quot; value=&quot;false&quot;/&gt;</span><br></pre></td></tr></table></figure></collection></p><p>lazyLoadingEnabled表示延迟加载的全局开关,开启时,所有对象都会懒加载.<br>aggressiveLazyLoading启用时,会是懒加载的元素懒加载,按需加载.</p><p>StudentMapper:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span><br><span class="line">        &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;</span><br><span class="line">&lt;mapper namespace=&quot;com.mapper.StudentDao&quot;&gt;</span><br><span class="line">    &lt;!--定义用于映射的student的resultMap--&gt;</span><br><span class="line">   &lt;resultMap id=&quot;studentMap&quot; type=&quot;student&quot;&gt;</span><br><span class="line">       &lt;id property=&quot;id&quot; column=&quot;id&quot;/&gt;</span><br><span class="line">       &lt;result property=&quot;name&quot; column=&quot;name&quot;/&gt;</span><br><span class="line">       &lt;result property=&quot;age&quot; column=&quot;age&quot;/&gt;</span><br><span class="line">       &lt;!--定义一对一的映射关系--&gt;</span><br><span class="line">       &lt;association property=&quot;clazz&quot; column=&quot;clazz_id&quot;</span><br><span class="line">                    javaType=&quot;com.domain.Clazz&quot; select=&quot;com.mapper.ClazzDao.select&quot;/&gt;</span><br><span class="line">   &lt;/resultMap&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--&lt;select id=&quot;selectClazz&quot; parameterType=&quot;int&quot; resultType=&quot;clazz&quot;&gt;--&gt;</span><br><span class="line">        &lt;!--SELECT * FROM clazz WHERE id = #&#123;id&#125;--&gt;</span><br><span class="line">    &lt;!--&lt;/select&gt;--&gt;</span><br><span class="line"></span><br><span class="line">    &lt;select id=&quot;select&quot; resultMap=&quot;studentMap&quot; parameterType=&quot;int&quot;&gt;</span><br><span class="line">        SELECT * FROM student WHERE id=#&#123;id&#125;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure></p><p>然后配置mapper对应的Dao接口,与前面一对一类似,然后进行测试即可.</p><h2 id="多对多"><a href="#多对多" class="headerlink" title="多对多"></a>多对多</h2><p>多对多在开发商城时十分常见,一个用户下订单订购商品,一个用户可以对应多个订单,一个订单对应一个用户,这是一对多.一个商品可以对应多个订单,一个订单也可对应多个商品.这是多对多.对于数据库的多对多关系,我们一般需要建立一个中间表来维护,中间表中的订单id作为外检参照订单表的id,中间表的商品id作为外检参照商品表的id.<br>首先创建数据表:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">#创建用户表</span><br><span class="line">CREATE TABLE users(</span><br><span class="line">  id INT(8)  PRIMARY KEY AUTO_INCREMENT,</span><br><span class="line">  username VARCHAR(10)</span><br><span class="line">);</span><br><span class="line">#创建商品表</span><br><span class="line">CREATE TABLE goods(</span><br><span class="line">  id INT(8) PRIMARY KEY AUTO_INCREMENT,</span><br><span class="line">  name VARCHAR(10),</span><br><span class="line">  price DOUBLE</span><br><span class="line">);</span><br><span class="line">#创建订单表</span><br><span class="line">CREATE TABLE orders(</span><br><span class="line">  id INT(8) PRIMARY KEY AUTO_INCREMENT,</span><br><span class="line">  code VARCHAR(30),</span><br><span class="line">  user_id INT(8),</span><br><span class="line">  FOREIGN KEY (user_id) REFERENCES users(id)</span><br><span class="line">);</span><br><span class="line">#创建中间表,表示商品与订单多对多</span><br><span class="line">CREATE TABLE goods_order(</span><br><span class="line">  order_id INT,</span><br><span class="line">  goods_id INT,</span><br><span class="line">  amount INT,</span><br><span class="line">  PRIMARY KEY (order_id,goods_id),</span><br><span class="line">  FOREIGN KEY (order_id) REFERENCES orders(id),</span><br><span class="line">  FOREIGN KEY (goods_id) REFERENCES goods(id)</span><br><span class="line">);</span><br><span class="line">INSERT INTO users(username) VALUE(&quot;wade&quot;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">INSERT INTO goods(name,price) VALUES (&quot;basketball&quot;,246);</span><br><span class="line">INSERT INTO goods(name,price) VALUES (&quot;shoes&quot;,965);</span><br><span class="line">INSERT INTO goods(name,price) VALUES (&quot;cloth&quot;,426);</span><br><span class="line"></span><br><span class="line">INSERT INTO  orders(code, user_id) VALUES (&quot;001&quot;,1);</span><br><span class="line">INSERT INTO  orders(code, user_id) VALUES (&quot;002&quot;,1);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">INSERT INTO goods_order VALUES (1,1,2);</span><br><span class="line">INSERT INTO goods_order VALUES (1,2,4);</span><br><span class="line">INSERT INTO goods_order VALUES (1,3,2);</span><br><span class="line">INSERT INTO goods_order VALUES (2,2,2);</span><br><span class="line">INSERT INTO goods_order VALUES (2,1,6);</span><br></pre></td></tr></table></figure></p><p>首先创建实体类:<br>Users:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">package com.domain;</span><br><span class="line"></span><br><span class="line">import java.io.Serializable;</span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">public class Users implements Serializable &#123;</span><br><span class="line">    private int id;</span><br><span class="line">    private String userName;</span><br><span class="line">    //用户与订单是一对多</span><br><span class="line">    private List&lt;Orders&gt;ordersList;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public List&lt;Orders&gt; getOrdersList() &#123;</span><br><span class="line">        return ordersList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setOrdersList(List&lt;Orders&gt; ordersList) &#123;</span><br><span class="line">        this.ordersList = ordersList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int getId() &#123;</span><br><span class="line">        return id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setId(int id) &#123;</span><br><span class="line">        this.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getUserName() &#123;</span><br><span class="line">        return userName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setUserName(String userName) &#123;</span><br><span class="line">        this.userName = userName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        return &quot;Users&#123;&quot; +</span><br><span class="line">                &quot;id=&quot; + id +</span><br><span class="line">                &quot;, userName=&apos;&quot; + userName + &apos;\&apos;&apos; +</span><br><span class="line">                &quot;, ordersList=&quot; + ordersList +</span><br><span class="line">                &apos;&#125;&apos;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Orders:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">package com.domain;</span><br><span class="line"></span><br><span class="line">import java.io.Serializable;</span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">public class Orders implements Serializable &#123;</span><br><span class="line">    private int id;</span><br><span class="line">    private String code;</span><br><span class="line">    //订单与用户是多对一</span><br><span class="line">    private Users users;</span><br><span class="line">    //订单与商品是多对多</span><br><span class="line">    private List&lt;Goods&gt;goodsList;</span><br><span class="line"></span><br><span class="line">    public int getId() &#123;</span><br><span class="line">        return id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setId(int id) &#123;</span><br><span class="line">        this.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getCode() &#123;</span><br><span class="line">        return code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setCode(String code) &#123;</span><br><span class="line">        this.code = code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Users getUsers() &#123;</span><br><span class="line">        return users;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setUsers(Users users) &#123;</span><br><span class="line">        this.users = users;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public List&lt;Goods&gt; getGoodsList() &#123;</span><br><span class="line">        return goodsList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setGoodsList(List&lt;Goods&gt; goodsList) &#123;</span><br><span class="line">        this.goodsList = goodsList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        return &quot;Orders&#123;&quot; +</span><br><span class="line">                &quot;id=&quot; + id +</span><br><span class="line">                &quot;, code=&apos;&quot; + code + &apos;\&apos;&apos; +</span><br><span class="line">                &quot;, users=&quot; + users +</span><br><span class="line">                &quot;, goodsList=&quot; + goodsList +</span><br><span class="line">                &apos;&#125;&apos;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Goods:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">package com.domain;</span><br><span class="line"></span><br><span class="line">import java.io.Serializable;</span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">public class Orders implements Serializable &#123;</span><br><span class="line">    private int id;</span><br><span class="line">    private String code;</span><br><span class="line">    //订单与用户是多对一</span><br><span class="line">    private Users users;</span><br><span class="line">    //订单与商品是多对多</span><br><span class="line">    private List&lt;Goods&gt;goodsList;</span><br><span class="line"></span><br><span class="line">    public int getId() &#123;</span><br><span class="line">        return id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setId(int id) &#123;</span><br><span class="line">        this.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getCode() &#123;</span><br><span class="line">        return code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setCode(String code) &#123;</span><br><span class="line">        this.code = code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Users getUsers() &#123;</span><br><span class="line">        return users;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setUsers(Users users) &#123;</span><br><span class="line">        this.users = users;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public List&lt;Goods&gt; getGoodsList() &#123;</span><br><span class="line">        return goodsList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setGoodsList(List&lt;Goods&gt; goodsList) &#123;</span><br><span class="line">        this.goodsList = goodsList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        return &quot;Orders&#123;&quot; +</span><br><span class="line">                &quot;id=&quot; + id +</span><br><span class="line">                &quot;, code=&apos;&quot; + code + &apos;\&apos;&apos; +</span><br><span class="line">                &quot;, users=&quot; + users +</span><br><span class="line">                &quot;, goodsList=&quot; + goodsList +</span><br><span class="line">                &apos;&#125;&apos;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>然后定义映射文件:<br>UsersMapper:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span><br><span class="line">        &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;</span><br><span class="line">&lt;mapper namespace=&quot;com.mapper.UsersDao&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;resultMap id=&quot;usersMap&quot; type=&quot;users&quot;&gt;</span><br><span class="line">        &lt;id property=&quot;id&quot; column=&quot;id&quot;/&gt;</span><br><span class="line">        &lt;result property=&quot;userName&quot; column=&quot;username&quot;/&gt;</span><br><span class="line">        &lt;collection property=&quot;ordersList&quot; ofType=&quot;orders&quot; column=&quot;id&quot;</span><br><span class="line">                    javaType=&quot;ArrayList&quot; fetchType=&quot;lazy&quot; select=&quot;com.mapper.OrdersDao.selectOrdersByUserId&quot;&gt;</span><br><span class="line">            &lt;id property=&quot;id&quot; column=&quot;id&quot;/&gt;</span><br><span class="line">            &lt;result property=&quot;code&quot; column=&quot;code&quot;/&gt;</span><br><span class="line">        &lt;/collection&gt;</span><br><span class="line">    &lt;/resultMap&gt;</span><br><span class="line"></span><br><span class="line">    &lt;select id=&quot;selectUsersByUserId&quot; resultMap=&quot;usersMap&quot; parameterType=&quot;int&quot;&gt;</span><br><span class="line">        SELECT * FROM users WHERE id=#&#123;id&#125;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure></p><p>OrdersMapper:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span><br><span class="line">        &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;</span><br><span class="line">&lt;mapper namespace=&quot;com.mapper.OrdersDao&quot;&gt;</span><br><span class="line">    &lt;resultMap id=&quot;ordersMap&quot; type=&quot;orders&quot; &gt;</span><br><span class="line">        &lt;id property=&quot;id&quot; column=&quot;id&quot;/&gt;</span><br><span class="line">        &lt;result property=&quot;code&quot; column=&quot;code&quot;/&gt;</span><br><span class="line">        &lt;!--多对一映射 orders对应的users--&gt;</span><br><span class="line">        &lt;association property=&quot;users&quot; column=&quot;user_id&quot; javaType=&quot;users&quot; select=&quot;com.mapper.UsersDao.selectUsersByUserId&quot;&gt;</span><br><span class="line">            &lt;id property=&quot;id&quot; column=&quot;id&quot;/&gt;</span><br><span class="line">            &lt;result property=&quot;userName&quot; column=&quot;username&quot;/&gt;</span><br><span class="line">        &lt;/association&gt;</span><br><span class="line">        &lt;!--多对多映射--&gt;</span><br><span class="line">        &lt;collection property=&quot;goodsList&quot; column=&quot;id&quot; javaType=&quot;ArrayList&quot;</span><br><span class="line">                    ofType=&quot;goods&quot; fetchType=&quot;lazy&quot; select=&quot;com.mapper.GoodsDao.selectGoodsByOrderId&quot;&gt;</span><br><span class="line">            &lt;id property=&quot;id&quot; column=&quot;id&quot;/&gt;</span><br><span class="line">            &lt;result property=&quot;name&quot; column=&quot;name&quot;/&gt;</span><br><span class="line">            &lt;result property=&quot;price&quot; column=&quot;price&quot;/&gt;</span><br><span class="line">        &lt;/collection&gt;</span><br><span class="line">    &lt;/resultMap&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--查询订单,有相同的列名需要用别名来区分,如users里面查询出来的id与orders里的id列名重复--&gt;</span><br><span class="line">    &lt;select id=&quot;selectOrdersByOrderId&quot; resultMap=&quot;ordersMap&quot; parameterType=&quot;int&quot;&gt;</span><br><span class="line">        SELECT u.*,o.id,code,user_id FROM users u,orders o WHERE u.id=user_id AND  o.id=#&#123;id&#125;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;!--根据用户id查询订单--&gt;</span><br><span class="line">    &lt;select id=&quot;selectOrdersByUserId&quot; parameterType=&quot;int&quot; resultType=&quot;orders&quot;&gt;</span><br><span class="line">        SELECT * FROM orders WHERE user_id=#&#123;id&#125;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line"></span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure></p><p>GoddsMapper:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span><br><span class="line">        &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;</span><br><span class="line">&lt;mapper namespace=&quot;com.mapper.GoodsDao&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--根据orderId将goods都查出--&gt;</span><br><span class="line">    &lt;select id=&quot;selectGoodsByOrderId&quot; parameterType=&quot;int&quot; resultType=&quot;goods&quot;&gt;</span><br><span class="line">          SELECT * FROM goods WHERE id IN (SELECT goods_id FROM goods_order WHERE order_id=#&#123;id&#125;)</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line"></span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure></p><p>然后创建映射Dao接口即可进行测试.</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><h2 id="ORM"><a href="#ORM" class="headerlink" title="ORM"></a>ORM</h2><p>ORM是Object/Relation Mapping 即对象/关系数据库映射.ORM完成了面向对象的编程语言到面向关系的数据库映射.他将关系数据库包装成为一种对象模型.<br>使用ORM框架之后,应用程序不需要直接访问底层数据库,而是以面向对象的方式操纵持久话对象,而ORM框架将这些面向对象的操作转换为底层的SQL操作.<br>ORM有一下基本映射关系:</p><ul><li>数据表映射类</li><li>数据表的行映射实例</li><li>数据表的lies映射实例对象的属性</li></ul><h2 id="Mybatis"><a href="#Mybatis" class="headerlink" title="Mybatis"></a>Mybatis</h2><ul><li>Mybatis的PO十分简单,与普通的JavaBean没有区别,所以Mybatis是一种低入侵式设计.</li><li>SqlsessionFactory是Mybatis的关键对象,他是单个数据库映射关系经过编译之后的内存镜像.每个Mybatis的应用程序以一个SqlsessionFactory对象实例为核心.并且SqlsessionFactory是线程安全的,一旦被创建,应该在整个应用程序执行期间都存在.在应用程序运行期间不要多次创建,应当使用单例模式.如果想连接两个数据库,就需要分别创建两个SqlSessionFactory实例.SqlsessionFactory是创建Sqlsession的工厂.使用SqlsessionFactory.openSession()来创建.</li><li>SqlSession是Mybatis执行持久化操作的对象.他是应用程序与持久层之间执行交互操作的一个单线程对象.SqlSession对象完全包含了以数据库为北京的所有执行SQL操作方法,底层封装了JDBC连接,可以用SqlSession对象直接执行以映射的SQL语句.每个线程都应该有自己的SqlSession实例.SqlSession实例不可共享,非线程安全,不可以将SqlSession放在一个类的静态字段与实例字段中.使用完SqlSession需要关闭.</li></ul><p>与一对一是,在数据库中可以引入外键作为关联,一般是多方维护关系,即在多方中引入外检,然后在实体类中属性包含该关联类.比如Users与Orders是一对多关系,则在表Orders中有User_id属性,并且在实体类Orders中有Users属性,而Users中则包含List<orders>orderList.而多对多关系则引入联表,用于查询两者对应关系,如goods_orders,并在两者实体类中包含对应属性.  </orders></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在细学Mybatis,写一下总结,一边日后回顾.&lt;br&gt;
    
    </summary>
    
      <category term="study" scheme="https://watermelon-lee.github.io/categories/study/"/>
    
    
      <category term="Mybatis" scheme="https://watermelon-lee.github.io/tags/Mybatis/"/>
    
  </entry>
  
  <entry>
    <title>Maven</title>
    <link href="https://watermelon-lee.github.io/2018/05/30/Spring-Maven/"/>
    <id>https://watermelon-lee.github.io/2018/05/30/Spring-Maven/</id>
    <published>2018-05-30T14:26:21.000Z</published>
    <updated>2018-06-13T06:25:42.314Z</updated>
    
    <content type="html"><![CDATA[<p>自己对于Maven依赖一直有些迷糊,每次都是之间复制配置文件,还是需要有所了解,慢慢做一个总结<br><a id="more"></a></p><h1 id="Spring必要依赖"><a href="#Spring必要依赖" class="headerlink" title="Spring必要依赖"></a>Spring必要依赖</h1><p>总体上来说必须要有的一共是7个依赖:</p><ul><li>Spring核心依赖:spring-core,spring-beans,spring-context</li><li>SpringDao依赖:spring-jdbc,spring-tx</li><li>SPring web依赖:spring-web,spring-webmvc</li><li>Spring test依赖:spring-test</li></ul><h2 id="常见依赖的具体功能"><a href="#常见依赖的具体功能" class="headerlink" title="常见依赖的具体功能"></a>常见依赖的具体功能</h2><ul><li>spring-core:包含Spring框架基本核心工具类型.Spring其他的组件都需要使用这个包里面的类.外部依赖commons logging(Log4J)</li><li>spring-beans:所有应用都要用到,包含配置文件,创建和管理bean以及进行Inversion of Control/Dependency Injection(IOC/DI)相关操作的所有类.外部依赖spring-core</li><li>spring-aop:对使用Spring AOP特性是所需要的所有类进行支持.基于AOP的Spring特性如声明事务管理也包含在其中.外部依赖spring-core.soring-beans.</li><li>spring-context:为Spring核心提供了大量的扩展.可以找到Spring ApplicationContexttext所需的所有类,JDNI(Java Naming and Directory Interface)所需全部类.instrumentation组件以及校验Validation方面相关的类.</li><li>spring-dao:这个jar 文件包含Spring DAO、Spring Transaction 进行数据访问的所有类.为了使用声明型事务支持，还需在自己的应用里包含spring-aop.jar.外部依赖spring-core，spring-aop， spring-context.</li><li>spring-jdbc:这个jar 文件包含对Spring 对JDBC 数据访问进行封装的所有类.外部依赖spring-beans，spring-dao</li><li>spring-context-support:包含支持缓存Cache（ehcache）、JCA、JMX、 邮件服务（Java Mail、COS Mail）、任务计划Scheduling（Timer、Quartz）方面的类.以前的版本中应该是这个：spring-support.jar这个jar 文件包含支持UI模版（Velocity，FreeMarker，JasperReports），邮件服务，脚本服务(JRuby)，缓存Cache（EHCache），任务计划Scheduling（uartz）方面的类.</li><li>spring-web:这个jar 文件包含Web 应用开发时，用到Spring 框架时所需的核心类，包括自动载入Web Application Context 特性的类、Struts 与JSF 集成类、文件上传的支持类、Filter 类和大量工具辅助类.外部依赖spring-context, Servlet API.</li><li>spring-webmvc:这个jar 文件包含Spring MVC 框架相关的所有类.包括框架的Servlets，Web MVC框架，控制器和视图支持.当然，如果你的应用使用了独立的MVC 框架，则无需这个JAR 文件里的任何类.外部依赖spring-web.spring-support.</li><li>spring-orm:包含Spring对DAO特性集进行了扩展，使其支持iBATIS、JDO、OJB、TopLink，因为Hibernate已经独立成包了，现在不包含在这个包里了.这个jar文件里大部分的类都要依赖spring-dao.jar里的类，用这个包时你需要同时包含spring-dao.jar包.</li><li>spring-oxm:Spring 对Object/XMl的映射支持,可以让Java与XML之间来回切换.</li><li>spring-tx:以前是在这里org.springframework.transaction为JDBC、Hibernate、JDO、JPA、Beans等提供的一致的声明式和编程式事务管理支持.</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- Spring依赖 --&gt;</span><br><span class="line">    &lt;!-- 1.Spring核心依赖 --&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-core&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;4.3.7.RELEASE&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-beans&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;4.3.7.RELEASE&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-context&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;4.3.7.RELEASE&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">&lt;!-- 2.Spring dao依赖 --&gt;</span><br><span class="line">&lt;!-- spring-jdbc包括了一些如jdbcTemplate的工具类 --&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-jdbc&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;4.3.7.RELEASE&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-tx&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;4.3.7.RELEASE&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;!-- 3.Spring web依赖 --&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-web&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;4.3.7.RELEASE&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-webmvc&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;4.3.7.RELEASE&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;!-- 4.Spring test依赖：方便做单元测试和集成测试 --&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-test&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;4.3.7.RELEASE&lt;/version&gt;</span><br><span class="line">　　&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h1 id="Mybatis"><a href="#Mybatis" class="headerlink" title="Mybatis"></a>Mybatis</h1><p>要完成使用MyBatis访问MySQL数据库，需要添加一些依赖包，包含MyBatis3，连接驱动，JUnit，Log4j2等<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;org.mybatis&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;mybatis&lt;/artifactId&gt;</span><br><span class="line">  &lt;version&gt;3.4.7-SNAPSHOT&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">   &lt;!-- junit.jar --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;junit&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;junit&lt;/artifactId&gt;</span><br><span class="line">  &lt;version&gt;4.10&lt;/version&gt;</span><br><span class="line">  &lt;/dependency&gt;</span><br><span class="line">&lt;/dependencies&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line">  &lt;version&gt;5.1.29&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></p><h1 id="SSM必要依赖"><a href="#SSM必要依赖" class="headerlink" title="SSM必要依赖"></a>SSM必要依赖</h1><p>在别人<a href="https://maoyanting.github.io" target="_blank" rel="noopener">博客</a>找了一份<br><img src="../../../../img/Maven/Spring.png" alt="SSM"><br>这里重点提一下spring-webmvc，这里导入的是4.3.13.RELEASE，同时，还会隐式导入:</p><ul><li>spring-beans</li><li>spring-context</li><li>spring-aop</li><li>spring-core</li><li>spring-web</li><li>spring-expression</li><li>commons-logging</li><li>spring-context-support</li><li>spring-oxm</li><li>javax.servlet-api<br>等依赖，所以，如果你导入了spring-webmvc，这些依赖就不需要重复写一遍了。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;自己对于Maven依赖一直有些迷糊,每次都是之间复制配置文件,还是需要有所了解,慢慢做一个总结&lt;br&gt;
    
    </summary>
    
      <category term="study" scheme="https://watermelon-lee.github.io/categories/study/"/>
    
    
      <category term="Maven" scheme="https://watermelon-lee.github.io/tags/Maven/"/>
    
  </entry>
  
  <entry>
    <title>SpringMVC-Summary</title>
    <link href="https://watermelon-lee.github.io/2018/05/30/SpringMVC-Summary/"/>
    <id>https://watermelon-lee.github.io/2018/05/30/SpringMVC-Summary/</id>
    <published>2018-05-30T14:15:58.000Z</published>
    <updated>2018-06-03T01:58:00.260Z</updated>
    
    <content type="html"><![CDATA[<p>对自己所学的SpringMVC做一个总结<br><a id="more"></a></p><h1 id="web-xml配置"><a href="#web-xml配置" class="headerlink" title="web.xml配置"></a>web.xml配置</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># @Controller</span><br><span class="line">@Controller用来标记一个类，使用其标记的对象就是一个SpringMVC Controller对象，即一个控制类。Spring使用扫描机制查找应用程序中所有基于注解的控制类。分发处理器会扫描使用了该注解的类的方法，查看是否使用了@RequestMapping注解，而@RequestMapping才是真正的处理请求的处理器。为了保证使Spring能找到控制器，需要完成两节事情：</span><br><span class="line">* 在SpringMVC配置头文件引入Spring-context。</span><br><span class="line">* 使用&lt;context:component-scan base-package=“com.web”/&gt;元素，扫描指定的包，以便注册@Controller，@Service，@Repository，@Component等注解类成为Spring的Bean。</span><br><span class="line"># @RequestMapping&lt;br&gt;@RequestMapping用于注释一个类或者方法处理请求动作。常用属性有：</span><br><span class="line">* value：该属性将URL映射到具体的方法上。如`@RequestMapping（value=“/index”)public ModelAndView index()`.</span><br><span class="line">* method：制定该方法处理哪些HTTP请求方式`@RequestMapping（value=“/index”method=&quot;RequestMethod.GET&quot;)public ModelAndView index()`.</span><br><span class="line">* consumes:该属性处理请求的提交内容类型（Content-Type）。`@RequestMapping（value=“/index”method=&quot;RequestMethod.GET&quot; conmuses=“application/json”)public ModelAndView index()`.该方法表示处理request Content-Type为application/json类型的请求。</span><br><span class="line">* params：指定request中必须包含某些参数，才让该方法处理。`@RequestMapping（value=“/index”method=&quot;RequestMethod.GET&quot; conmuses=“application/json” params=“myParam=myValue”)public ModelAndView index()`。方法只处理含有名为“myParam”，值为“myValue”的请求。</span><br><span class="line"># 参数绑定注解&lt;br&gt;## @RequestParam注解</span><br><span class="line">可指定属性：</span><br><span class="line">* name：指定请求头绑定属性的名称</span><br><span class="line">* value：name属性名的别称&lt;br&gt;* required（true，false）：指定参数是否必须</span><br><span class="line">* defaultValue：如果没有传递参数使用的默认值,例如</span><br><span class="line">```@RequestMapping(value=&quot;/login&quot;)</span><br><span class="line">    public ModelAndView login(@RequestParam(&quot;userName&quot;)String userName,@RequestParam(value=&quot;birthday&quot;,required=&quot;false&quot;)Date birthday)&#123;</span><br><span class="line">        ......</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="PathVariable"><a href="#PathVariable" class="headerlink" title="@PathVariable"></a>@PathVariable</h2><p>使用该注解可以方便的获得URL中间的动态参数。@PathVariable只有一个属性value，表示绑定参数的名称。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">    public ModelAndView list(@PathVariable(&quot;userId)Integer userId)&#123;</span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="SessionAttributes"><a href="#SessionAttributes" class="headerlink" title="@SessionAttributes"></a>@SessionAttributes</h2><p>将需要的对象转存到HttpSession对象中。在控制器类上标注。</p><h2 id="ModelAttribute"><a href="#ModelAttribute" class="headerlink" title="@ModelAttribute"></a>@ModelAttribute</h2><p>如果希望将方法入参对象添加到模型当中，只需在入参前添加@ModelAttribute属性。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@RequestMapping(&quot;/login&quot;)</span><br><span class="line">public ModelAndView login(@ModelAttribute（“user”） User user)</span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>则SpringMVC以user为键，将User对象放到模型当中，在对视图渲染前。SpringMVC还会将模型中的数据转储到视图的上下文中，并且暴露给视图。<br>此外，还可以在方法定义中使用。SpringMVC在先处理请求时，会先逐个调用标注了@ModelAttribute的方法。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">@ModelAttribute(&quot;user&quot;)</span><br><span class="line">public User getUser() &#123;</span><br><span class="line">User user = new User();</span><br><span class="line">    user.setUserId(&quot;1001&quot;);</span><br><span class="line">        user.setUserName(&quot;&lt;&gt;&quot;);</span><br><span class="line">       return user;</span><br><span class="line">    &#125;</span><br><span class="line">    @RequestMapping(value = &quot;/handle62&quot;)</span><br><span class="line">    public String handle62(@ModelAttribute(&quot;user&quot;) User user) &#123;</span><br><span class="line">user.setUserName(&quot;tom&quot;);</span><br><span class="line">return &quot;/user/showUser&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在访问该控制器的任何方法之前，SpringMVC先执行标注了@ModelAttribute的方法，如getUser（），将返回值以user为键添加到模型中间。<br>然后执行handle62方法时候，模型数据会赋值给user入参，然后根据Http请求消息中的参数进一步填充覆盖user。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;对自己所学的SpringMVC做一个总结&lt;br&gt;
    
    </summary>
    
      <category term="study" scheme="https://watermelon-lee.github.io/categories/study/"/>
    
    
      <category term="Spring" scheme="https://watermelon-lee.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Spring+SpringMVC+Hibernate实战项目</title>
    <link href="https://watermelon-lee.github.io/2018/05/30/Project1/"/>
    <id>https://watermelon-lee.github.io/2018/05/30/Project1/</id>
    <published>2018-05-30T05:25:47.000Z</published>
    <updated>2018-06-09T12:57:52.641Z</updated>
    
    <content type="html"><![CDATA[<p>自己写的一个社区/论坛的项目<a href="https://github.com/watermelon-lee/-" target="_blank" rel="noopener">ThisIsUsCommunity</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;自己写的一个社区/论坛的项目&lt;a href=&quot;https://github.com/watermelon-lee/-&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;ThisIsUsCommunity&lt;/a&gt;&lt;/p&gt;

      
    
    </summary>
    
      <category term="study" scheme="https://watermelon-lee.github.io/categories/study/"/>
    
    
      <category term="Project" scheme="https://watermelon-lee.github.io/tags/Project/"/>
    
  </entry>
  
  <entry>
    <title>我的API文档</title>
    <link href="https://watermelon-lee.github.io/2018/05/20/JavaWebAPI/"/>
    <id>https://watermelon-lee.github.io/2018/05/20/JavaWebAPI/</id>
    <published>2018-05-20T01:24:19.000Z</published>
    <updated>2018-06-19T06:44:14.683Z</updated>
    
    <content type="html"><![CDATA[<p>把自己在编程中遇到的一些不会的API都记录下来<br><a id="more"></a></p><h1 id="Assert-断言"><a href="#Assert-断言" class="headerlink" title="Assert(断言)"></a>Assert(断言)</h1><p>属于org.springframework.util.Assert.是方法参数校验工具类.常用方法有:  </p><ul><li>notNull(Object object)<br>当 object 不为 null 时抛出异常，notNull(Object object, String message)方法允许您通过 message 定制异常信息。和 notNull() 方法断言规则相反的方法是 isNull(Object object)/isNull(Object object, String message)，它要求入参一定是 null；  </li><li>isTrue(boolean expression) / isTrue(boolean expression, String message)<br>当 expression 不为 true 抛出异常.  </li><li>notEmpty(Collection collection) / notEmpty(Collection collection, String message)<br>当集合未包含元素时抛出异常。<br>notEmpty(Map map) / notEmpty(Map map, String message) 和 notEmpty(Object[] array, String message) / notEmpty(Object[] array, String message) 分别对 Map 和 Object[] 类型的入参进行判断；  </li><li>hasLength(String text) / hasLength(String text, String message)  当 text 为 null 或长度为 0 时抛出异常；  </li><li>hasText(String text) / hasText(String text, String message)  text 不能为 null 且必须至少包含一个非空格的字符，否则抛出异常；  </li><li>isInstanceOf(Class clazz, Object obj) / isInstanceOf(Class type, Object obj, String message)  如果 obj 不能被正确造型为 clazz 指定的类将抛出异常；  </li><li>isAssignable(Class superType, Class subType) / isAssignable(Class superType, Class subType, String message)  subType 必须可以按类型匹配于 superType，否则将抛出异常；  <h1 id="String"><a href="#String" class="headerlink" title="String"></a>String</h1></li><li>int indexOf(String str):返回指定子字符串在此字符串第一次出现的索引.</li><li>String toLowerCase():使用默认语言环境下的规则将此String中的所有字符转化为小写.</li><li>String subString(int beginIndex):返回一个行的字符串,他是该字符串的子串</li><li>equalsIgnoreCase（String s）：将此String与另一个String s比较，不考虑大小写<h1 id="Pattern"><a href="#Pattern" class="headerlink" title="Pattern"></a>Pattern</h1>正则表达式的编译表示形式。<br>指定为字符串的正则表达式必须首先被编译为此类的实例。然后，可将得到的模式用于创建 Matcher 对象，依照正则表达式，该对象可以与任意字符序列匹配。执行匹配所涉及的所有状态都驻留在匹配器中，所以多个匹配器可以共享同一模式。<br>因此，典型的调用顺序是<br>   Pattern p = Pattern.compile(“a<em>b”);<br>   Matcher m = p.matcher(“aaaaab”);<br>   boolean b = m.matches();<br>在仅使用一次正则表达式时，可以方便地通过此类定义 matches 方法。此方法编译表达式并在单个调用中将输入序列与其匹配。语句boolean b = Pattern.matches(“a</em>b”, “aaaaab”);等效于上面的三个语句，尽管对于重复的匹配而言它效率不高，因为它不允许重用已编译的模式。<br>此类的实例是不可变的，可供多个并发线程安全使用。Matcher 类的实例用于此目的则不安全。  <h2 id="正则表达式摘要"><a href="#正则表达式摘要" class="headerlink" title="正则表达式摘要"></a>正则表达式摘要</h2></li><li>\     反斜线字符</li><li>.     任何字符（与行结束符可能匹配也可能不匹配）</li><li>\d     数字：[0-9]</li><li>\D     非数字： [^0-9]</li><li>\s     空白字符：[ \t\n\x0B\f\r]</li><li>\S     非空白字符：[^\s]</li><li>\w     单词字符：[a-zA-Z_0-9]</li><li>\W     非单词字符：[^\w]<h2 id="常见方法"><a href="#常见方法" class="headerlink" title="常见方法"></a>常见方法</h2></li><li>static Pattern compile(String regex):将给定的正则表达式编译到模式中。</li><li>static Pattern compile(String regex, int flags):将给定的正则表达式编译到具有给定标志的模式中。</li><li>Matcher matcher(CharSequence input):创建匹配给定输入与此模式的匹配器。</li></ul><h1 id="Matcher"><a href="#Matcher" class="headerlink" title="Matcher"></a>Matcher</h1><p> 通过解释 Pattern 对 character sequence 执行匹配操作的引擎。<br>通过调用模式的 matcher 方法从模式创建匹配器。创建匹配器后，可以使用它执行三种不同的匹配操作：  </p><pre><code>matches 方法尝试将整个输入序列与该模式匹配。  lookingAt 尝试将输入序列从头开始与该模式匹配。  find 方法扫描输入序列以查找与该模式匹配的下一个子序列。  </code></pre><p>每个方法都返回一个表示成功或失败的布尔值。通过查询匹配器的状态可以获取关于成功匹配的更多信息。  </p><p>匹配器在其输入的子集（称为区域）中查找匹配项。默认情况下，此区域包含全部的匹配器输入。可通过 region 方法修改区域，通过 regionStart 和 regionEnd 方法查询区域。区域边界与某些模式构造交互的方式是可以更改的。有关此内容更多的信息，请参阅 useAnchoringBounds 和 useTransparentBounds。  </p><p>此类还定义使用新字符串替换匹配子序列的方法，需要时，可以从匹配结果计算出新字符串的内容。可以先后使用 appendReplacement 和 appendTail 方法将结果收集到现有的字符串缓冲区，或者使用更加便捷的 replaceAll 方法创建一个可以在其中替换输入序列中每个匹配子序列的字符串。  </p><p>匹配器的显式状态包括最近成功匹配的开始和结束索引。它还包括模式中每个捕获组捕获的输入子序列的开始和结束索引以及该子序列的总数。出于方便的考虑，还提供了以字符串的形式返回这些已捕获子序列的方法。  </p><p>匹配器的显式状态最初是未定义的；在成功匹配导致 IllegalStateException 抛出之前尝试查询其中的任何部分。每个匹配操作都将重新计算匹配器的显式状态。  </p><p>匹配器的隐式状态包括输入字符序列和添加位置，添加位置最初是零，然后由 appendReplacement 方法更新。  </p><p>可以通过调用匹配器的 reset() 方法来显式重置匹配器，如果需要新输入序列，则调用其 reset(CharSequence) 方法。重置匹配器将放弃其显式状态信息并将添加位置设置为零。  </p><p>此类的实例用于多个并发线程是不安全的。  </p><h2 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h2><ul><li>Matcher     appendReplacement(StringBuffer sb, String replacement):实现非终端添加和替换步骤。  </li><li>StringBuffer     appendTail(StringBuffer sb): 实现终端添加和替换步骤。</li><li>boolean     find():尝试查找与该模式匹配的输入序列的下一个子序列。 </li><li>boolean     find(int start):重置此匹配器，然后尝试查找匹配该模式、从指定索引开始的输入序列的下一个子序列。  </li></ul><h1 id="插话"><a href="#插话" class="headerlink" title="插话"></a>插话</h1><p>StringBuffer 字符串变量（线程安全）<br>StringBuilder 字符串变量（非线程安全）<br>简要的说， String 类型和 StringBuffer 类型的主要性能区别其实在于 String 是不可变的对象, 因此在每次对 String 类型进行改变的时候其实都等同于生成了一个新的 String 对象，然后将指针指向新的 String 对象，所以经常改变内容的字符串最好不要用 String ，因为每次生成对象都会对系统性能产生影响，特别当内存中无引用对象多了以后， JVM 的 GC 就会开始工作，那速度是一定会相当慢的。<br> 而如果是使用 StringBuffer 类则结果就不一样了，每次结果都会对 StringBuffer 对象本身进行操作，而不是生成新的对象，再改变对象引用。所以在一般情况下我们推荐使用 StringBuffer ，特别是字符串对象经常改变的情况下。  </p><h1 id="Query-Hibernate"><a href="#Query-Hibernate" class="headerlink" title="Query(Hibernate)"></a>Query(Hibernate)</h1><p>Query实例是通过调用Session.createQuery（）获得的(Query query=getSession().createQuery(hql)).<br>可以通过调用setMaxResults（），setFirstResult（）来选择结果集的特定页面<br>常用方法:</p><ul><li>List     list():Return the query results as a List. </li><li>int     executeUpdate():Execute the update or delete statement.  </li><li>Iterator     iterate(): Return the query results as an Iterator.  </li><li>Query     setFirstResult(int firstResult): Set the first row to retrieve(检索).  </li><li>Query     setMaxResults(int maxResults):Set the maximum number of rows to retrieve.   </li><li>Query     setParameter(int position, Object val): Bind a value to a JDBC-style query parameter.  </li></ul><h1 id="List"><a href="#List" class="headerlink" title="List"></a>List</h1><ul><li>sublist(int i,int j):截取原list一段下来，但是只是快照，如果修改截取的部分list，原list也会相应的变化</li></ul><h1 id="Arrays"><a href="#Arrays" class="headerlink" title="Arrays"></a>Arrays</h1><p>此类包含用来操作数组（比如排序和搜索）的各种方法。此类还包含一个允许将数组作为列表来查看的静态工厂。<br>除非特别注明，否则如果指定数组引用为 null，则此类中的方法都会抛出 NullPointerException。 </p><ul><li>static int[]     copyOfRange(int[] original, int from, int to):将指定数组的指定范围复制到一个新数组。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;把自己在编程中遇到的一些不会的API都记录下来&lt;br&gt;
    
    </summary>
    
      <category term="study" scheme="https://watermelon-lee.github.io/categories/study/"/>
    
    
      <category term="JavaWeb" scheme="https://watermelon-lee.github.io/tags/JavaWeb/"/>
    
  </entry>
  
  <entry>
    <title>HibernateJPA</title>
    <link href="https://watermelon-lee.github.io/2018/05/19/HibernateJPA/"/>
    <id>https://watermelon-lee.github.io/2018/05/19/HibernateJPA/</id>
    <published>2018-05-19T03:33:20.000Z</published>
    <updated>2018-05-19T12:06:46.397Z</updated>
    
    <content type="html"><![CDATA[<h1 id="HibernateJPA注解"><a href="#HibernateJPA注解" class="headerlink" title="HibernateJPA注解"></a>HibernateJPA注解</h1><p>最近在写一个论坛的Demo,接触带了许多Hibernate的注解,不是很了解,做个笔记<br><a id="more"></a></p><h2 id="类级别注解"><a href="#类级别注解" class="headerlink" title="类级别注解"></a>类级别注解</h2><ul><li>@Entity(name=”Name”):映射实体类,name可选,对应数据库中的一个表.</li><li>@Table(name=”Name”,catalog=”Catalog”,schema=”Schema”):与@Entity配合使用,只能标注在实体类的class上,表示实体类对应的数据库表信息.Name可选，映射表的名称，若表名与实体类名相同，则name可省略。catalog可选，表示catalog名称，默认为Catalog(“”)。Schema可选，表示schema名称，默认为schma(“”)。 </li><li>@inheritance:参见<a href="https://blog.csdn.net/ack_finding/article/details/78691361" target="_blank" rel="noopener">博客</a></li><li>@cache:设置缓存策略,Hibernate提供了以下集中策略.<ol><li>CacheConcurrencyStrategy.NONE:不使用缓存.</li><li>CacheConcurrencyStrategy.READ_ONLY:只读模式,在此模式下,如果对数据进行了更新,就会产生异常.</li><li>CacheConcurrencyStrategy.REEAD_WRITE:读写模式,该模式在更新缓存的同时会对缓存里面的数据加锁,其他的事务如果去获取缓存,被锁发现了,就会直接去数据库查询.</li><li>CacheConcurrencyStrategy.NONSTRICT_READ_WRITE:不严格的读写模式,使用该模式不会对缓存数据加锁.</li><li>CacheConcurrencyStrategy.TRANSACTIONAL:事务模式,指缓存支持事务,当事务回滚时,缓存也能回滚,目前只支持JTA环境.<h2 id="属性级别注解"><a href="#属性级别注解" class="headerlink" title="属性级别注解"></a>属性级别注解</h2>可以在属性字段上添加,也可以在属性的get上添加</li></ol></li><li>@id:定义了映射到数据库表的主键属性.</li><li>@GeneratedValue(Strategy=””),用于定义主键生成策略.Strategy有一下策略:<ol><li>GenerationType.AUTO:根据底层数据库自动选择</li><li>GenerationType.INDENTITY:根据数据库的Identity字段生成</li><li>GenerationType.SEQUENCE:使用Sequence来决定主键取值</li><li>GenerationType.TABLE:使用指定表来决定主键取值</li></ol></li><li>@Column:将属性映射到列上,使用该注解来覆盖默认值.可选属性:<ol><li>name:表示数据库表中该字段的名称</li><li>Nullable:该字段是否可为空,默认为True`</li><li>Unique:该字段标示是否唯一,默认为False</li><li>Length:标示字段大小,只对String类型字段有效,默认255</li><li>Inserable:在ORM框架执行Insert操作时,该字段是否需要出现在Insert语句中,默认True</li><li>Updateable:在ORM执行更行操作是,该字段是都出现在Update语句中,默认为True.对于一经创建就不可以更改的字段，改属性非常有用，如对于birthday字段。</li></ol></li><li>@Basic(fetch=”Lazy”,optional=”true”):表示一个简单的属性到数据库字段的映射,对没有标记任何getXXX()的方法,默认为@Basic.fetch表示该属性的读取策略,有EAGER和LAZY.分别为主枝抓取和延迟加载.默认为EAGER.</li><li>@Transient:表示该属性并非一个到数据库表的字段的映射,ORM框架将忽略该属性.如果一个属性并非数据库表的字段映射,就务必将其标示为@Transient,否则,ORM框架默认其注解为@Basic</li></ul><h2 id="关系映射注解"><a href="#关系映射注解" class="headerlink" title="关系映射注解"></a>关系映射注解</h2><p>实体之间的映射关系有一对一,一对多,多对一,多对多.  </p><h3 id="一对一外键"><a href="#一对一外键" class="headerlink" title="一对一外键:"></a>一对一外键:</h3><p>@OneToOne(cascade=CascadeType.ALL,fetch=FetchType)<br>@JoinColumn(name=”pid”,unique=true)<br>注：保存时应该先保存外键对象，再保存主表对象.fetch标示抓取策略,默认为FetchType.LAZY.cascade标示级联操作策略.  </p><h3 id="多对一外键"><a href="#多对一外键" class="headerlink" title="多对一外键"></a>多对一外键</h3><p>@ManyToOne(cascade={CasecadeType.All},fetch=FetchType.EAGER)<br>@JoinColum(name=”cid”, referencedColumnName=”CID”) </p><p>###　多对多单向外键<br>@ManyToMany(cascade = {CascadeType.PERSIST, CascadeType.MERGE}, mappedBy = “manBoards”, fetch = FetchType.LAZY)<br>private Set<user> users=new HashSet<user>();  </user></user></p><h3 id="Hibernate-CascadeType说明"><a href="#Hibernate-CascadeType说明" class="headerlink" title="Hibernate CascadeType说明"></a>Hibernate CascadeType说明</h3><p>CascadeType.PERSIST只有A类新增时，会级联B对象新增。若B对象在数据库存（跟新）在则抛异常（让B变为持久态） </p><p>CascadeType.MERGE指A类新增或者变化，会级联B对象（新增或者变化） </p><p>CascadeType.REMOVE只有A类删除时，会级联删除B类； </p><p>CascadeType.ALL包含所有； </p><p>CascadeType.REFRESH没用过。 </p><p>综上：大多数情况用CascadeType.MERGE就能达到级联跟新又不报错，用CascadeType.ALL时要斟酌下CascadeType.REMOVE  </p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;HibernateJPA注解&quot;&gt;&lt;a href=&quot;#HibernateJPA注解&quot; class=&quot;headerlink&quot; title=&quot;HibernateJPA注解&quot;&gt;&lt;/a&gt;HibernateJPA注解&lt;/h1&gt;&lt;p&gt;最近在写一个论坛的Demo,接触带了许多Hibernate的注解,不是很了解,做个笔记&lt;br&gt;
    
    </summary>
    
      <category term="study" scheme="https://watermelon-lee.github.io/categories/study/"/>
    
    
      <category term="Hibernate" scheme="https://watermelon-lee.github.io/tags/Hibernate/"/>
    
  </entry>
  
  <entry>
    <title>我们这一年</title>
    <link href="https://watermelon-lee.github.io/2018/05/17/OneYear/"/>
    <id>https://watermelon-lee.github.io/2018/05/17/OneYear/</id>
    <published>2018-05-16T16:00:00.000Z</published>
    <updated>2018-05-18T10:57:17.804Z</updated>
    
    <content type="html"><![CDATA[<p>嗨,西瓜,有你的日子过得好快,我们也在一起一年了.<br><a id="more"></a><br>刚开始的认识始于一次偶然的问候,坐在前桌的你突然回头问我是不是湖南人(大概是我的塑普十分明显),后来问了别人才得知就在隔壁班的你竟也是老乡.之后便添加了你的好友.<br><img src="../../../../img/oneYear/2.jpg" alt="pic2"><br>相互熟悉也是始于一次偶然.没有人报名当人大代表,我就被导员拉去了.大概是需要收集一些同学们反映的问题,然后开会时提出来.想想当时还气的不行,又得浪费打游戏的时间去开一些莫名其妙的会.有天晚上打游戏时,你发了一个意见反馈给我,通过这次聊天,发现两人之间有好多相似的地方,有说不完的话.<br>后来相互熟悉,也觉得互有感觉,进过深思熟虑,终于决定勇敢的表达自己对你喜欢.当然,我成功了,原因的话,大概就是下图吧<br><img src="../../../../img/oneYear/1.jpg" alt="ShowMyLove"><br>和你在一起后生活也多了很多新奇的体验.我们一起在球场看露天电影,走遍校园里的大道与小巷,一路小跑的追逐晚霞,每晚自习完的一起锻炼,一起种星星,在路边走过看这肥肥跳跳滑稽的走路,当然,最后也带你体验了一下我玩了两年的游戏.最后虽然就在良乡呆了两个月,经历却比之前的两年更为丰富.暑假的成都之行也是十分的开心,带着一个每次出行都会做好计划,把行程安排的十分妥当的你体验了一下随意的旅行.<br><img src="../../../../img/oneYear/3.jpg" alt="pic3"><br><img src="../../../../img/oneYear/4.jpg" alt="pic4"><br><img src="../../../../img/oneYear/5.jpg" alt="pic5"><br><img src="../../../../img/oneYear/6.jpg" alt="pic6"><br><img src="../../../../img/oneYear/7.jpg" alt="pic7"><br>当然,我们也有经历一段tough time.大三上你交换去了台湾半年,我们就得经历一段好长时间的异地了.还记得一开始你对于那里各种不适应,找房子,遇到一些不善意的人,和棘手的事情.当然,有问题就找老大投诉,我也愿意听,你不开心的时候我都会在一旁安慰你.还好你可爱又明事理,大多时候都可以哄好你.我也曾失去过耐心,表现的很自私,这种时候我是一个糟糕的男朋友.即便如此,你也总是会包容我,你真挚的情感总是能拯救我,always,always.十分感激.除了那一丢丢不好的地方,台湾这种城市对你这样的文艺女孩也算是天堂啦.有各种集市,你喜欢的手账,文具店.充满了生活气息的巷子,道路上有机车飞驰的声音.好可惜没有和你一起在台湾,以后有机会的话就请大导游带我去玩耍啦.<br><img src="../../../../img/oneYear/10.png" alt="pic10"><br><img src="../../../../img/oneYear/8.jpg" alt="pic8"><br><img src="../../../../img/oneYear/9.jpg" alt="pic9"><br>这个学期,我们又在一起啦.当然,大三是比较忙碌的,很多时间也都泡在图书馆了.暑假开始我们也就要一起考研了.总觉得你是一个特别勇敢有梦想的人,为了自己的兴趣,选择跨考.虽然也许会很难,不过我很一直陪你.在图书馆看到你沉浸在自己喜欢的书籍与作业中,也就觉得这一切也都值得.<br>最后,你有时老是会问我喜欢你的什么,那么,杜致远<br>我喜欢你坐在单车后搂住我看在我背上的动作.<br>我喜欢你吃好吃的东西,眯起眼睛的样子,还有双颊塞满食物时,嘴角露出上扬的弧线.<br>我喜欢你看着窗外跳跳发呆的侧脸.<br>我喜欢你偶尔听着我放的音乐不自禁摇摆的身体.<br>我喜欢你遇见摄像头时候摆个姿势,露出的微笑.<br>我喜欢你就算不懂也陪在旁边和我一起看球的认真.<br>我喜欢你在我问你带有选择的问题时,你习惯的说出”随你”.<br>我喜欢你悄悄为我准备的突如其来的惊喜.<br>我喜欢你不时的在我的书上或者写给我的卡片上,那些鼓励我好好学习的话语.<br>我喜欢你看自己感兴趣的书时,认真的眼神.<br>我喜欢你每天的问候”早早”与”晚安”的可爱.<br>我喜欢你在完成图形学作业之后有些癫狂的庆祝动作.<br>我喜欢你在北湖教我认那些花草树木的模样.<br>我喜欢你为我们创作的那些可爱的头像.<br>我喜欢这样的你.<br>偶尔翻起生日时你送我的32页的小本本,总有许多感动.很幸运能够遇到这样的你,一直陪伴有些幼稚愚蠢的我.也许以后还会犯错,还会遇到苦难,还得麻烦你多多照顾~</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;嗨,西瓜,有你的日子过得好快,我们也在一起一年了.&lt;br&gt;
    
    </summary>
    
      <category term="YuanYuan" scheme="https://watermelon-lee.github.io/categories/YuanYuan/"/>
    
    
      <category term="letter" scheme="https://watermelon-lee.github.io/tags/letter/"/>
    
  </entry>
  
  <entry>
    <title>两小无猜||天生一对 ?</title>
    <link href="https://watermelon-lee.github.io/2018/05/14/twins/"/>
    <id>https://watermelon-lee.github.io/2018/05/14/twins/</id>
    <published>2018-05-14T00:43:10.000Z</published>
    <updated>2018-05-14T15:27:12.074Z</updated>
    
    <content type="html"><![CDATA[<p>你们看起来好像一样可爱<br><a id="more"></a></p><h1 id="Bottle"><a href="#Bottle" class="headerlink" title="Bottle"></a>Bottle</h1><p><img src="../../../../img/twins/1.jpg" alt="Bottle">  </p><h1 id="Shoes"><a href="#Shoes" class="headerlink" title="Shoes"></a>Shoes</h1><p><img src="../../../../img/twins/2.jpg" alt="Shoes"><br><img src="../../../../img/twins/4.jpg" alt="Shoes"><br><img src="../../../../img/twins/5.jpg" alt="Shoes">  </p><h1 id="Satchel"><a href="#Satchel" class="headerlink" title="Satchel"></a>Satchel</h1><p><img src="../../../../img/twins/3.jpg" alt="Satchel">  </p><h1 id="Angel"><a href="#Angel" class="headerlink" title="Angel"></a>Angel</h1><p><img src="../../../../img/twins/6.jpg" alt="Angel">  </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;你们看起来好像一样可爱&lt;br&gt;
    
    </summary>
    
      <category term="home" scheme="https://watermelon-lee.github.io/categories/home/"/>
    
    
      <category term="twins" scheme="https://watermelon-lee.github.io/tags/twins/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu命令</title>
    <link href="https://watermelon-lee.github.io/2018/05/08/Linux-instructions/"/>
    <id>https://watermelon-lee.github.io/2018/05/08/Linux-instructions/</id>
    <published>2018-05-08T12:59:22.000Z</published>
    <updated>2018-06-08T06:14:15.813Z</updated>
    
    <content type="html"><![CDATA[<p>使用系统时总有好多命令不知道,查了然后又忘了,慢慢作个总结，把每次不记得的都写在这里吧。</p><ul><li>连接服务器：ssh <a href="mailto:root@39.107.93.107" target="_blank" rel="noopener">root@39.107.93.107</a></li><li>上传文件到服务器：类似：scp -r testprojectsystem.war <a href="mailto:root@39.107.93.107" target="_blank" rel="noopener">root@39.107.93.107</a>:/opt/tomcat/webapps/</li><li>mysql执行sql文件：进入mysql    Source fileAddress</li><li>查看mysql版本:mysql -V</li><li>查看端口lsof -i:8088</li><li>杀死使用该端口的进程:kill -9 PID号</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;使用系统时总有好多命令不知道,查了然后又忘了,慢慢作个总结，把每次不记得的都写在这里吧。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;连接服务器：ssh &lt;a href=&quot;mailto:root@39.107.93.107&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;ro
      
    
    </summary>
    
      <category term="study" scheme="https://watermelon-lee.github.io/categories/study/"/>
    
    
      <category term="Ubuntu" scheme="https://watermelon-lee.github.io/tags/Ubuntu/"/>
    
  </entry>
  
</feed>
